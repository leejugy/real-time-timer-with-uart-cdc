
cdc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009714  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080098b4  080098b4  0000a8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099a0  080099a0  0000b14c  2**0
                  CONTENTS
  4 .ARM          00000008  080099a0  080099a0  0000a9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099a8  080099a8  0000b14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099a8  080099a8  0000a9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099ac  080099ac  0000a9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  080099b0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001674  2000014c  08009afc  0000b14c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017c0  08009afc  0000b7c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b14c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179d5  00000000  00000000  0000b17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cbb  00000000  00000000  00022b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  00026810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f53  00000000  00000000  00027c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4ee  00000000  00000000  00028b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b43b  00000000  00000000  00043051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092917  00000000  00000000  0005e48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0da3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000579c  00000000  00000000  000f0de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000f6584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000014c 	.word	0x2000014c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800989c 	.word	0x0800989c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000150 	.word	0x20000150
 80001dc:	0800989c 	.word	0x0800989c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <MX_DMA_Init+0x3c>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	4a0b      	ldr	r2, [pc, #44]	@ (80005ac <MX_DMA_Init+0x3c>)
 8000580:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000584:	6313      	str	r3, [r2, #48]	@ 0x30
 8000586:	4b09      	ldr	r3, [pc, #36]	@ (80005ac <MX_DMA_Init+0x3c>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	203a      	movs	r0, #58	@ 0x3a
 8000598:	f000 fe43 	bl	8001222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800059c:	203a      	movs	r0, #58	@ 0x3a
 800059e:	f000 fe5c 	bl	800125a <HAL_NVIC_EnableIRQ>

}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40023800 	.word	0x40023800

080005b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	4b20      	ldr	r3, [pc, #128]	@ (800064c <MX_GPIO_Init+0x9c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	4a1f      	ldr	r2, [pc, #124]	@ (800064c <MX_GPIO_Init+0x9c>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d6:	4b1d      	ldr	r3, [pc, #116]	@ (800064c <MX_GPIO_Init+0x9c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	4b19      	ldr	r3, [pc, #100]	@ (800064c <MX_GPIO_Init+0x9c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a18      	ldr	r2, [pc, #96]	@ (800064c <MX_GPIO_Init+0x9c>)
 80005ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b16      	ldr	r3, [pc, #88]	@ (800064c <MX_GPIO_Init+0x9c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	4b12      	ldr	r3, [pc, #72]	@ (800064c <MX_GPIO_Init+0x9c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a11      	ldr	r2, [pc, #68]	@ (800064c <MX_GPIO_Init+0x9c>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <MX_GPIO_Init+0x9c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000620:	480b      	ldr	r0, [pc, #44]	@ (8000650 <MX_GPIO_Init+0xa0>)
 8000622:	f001 fb29 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000626:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800062a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062c:	2301      	movs	r3, #1
 800062e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	4619      	mov	r1, r3
 800063e:	4804      	ldr	r0, [pc, #16]	@ (8000650 <MX_GPIO_Init+0xa0>)
 8000640:	f001 f996 	bl	8001970 <HAL_GPIO_Init>

}
 8000644:	bf00      	nop
 8000646:	3720      	adds	r7, #32
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40020800 	.word	0x40020800

08000654 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN PFP */
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);
void send(send_type Send_Type,char *fmt,...);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af02      	add	r7, sp, #8
 800065a:	6078      	str	r0, [r7, #4]
	uint8_t rt_divider;
	if(htim == &htim3 && input_current_time_flag){
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a34      	ldr	r2, [pc, #208]	@ (8000730 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d161      	bne.n	8000728 <HAL_TIM_PeriodElapsedCallback+0xd4>
 8000664:	4b33      	ldr	r3, [pc, #204]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d05d      	beq.n	8000728 <HAL_TIM_PeriodElapsedCallback+0xd4>
		if(is_afternoon){
 800066c:	4b32      	ldr	r3, [pc, #200]	@ (8000738 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d006      	beq.n	8000682 <HAL_TIM_PeriodElapsedCallback+0x2e>
			send(UART1, "Afternoon ");
 8000674:	4931      	ldr	r1, [pc, #196]	@ (800073c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000676:	2001      	movs	r0, #1
 8000678:	f000 f886 	bl	8000788 <send>
			rt_divider=12;
 800067c:	230c      	movs	r3, #12
 800067e:	73fb      	strb	r3, [r7, #15]
 8000680:	e005      	b.n	800068e <HAL_TIM_PeriodElapsedCallback+0x3a>
		}
		else{
			send(UART1, "Noon ");
 8000682:	492f      	ldr	r1, [pc, #188]	@ (8000740 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000684:	2001      	movs	r0, #1
 8000686:	f000 f87f 	bl	8000788 <send>
			rt_divider=13;
 800068a:	230d      	movs	r3, #13
 800068c:	73fb      	strb	r3, [r7, #15]
		}
		real_time_timer[0]++;
 800068e:	4b2d      	ldr	r3, [pc, #180]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	3301      	adds	r3, #1
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b2b      	ldr	r3, [pc, #172]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000698:	701a      	strb	r2, [r3, #0]
		if(real_time_timer[0]>=60){
 800069a:	4b2a      	ldr	r3, [pc, #168]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b3b      	cmp	r3, #59	@ 0x3b
 80006a0:	d908      	bls.n	80006b4 <HAL_TIM_PeriodElapsedCallback+0x60>
			real_time_timer[0] = 0;
 80006a2:	4b28      	ldr	r3, [pc, #160]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
			real_time_timer[1]++;
 80006a8:	4b26      	ldr	r3, [pc, #152]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80006aa:	785b      	ldrb	r3, [r3, #1]
 80006ac:	3301      	adds	r3, #1
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	4b24      	ldr	r3, [pc, #144]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80006b2:	705a      	strb	r2, [r3, #1]
		}
		if(real_time_timer[1]>=60){
 80006b4:	4b23      	ldr	r3, [pc, #140]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80006b6:	785b      	ldrb	r3, [r3, #1]
 80006b8:	2b3b      	cmp	r3, #59	@ 0x3b
 80006ba:	d908      	bls.n	80006ce <HAL_TIM_PeriodElapsedCallback+0x7a>
			real_time_timer[1] = 0;
 80006bc:	4b21      	ldr	r3, [pc, #132]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	705a      	strb	r2, [r3, #1]
			real_time_timer[2]++;
 80006c2:	4b20      	ldr	r3, [pc, #128]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80006c4:	789b      	ldrb	r3, [r3, #2]
 80006c6:	3301      	adds	r3, #1
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80006cc:	709a      	strb	r2, [r3, #2]
		}
		if(real_time_timer[2]>=rt_divider){
 80006ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80006d0:	789b      	ldrb	r3, [r3, #2]
 80006d2:	7bfa      	ldrb	r2, [r7, #15]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d819      	bhi.n	800070c <HAL_TIM_PeriodElapsedCallback+0xb8>
			real_time_timer[2]%=rt_divider;
 80006d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80006da:	789b      	ldrb	r3, [r3, #2]
 80006dc:	7bfa      	ldrb	r2, [r7, #15]
 80006de:	fbb3 f1f2 	udiv	r1, r3, r2
 80006e2:	fb01 f202 	mul.w	r2, r1, r2
 80006e6:	1a9b      	subs	r3, r3, r2
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80006ec:	709a      	strb	r2, [r3, #2]
			is_afternoon=!is_afternoon;
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	bf14      	ite	ne
 80006f6:	2301      	movne	r3, #1
 80006f8:	2300      	moveq	r3, #0
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	f083 0301 	eor.w	r3, r3, #1
 8000700:	b2db      	uxtb	r3, r3
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	b2da      	uxtb	r2, r3
 8000708:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800070a:	701a      	strb	r2, [r3, #0]
		}
		send(UART1, "%02d:%02d:%02d\n",
				real_time_timer[2],real_time_timer[1],real_time_timer[0]);
 800070c:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800070e:	789b      	ldrb	r3, [r3, #2]
		send(UART1, "%02d:%02d:%02d\n",
 8000710:	461a      	mov	r2, r3
				real_time_timer[2],real_time_timer[1],real_time_timer[0]);
 8000712:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000714:	785b      	ldrb	r3, [r3, #1]
		send(UART1, "%02d:%02d:%02d\n",
 8000716:	4619      	mov	r1, r3
				real_time_timer[2],real_time_timer[1],real_time_timer[0]);
 8000718:	4b0a      	ldr	r3, [pc, #40]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800071a:	781b      	ldrb	r3, [r3, #0]
		send(UART1, "%02d:%02d:%02d\n",
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	460b      	mov	r3, r1
 8000720:	4909      	ldr	r1, [pc, #36]	@ (8000748 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000722:	2001      	movs	r0, #1
 8000724:	f000 f830 	bl	8000788 <send>
	}
  UNUSED(htim);
}
 8000728:	bf00      	nop
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200001a0 	.word	0x200001a0
 8000734:	20000198 	.word	0x20000198
 8000738:	20000197 	.word	0x20000197
 800073c:	080098b4 	.word	0x080098b4
 8000740:	080098c0 	.word	0x080098c0
 8000744:	20000194 	.word	0x20000194
 8000748:	080098c8 	.word	0x080098c8

0800074c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a07      	ldr	r2, [pc, #28]	@ (8000778 <HAL_UART_RxCpltCallback+0x2c>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d107      	bne.n	800076e <HAL_UART_RxCpltCallback+0x22>
		uart_rx_flag = true;
 800075e:	4b07      	ldr	r3, [pc, #28]	@ (800077c <HAL_UART_RxCpltCallback+0x30>)
 8000760:	2201      	movs	r2, #1
 8000762:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart1,&uart_rx_buffer,1);
 8000764:	2201      	movs	r2, #1
 8000766:	4906      	ldr	r1, [pc, #24]	@ (8000780 <HAL_UART_RxCpltCallback+0x34>)
 8000768:	4806      	ldr	r0, [pc, #24]	@ (8000784 <HAL_UART_RxCpltCallback+0x38>)
 800076a:	f003 fe76 	bl	800445a <HAL_UART_Receive_DMA>
	}
  UNUSED(huart);
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40011000 	.word	0x40011000
 800077c:	20000191 	.word	0x20000191
 8000780:	20000190 	.word	0x20000190
 8000784:	200001e8 	.word	0x200001e8

08000788 <send>:


void send(send_type Send_Type,char *fmt,...){
 8000788:	b40e      	push	{r1, r2, r3}
 800078a:	b580      	push	{r7, lr}
 800078c:	b085      	sub	sp, #20
 800078e:	af00      	add	r7, sp, #0
 8000790:	4603      	mov	r3, r0
 8000792:	71fb      	strb	r3, [r7, #7]
	va_list arg;
	va_start(arg,fmt);
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	60fb      	str	r3, [r7, #12]
	vsnprintf((char *)tx_buffer,32,fmt,arg);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	69fa      	ldr	r2, [r7, #28]
 800079e:	2120      	movs	r1, #32
 80007a0:	480f      	ldr	r0, [pc, #60]	@ (80007e0 <send+0x58>)
 80007a2:	f008 fbed 	bl	8008f80 <vsniprintf>

	if(Send_Type==CDC){
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d104      	bne.n	80007b6 <send+0x2e>
		CDC_Transmit_FS(&tx_buffer[0], 32);
 80007ac:	2120      	movs	r1, #32
 80007ae:	480c      	ldr	r0, [pc, #48]	@ (80007e0 <send+0x58>)
 80007b0:	f007 ff68 	bl	8008684 <CDC_Transmit_FS>
 80007b4:	e008      	b.n	80007c8 <send+0x40>
	}
	else if(Send_Type==UART1){
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d105      	bne.n	80007c8 <send+0x40>
		HAL_UART_Transmit(&huart1, &tx_buffer[0], 32, 10);
 80007bc:	230a      	movs	r3, #10
 80007be:	2220      	movs	r2, #32
 80007c0:	4907      	ldr	r1, [pc, #28]	@ (80007e0 <send+0x58>)
 80007c2:	4808      	ldr	r0, [pc, #32]	@ (80007e4 <send+0x5c>)
 80007c4:	f003 fdbe 	bl	8004344 <HAL_UART_Transmit>
	}

	va_end(arg);
	memset(tx_buffer,0,32);
 80007c8:	2220      	movs	r2, #32
 80007ca:	2100      	movs	r1, #0
 80007cc:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <send+0x58>)
 80007ce:	f008 fbe5 	bl	8008f9c <memset>
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007dc:	b003      	add	sp, #12
 80007de:	4770      	bx	lr
 80007e0:	20000170 	.word	0x20000170
 80007e4:	200001e8 	.word	0x200001e8

080007e8 <unsigned_atoi>:

uint16_t unsigned_atoi(const uint8_t *number,size_t len){
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
  uint16_t val = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	81fb      	strh	r3, [r7, #14]
  for(size_t i=0;i<len;i++){
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	e020      	b.n	800083e <unsigned_atoi+0x56>
    if(number[i]<='9' && number[i]>='0'){
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	4413      	add	r3, r2
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b39      	cmp	r3, #57	@ 0x39
 8000806:	d818      	bhi.n	800083a <unsigned_atoi+0x52>
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	4413      	add	r3, r2
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b2f      	cmp	r3, #47	@ 0x2f
 8000812:	d912      	bls.n	800083a <unsigned_atoi+0x52>
      val = number[i]-'0'+val*10;
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	89fb      	ldrh	r3, [r7, #14]
 8000820:	4619      	mov	r1, r3
 8000822:	0089      	lsls	r1, r1, #2
 8000824:	440b      	add	r3, r1
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	b29b      	uxth	r3, r3
 800082a:	4413      	add	r3, r2
 800082c:	b29b      	uxth	r3, r3
 800082e:	3b30      	subs	r3, #48	@ 0x30
 8000830:	81fb      	strh	r3, [r7, #14]
  for(size_t i=0;i<len;i++){
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	3301      	adds	r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	e001      	b.n	800083e <unsigned_atoi+0x56>
    }
    else{
      return 'f';
 800083a:	2366      	movs	r3, #102	@ 0x66
 800083c:	e004      	b.n	8000848 <unsigned_atoi+0x60>
  for(size_t i=0;i<len;i++){
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	429a      	cmp	r2, r3
 8000844:	d3da      	bcc.n	80007fc <unsigned_atoi+0x14>
    }
  }
  return val;
 8000846:	89fb      	ldrh	r3, [r7, #14]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <init_timer>:

void init_timer(){
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
  uint8_t count = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	71fb      	strb	r3, [r7, #7]
  send(UART1,"\x1b[2J\n");
 800085e:	4951      	ldr	r1, [pc, #324]	@ (80009a4 <init_timer+0x150>)
 8000860:	2001      	movs	r0, #1
 8000862:	f7ff ff91 	bl	8000788 <send>
  send(CDC,"\x1b[2J\ninput currnet time : ");
 8000866:	4950      	ldr	r1, [pc, #320]	@ (80009a8 <init_timer+0x154>)
 8000868:	2000      	movs	r0, #0
 800086a:	f7ff ff8d 	bl	8000788 <send>
  input_current_time_flag = false;
 800086e:	4b4f      	ldr	r3, [pc, #316]	@ (80009ac <init_timer+0x158>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
	if(!input_current_time_flag){
 8000874:	4b4d      	ldr	r3, [pc, #308]	@ (80009ac <init_timer+0x158>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	f083 0301 	eor.w	r3, r3, #1
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	f000 808b 	beq.w	800099a <init_timer+0x146>
		cdc_rx_flag = false;
 8000884:	4b4a      	ldr	r3, [pc, #296]	@ (80009b0 <init_timer+0x15c>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
		while (1){
			if(cdc_rx_flag){
 800088a:	4b49      	ldr	r3, [pc, #292]	@ (80009b0 <init_timer+0x15c>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0fb      	beq.n	800088a <init_timer+0x36>
				switch (count){
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b04      	cmp	r3, #4
 8000896:	d861      	bhi.n	800095c <init_timer+0x108>
 8000898:	a201      	add	r2, pc, #4	@ (adr r2, 80008a0 <init_timer+0x4c>)
 800089a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800089e:	bf00      	nop
 80008a0:	080008b5 	.word	0x080008b5
 80008a4:	080008d5 	.word	0x080008d5
 80008a8:	080008f7 	.word	0x080008f7
 80008ac:	08000919 	.word	0x08000919
 80008b0:	0800093b 	.word	0x0800093b
				case 0:
					is_afternoon = unsigned_atoi(&cdc_rx_buffer[0],1);
 80008b4:	2101      	movs	r1, #1
 80008b6:	483f      	ldr	r0, [pc, #252]	@ (80009b4 <init_timer+0x160>)
 80008b8:	f7ff ff96 	bl	80007e8 <unsigned_atoi>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	bf14      	ite	ne
 80008c2:	2301      	movne	r3, #1
 80008c4:	2300      	moveq	r3, #0
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	4b3b      	ldr	r3, [pc, #236]	@ (80009b8 <init_timer+0x164>)
 80008ca:	701a      	strb	r2, [r3, #0]
					count++;
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	3301      	adds	r3, #1
 80008d0:	71fb      	strb	r3, [r7, #7]
					break;
 80008d2:	e043      	b.n	800095c <init_timer+0x108>
				case 1:
					real_time_timer[2]= unsigned_atoi(&cdc_rx_buffer[0],1)*10;
 80008d4:	2101      	movs	r1, #1
 80008d6:	4837      	ldr	r0, [pc, #220]	@ (80009b4 <init_timer+0x160>)
 80008d8:	f7ff ff86 	bl	80007e8 <unsigned_atoi>
 80008dc:	4603      	mov	r3, r0
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	461a      	mov	r2, r3
 80008e2:	0092      	lsls	r2, r2, #2
 80008e4:	4413      	add	r3, r2
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b34      	ldr	r3, [pc, #208]	@ (80009bc <init_timer+0x168>)
 80008ec:	709a      	strb	r2, [r3, #2]
					count++;
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	3301      	adds	r3, #1
 80008f2:	71fb      	strb	r3, [r7, #7]
					break;
 80008f4:	e032      	b.n	800095c <init_timer+0x108>
				case 2:
					real_time_timer[2]+= unsigned_atoi(&cdc_rx_buffer[0],1);
 80008f6:	2101      	movs	r1, #1
 80008f8:	482e      	ldr	r0, [pc, #184]	@ (80009b4 <init_timer+0x160>)
 80008fa:	f7ff ff75 	bl	80007e8 <unsigned_atoi>
 80008fe:	4603      	mov	r3, r0
 8000900:	4619      	mov	r1, r3
 8000902:	4b2e      	ldr	r3, [pc, #184]	@ (80009bc <init_timer+0x168>)
 8000904:	789a      	ldrb	r2, [r3, #2]
 8000906:	b2cb      	uxtb	r3, r1
 8000908:	4413      	add	r3, r2
 800090a:	b2da      	uxtb	r2, r3
 800090c:	4b2b      	ldr	r3, [pc, #172]	@ (80009bc <init_timer+0x168>)
 800090e:	709a      	strb	r2, [r3, #2]
					count++;
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	3301      	adds	r3, #1
 8000914:	71fb      	strb	r3, [r7, #7]
					break;
 8000916:	e021      	b.n	800095c <init_timer+0x108>
				case 3:
					real_time_timer[1]= unsigned_atoi(&cdc_rx_buffer[0],1)*10;
 8000918:	2101      	movs	r1, #1
 800091a:	4826      	ldr	r0, [pc, #152]	@ (80009b4 <init_timer+0x160>)
 800091c:	f7ff ff64 	bl	80007e8 <unsigned_atoi>
 8000920:	4603      	mov	r3, r0
 8000922:	b2db      	uxtb	r3, r3
 8000924:	461a      	mov	r2, r3
 8000926:	0092      	lsls	r2, r2, #2
 8000928:	4413      	add	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <init_timer+0x168>)
 8000930:	705a      	strb	r2, [r3, #1]
					count++;
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	3301      	adds	r3, #1
 8000936:	71fb      	strb	r3, [r7, #7]
					break;
 8000938:	e010      	b.n	800095c <init_timer+0x108>
				case 4:
					real_time_timer[1]+= unsigned_atoi(&cdc_rx_buffer[0],1);
 800093a:	2101      	movs	r1, #1
 800093c:	481d      	ldr	r0, [pc, #116]	@ (80009b4 <init_timer+0x160>)
 800093e:	f7ff ff53 	bl	80007e8 <unsigned_atoi>
 8000942:	4603      	mov	r3, r0
 8000944:	4619      	mov	r1, r3
 8000946:	4b1d      	ldr	r3, [pc, #116]	@ (80009bc <init_timer+0x168>)
 8000948:	785a      	ldrb	r2, [r3, #1]
 800094a:	b2cb      	uxtb	r3, r1
 800094c:	4413      	add	r3, r2
 800094e:	b2da      	uxtb	r2, r3
 8000950:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <init_timer+0x168>)
 8000952:	705a      	strb	r2, [r3, #1]
					count++;
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	3301      	adds	r3, #1
 8000958:	71fb      	strb	r3, [r7, #7]
					break;
 800095a:	bf00      	nop
				}
				send(CDC,"%c",cdc_rx_buffer[0]);
 800095c:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <init_timer+0x160>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4917      	ldr	r1, [pc, #92]	@ (80009c0 <init_timer+0x16c>)
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff ff0f 	bl	8000788 <send>
				cdc_rx_buffer[0] = 0;
 800096a:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <init_timer+0x160>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
				cdc_rx_flag = 0;
 8000970:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <init_timer+0x15c>)
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
				if(count == 5){
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b05      	cmp	r3, #5
 800097a:	d186      	bne.n	800088a <init_timer+0x36>
					send(CDC,"\n");
 800097c:	4911      	ldr	r1, [pc, #68]	@ (80009c4 <init_timer+0x170>)
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff ff02 	bl	8000788 <send>
					input_current_time_flag = true;
 8000984:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <init_timer+0x158>)
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
					real_time_timer[0] = 0;
 800098a:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <init_timer+0x168>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
					htim3.Instance->CNT = 0;
 8000990:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <init_timer+0x174>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2200      	movs	r2, #0
 8000996:	625a      	str	r2, [r3, #36]	@ 0x24
					break;
 8000998:	bf00      	nop
				}
			}
		}
	}
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	080098d8 	.word	0x080098d8
 80009a8:	080098e0 	.word	0x080098e0
 80009ac:	20000198 	.word	0x20000198
 80009b0:	2000016d 	.word	0x2000016d
 80009b4:	20000168 	.word	0x20000168
 80009b8:	20000197 	.word	0x20000197
 80009bc:	20000194 	.word	0x20000194
 80009c0:	080098fc 	.word	0x080098fc
 80009c4:	08009900 	.word	0x08009900
 80009c8:	200001a0 	.word	0x200001a0

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d2:	f000 fab5 	bl	8000f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d6:	f000 f841 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009da:	f7ff fde9 	bl	80005b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80009de:	f7ff fdc7 	bl	8000570 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80009e2:	f000 f9dd 	bl	8000da0 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80009e6:	f007 fd77 	bl	80084d8 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80009ea:	f000 f963 	bl	8000cb4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  UART_Start_Receive_DMA(&huart1, &uart_rx_buffer, 1);
 80009ee:	2201      	movs	r2, #1
 80009f0:	4913      	ldr	r1, [pc, #76]	@ (8000a40 <main+0x74>)
 80009f2:	4814      	ldr	r0, [pc, #80]	@ (8000a44 <main+0x78>)
 80009f4:	f003 fece 	bl	8004794 <UART_Start_Receive_DMA>
  uint32_t pretime=HAL_GetTick();
 80009f8:	f000 fb08 	bl	800100c <HAL_GetTick>
 80009fc:	6078      	str	r0, [r7, #4]
  HAL_TIM_Base_Start_IT(&htim3);
 80009fe:	4812      	ldr	r0, [pc, #72]	@ (8000a48 <main+0x7c>)
 8000a00:	f003 f866 	bl	8003ad0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	if(HAL_GetTick()-pretime>300){
 8000a04:	f000 fb02 	bl	800100c <HAL_GetTick>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000a12:	d907      	bls.n	8000a24 <main+0x58>
  		PC13_TOGGLE
 8000a14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a18:	480c      	ldr	r0, [pc, #48]	@ (8000a4c <main+0x80>)
 8000a1a:	f001 f946 	bl	8001caa <HAL_GPIO_TogglePin>
			pretime = HAL_GetTick();
 8000a1e:	f000 faf5 	bl	800100c <HAL_GetTick>
 8000a22:	6078      	str	r0, [r7, #4]
  	}
  	if(cdc_rx_flag){
 8000a24:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <main+0x84>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d0eb      	beq.n	8000a04 <main+0x38>
  		if(cdc_rx_buffer[0]=='i'){
 8000a2c:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <main+0x88>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b69      	cmp	r3, #105	@ 0x69
 8000a32:	d101      	bne.n	8000a38 <main+0x6c>
  			init_timer();
 8000a34:	f7ff ff0e 	bl	8000854 <init_timer>
  		}
  	  uart_rx_flag = false;
 8000a38:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <main+0x8c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
  	if(HAL_GetTick()-pretime>300){
 8000a3e:	e7e1      	b.n	8000a04 <main+0x38>
 8000a40:	20000190 	.word	0x20000190
 8000a44:	200001e8 	.word	0x200001e8
 8000a48:	200001a0 	.word	0x200001a0
 8000a4c:	40020800 	.word	0x40020800
 8000a50:	2000016d 	.word	0x2000016d
 8000a54:	20000168 	.word	0x20000168
 8000a58:	20000191 	.word	0x20000191

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b094      	sub	sp, #80	@ 0x50
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0320 	add.w	r3, r7, #32
 8000a66:	2230      	movs	r2, #48	@ 0x30
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f008 fa96 	bl	8008f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	4b27      	ldr	r3, [pc, #156]	@ (8000b24 <SystemClock_Config+0xc8>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a88:	4a26      	ldr	r2, [pc, #152]	@ (8000b24 <SystemClock_Config+0xc8>)
 8000a8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a90:	4b24      	ldr	r3, [pc, #144]	@ (8000b24 <SystemClock_Config+0xc8>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	4b21      	ldr	r3, [pc, #132]	@ (8000b28 <SystemClock_Config+0xcc>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a20      	ldr	r2, [pc, #128]	@ (8000b28 <SystemClock_Config+0xcc>)
 8000aa6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000aaa:	6013      	str	r3, [r2, #0]
 8000aac:	4b1e      	ldr	r3, [pc, #120]	@ (8000b28 <SystemClock_Config+0xcc>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000abc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000acc:	2319      	movs	r3, #25
 8000ace:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ad0:	23c0      	movs	r3, #192	@ 0xc0
 8000ad2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000adc:	f107 0320 	add.w	r3, r7, #32
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f002 fb4d 	bl	8003180 <HAL_RCC_OscConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000aec:	f000 f81e 	bl	8000b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af0:	230f      	movs	r3, #15
 8000af2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af4:	2302      	movs	r3, #2
 8000af6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000afc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	2103      	movs	r1, #3
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f002 fdaf 	bl	8003670 <HAL_RCC_ClockConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b18:	f000 f808 	bl	8000b2c <Error_Handler>
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	3750      	adds	r7, #80	@ 0x50
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40007000 	.word	0x40007000

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <Error_Handler+0x8>

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b10      	ldr	r3, [pc, #64]	@ (8000b84 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b46:	4a0f      	ldr	r2, [pc, #60]	@ (8000b84 <HAL_MspInit+0x4c>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b84 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b62:	4a08      	ldr	r2, [pc, #32]	@ (8000b84 <HAL_MspInit+0x4c>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6a:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <NMI_Handler+0x4>

08000b90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <MemManage_Handler+0x4>

08000ba0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <UsageFault_Handler+0x4>

08000bb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bde:	f000 fa01 	bl	8000fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bec:	4802      	ldr	r0, [pc, #8]	@ (8000bf8 <TIM3_IRQHandler+0x10>)
 8000bee:	f002 ffd1 	bl	8003b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200001a0 	.word	0x200001a0

08000bfc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000c00:	4802      	ldr	r0, [pc, #8]	@ (8000c0c <DMA2_Stream2_IRQHandler+0x10>)
 8000c02:	f000 fc4b 	bl	800149c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000230 	.word	0x20000230

08000c10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c14:	4802      	ldr	r0, [pc, #8]	@ (8000c20 <OTG_FS_IRQHandler+0x10>)
 8000c16:	f001 f9a6 	bl	8001f66 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000f74 	.word	0x20000f74

08000c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c2c:	4a14      	ldr	r2, [pc, #80]	@ (8000c80 <_sbrk+0x5c>)
 8000c2e:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <_sbrk+0x60>)
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c38:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c40:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <_sbrk+0x64>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	@ (8000c8c <_sbrk+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c46:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d207      	bcs.n	8000c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c54:	f008 f9aa 	bl	8008fac <__errno>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	e009      	b.n	8000c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c64:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6a:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <_sbrk+0x64>)
 8000c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c76:	68fb      	ldr	r3, [r7, #12]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20020000 	.word	0x20020000
 8000c84:	00000400 	.word	0x00000400
 8000c88:	2000019c 	.word	0x2000019c
 8000c8c:	200017c0 	.word	0x200017c0

08000c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	@ (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d48 <MX_TIM3_Init+0x94>)
 8000cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d4c <MX_TIM3_Init+0x98>)
 8000cd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9600-1;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <MX_TIM3_Init+0x94>)
 8000cd8:	f242 527f 	movw	r2, #9599	@ 0x257f
 8000cdc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <MX_TIM3_Init+0x94>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000ce4:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <MX_TIM3_Init+0x94>)
 8000ce6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000cea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cec:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <MX_TIM3_Init+0x94>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf2:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <MX_TIM3_Init+0x94>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cf8:	4813      	ldr	r0, [pc, #76]	@ (8000d48 <MX_TIM3_Init+0x94>)
 8000cfa:	f002 fe99 	bl	8003a30 <HAL_TIM_Base_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d04:	f7ff ff12 	bl	8000b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	4619      	mov	r1, r3
 8000d14:	480c      	ldr	r0, [pc, #48]	@ (8000d48 <MX_TIM3_Init+0x94>)
 8000d16:	f003 f82d 	bl	8003d74 <HAL_TIM_ConfigClockSource>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d20:	f7ff ff04 	bl	8000b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d24:	2300      	movs	r3, #0
 8000d26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <MX_TIM3_Init+0x94>)
 8000d32:	f003 fa35 	bl	80041a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d3c:	f7ff fef6 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200001a0 	.word	0x200001a0
 8000d4c:	40000400 	.word	0x40000400

08000d50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	@ (8000d98 <HAL_TIM_Base_MspInit+0x48>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d115      	bne.n	8000d8e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <HAL_TIM_Base_MspInit+0x4c>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d9c <HAL_TIM_Base_MspInit+0x4c>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d72:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <HAL_TIM_Base_MspInit+0x4c>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2100      	movs	r1, #0
 8000d82:	201d      	movs	r0, #29
 8000d84:	f000 fa4d 	bl	8001222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d88:	201d      	movs	r0, #29
 8000d8a:	f000 fa66 	bl	800125a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40000400 	.word	0x40000400
 8000d9c:	40023800 	.word	0x40023800

08000da0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <MX_USART1_UART_Init+0x4c>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	@ (8000df0 <MX_USART1_UART_Init+0x50>)
 8000da8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000db0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <MX_USART1_UART_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	@ (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dd8:	f003 fa64 	bl	80042a4 <HAL_UART_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000de2:	f7ff fea3 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200001e8 	.word	0x200001e8
 8000df0:	40011000 	.word	0x40011000

08000df4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	@ 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a31      	ldr	r2, [pc, #196]	@ (8000ed8 <HAL_UART_MspInit+0xe4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d15b      	bne.n	8000ece <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	4b30      	ldr	r3, [pc, #192]	@ (8000edc <HAL_UART_MspInit+0xe8>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1e:	4a2f      	ldr	r2, [pc, #188]	@ (8000edc <HAL_UART_MspInit+0xe8>)
 8000e20:	f043 0310 	orr.w	r3, r3, #16
 8000e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e26:	4b2d      	ldr	r3, [pc, #180]	@ (8000edc <HAL_UART_MspInit+0xe8>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2a:	f003 0310 	and.w	r3, r3, #16
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b29      	ldr	r3, [pc, #164]	@ (8000edc <HAL_UART_MspInit+0xe8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a28      	ldr	r2, [pc, #160]	@ (8000edc <HAL_UART_MspInit+0xe8>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b26      	ldr	r3, [pc, #152]	@ (8000edc <HAL_UART_MspInit+0xe8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e4e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e60:	2307      	movs	r3, #7
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	481d      	ldr	r0, [pc, #116]	@ (8000ee0 <HAL_UART_MspInit+0xec>)
 8000e6c:	f000 fd80 	bl	8001970 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000e70:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee4 <HAL_UART_MspInit+0xf0>)
 8000e72:	4a1d      	ldr	r2, [pc, #116]	@ (8000ee8 <HAL_UART_MspInit+0xf4>)
 8000e74:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000e76:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee4 <HAL_UART_MspInit+0xf0>)
 8000e78:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e7c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <HAL_UART_MspInit+0xf0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e84:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <HAL_UART_MspInit+0xf0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <HAL_UART_MspInit+0xf0>)
 8000e8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e90:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e92:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <HAL_UART_MspInit+0xf0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e98:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <HAL_UART_MspInit+0xf0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <HAL_UART_MspInit+0xf0>)
 8000ea0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ea4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <HAL_UART_MspInit+0xf0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <HAL_UART_MspInit+0xf0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000eb2:	480c      	ldr	r0, [pc, #48]	@ (8000ee4 <HAL_UART_MspInit+0xf0>)
 8000eb4:	f000 f9ec 	bl	8001290 <HAL_DMA_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000ebe:	f7ff fe35 	bl	8000b2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a07      	ldr	r2, [pc, #28]	@ (8000ee4 <HAL_UART_MspInit+0xf0>)
 8000ec6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ec8:	4a06      	ldr	r2, [pc, #24]	@ (8000ee4 <HAL_UART_MspInit+0xf0>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	@ 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40011000 	.word	0x40011000
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	20000230 	.word	0x20000230
 8000ee8:	40026440 	.word	0x40026440

08000eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ef0:	f7ff fece 	bl	8000c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef4:	480c      	ldr	r0, [pc, #48]	@ (8000f28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ef6:	490d      	ldr	r1, [pc, #52]	@ (8000f2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f1a:	f008 f84d 	bl	8008fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1e:	f7ff fd55 	bl	80009cc <main>
  bx  lr    
 8000f22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f2c:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000f30:	080099b0 	.word	0x080099b0
  ldr r2, =_sbss
 8000f34:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000f38:	200017c0 	.word	0x200017c0

08000f3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC_IRQHandler>
	...

08000f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f44:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0d      	ldr	r2, [pc, #52]	@ (8000f80 <HAL_Init+0x40>)
 8000f4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f50:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0a      	ldr	r2, [pc, #40]	@ (8000f80 <HAL_Init+0x40>)
 8000f56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f5c:	4b08      	ldr	r3, [pc, #32]	@ (8000f80 <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a07      	ldr	r2, [pc, #28]	@ (8000f80 <HAL_Init+0x40>)
 8000f62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f000 f94f 	bl	800120c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6e:	200f      	movs	r0, #15
 8000f70:	f000 f808 	bl	8000f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f74:	f7ff fde0 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023c00 	.word	0x40023c00

08000f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f8c:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <HAL_InitTick+0x54>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <HAL_InitTick+0x58>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f967 	bl	8001276 <HAL_SYSTICK_Config>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00e      	b.n	8000fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b0f      	cmp	r3, #15
 8000fb6:	d80a      	bhi.n	8000fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f000 f92f 	bl	8001222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc4:	4a06      	ldr	r2, [pc, #24]	@ (8000fe0 <HAL_InitTick+0x5c>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e000      	b.n	8000fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000004 	.word	0x20000004

08000fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <HAL_IncTick+0x20>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <HAL_IncTick+0x24>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a04      	ldr	r2, [pc, #16]	@ (8001008 <HAL_IncTick+0x24>)
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000008 	.word	0x20000008
 8001008:	20000290 	.word	0x20000290

0800100c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return uwTick;
 8001010:	4b03      	ldr	r3, [pc, #12]	@ (8001020 <HAL_GetTick+0x14>)
 8001012:	681b      	ldr	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000290 	.word	0x20000290

08001024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800102c:	f7ff ffee 	bl	800100c <HAL_GetTick>
 8001030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800103c:	d005      	beq.n	800104a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103e:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <HAL_Delay+0x44>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800104a:	bf00      	nop
 800104c:	f7ff ffde 	bl	800100c <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	429a      	cmp	r2, r3
 800105a:	d8f7      	bhi.n	800104c <HAL_Delay+0x28>
  {
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	@ (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db0b      	blt.n	80010fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	4907      	ldr	r1, [pc, #28]	@ (8001108 <__NVIC_EnableIRQ+0x38>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	095b      	lsrs	r3, r3, #5
 80010f0:	2001      	movs	r0, #1
 80010f2:	fa00 f202 	lsl.w	r2, r0, r2
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000e100 	.word	0xe000e100

0800110c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	db0a      	blt.n	8001136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	490c      	ldr	r1, [pc, #48]	@ (8001158 <__NVIC_SetPriority+0x4c>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	0112      	lsls	r2, r2, #4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	440b      	add	r3, r1
 8001130:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001134:	e00a      	b.n	800114c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4908      	ldr	r1, [pc, #32]	@ (800115c <__NVIC_SetPriority+0x50>)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	3b04      	subs	r3, #4
 8001144:	0112      	lsls	r2, r2, #4
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	440b      	add	r3, r1
 800114a:	761a      	strb	r2, [r3, #24]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	@ 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f1c3 0307 	rsb	r3, r3, #7
 800117a:	2b04      	cmp	r3, #4
 800117c:	bf28      	it	cs
 800117e:	2304      	movcs	r3, #4
 8001180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3304      	adds	r3, #4
 8001186:	2b06      	cmp	r3, #6
 8001188:	d902      	bls.n	8001190 <NVIC_EncodePriority+0x30>
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3b03      	subs	r3, #3
 800118e:	e000      	b.n	8001192 <NVIC_EncodePriority+0x32>
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	f04f 32ff 	mov.w	r2, #4294967295
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43da      	mvns	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	401a      	ands	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	43d9      	mvns	r1, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	4313      	orrs	r3, r2
         );
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3724      	adds	r7, #36	@ 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011d8:	d301      	bcc.n	80011de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011da:	2301      	movs	r3, #1
 80011dc:	e00f      	b.n	80011fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011de:	4a0a      	ldr	r2, [pc, #40]	@ (8001208 <SysTick_Config+0x40>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e6:	210f      	movs	r1, #15
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f7ff ff8e 	bl	800110c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f0:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <SysTick_Config+0x40>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f6:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <SysTick_Config+0x40>)
 80011f8:	2207      	movs	r2, #7
 80011fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	e000e010 	.word	0xe000e010

0800120c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ff29 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001234:	f7ff ff3e 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 8001238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	f7ff ff8e 	bl	8001160 <NVIC_EncodePriority>
 8001244:	4602      	mov	r2, r0
 8001246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff5d 	bl	800110c <__NVIC_SetPriority>
}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff31 	bl	80010d0 <__NVIC_EnableIRQ>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ffa2 	bl	80011c8 <SysTick_Config>
 8001284:	4603      	mov	r3, r0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff feb6 	bl	800100c <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e099      	b.n	80013e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2202      	movs	r2, #2
 80012b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0201 	bic.w	r2, r2, #1
 80012ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012cc:	e00f      	b.n	80012ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012ce:	f7ff fe9d 	bl	800100c <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b05      	cmp	r3, #5
 80012da:	d908      	bls.n	80012ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2220      	movs	r2, #32
 80012e0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2203      	movs	r2, #3
 80012e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e078      	b.n	80013e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1e8      	bne.n	80012ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	4b38      	ldr	r3, [pc, #224]	@ (80013e8 <HAL_DMA_Init+0x158>)
 8001308:	4013      	ands	r3, r2
 800130a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800131a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001326:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001332:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	4313      	orrs	r3, r2
 800133e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001344:	2b04      	cmp	r3, #4
 8001346:	d107      	bne.n	8001358 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001350:	4313      	orrs	r3, r2
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	4313      	orrs	r3, r2
 8001356:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f023 0307 	bic.w	r3, r3, #7
 800136e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	4313      	orrs	r3, r2
 8001378:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137e:	2b04      	cmp	r3, #4
 8001380:	d117      	bne.n	80013b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	4313      	orrs	r3, r2
 800138a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00e      	beq.n	80013b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 fa6f 	bl	8001878 <DMA_CheckFifoParam>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d008      	beq.n	80013b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2240      	movs	r2, #64	@ 0x40
 80013a4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80013ae:	2301      	movs	r3, #1
 80013b0:	e016      	b.n	80013e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 fa26 	bl	800180c <DMA_CalcBaseAndBitshift>
 80013c0:	4603      	mov	r3, r0
 80013c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013c8:	223f      	movs	r2, #63	@ 0x3f
 80013ca:	409a      	lsls	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	f010803f 	.word	0xf010803f

080013ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
 80013f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001402:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800140a:	2b01      	cmp	r3, #1
 800140c:	d101      	bne.n	8001412 <HAL_DMA_Start_IT+0x26>
 800140e:	2302      	movs	r3, #2
 8001410:	e040      	b.n	8001494 <HAL_DMA_Start_IT+0xa8>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2201      	movs	r2, #1
 8001416:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b01      	cmp	r3, #1
 8001424:	d12f      	bne.n	8001486 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2202      	movs	r2, #2
 800142a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2200      	movs	r2, #0
 8001432:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f000 f9b8 	bl	80017b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001444:	223f      	movs	r2, #63	@ 0x3f
 8001446:	409a      	lsls	r2, r3
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0216 	orr.w	r2, r2, #22
 800145a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001460:	2b00      	cmp	r3, #0
 8001462:	d007      	beq.n	8001474 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f042 0208 	orr.w	r2, r2, #8
 8001472:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0201 	orr.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	e005      	b.n	8001492 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800148e:	2302      	movs	r3, #2
 8001490:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001492:	7dfb      	ldrb	r3, [r7, #23]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014a8:	4b8e      	ldr	r3, [pc, #568]	@ (80016e4 <HAL_DMA_IRQHandler+0x248>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a8e      	ldr	r2, [pc, #568]	@ (80016e8 <HAL_DMA_IRQHandler+0x24c>)
 80014ae:	fba2 2303 	umull	r2, r3, r2, r3
 80014b2:	0a9b      	lsrs	r3, r3, #10
 80014b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014c6:	2208      	movs	r2, #8
 80014c8:	409a      	lsls	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d01a      	beq.n	8001508 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d013      	beq.n	8001508 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0204 	bic.w	r2, r2, #4
 80014ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014f4:	2208      	movs	r2, #8
 80014f6:	409a      	lsls	r2, r3
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001500:	f043 0201 	orr.w	r2, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800150c:	2201      	movs	r2, #1
 800150e:	409a      	lsls	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4013      	ands	r3, r2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d012      	beq.n	800153e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00b      	beq.n	800153e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800152a:	2201      	movs	r2, #1
 800152c:	409a      	lsls	r2, r3
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001536:	f043 0202 	orr.w	r2, r3, #2
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001542:	2204      	movs	r2, #4
 8001544:	409a      	lsls	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4013      	ands	r3, r2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d012      	beq.n	8001574 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00b      	beq.n	8001574 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001560:	2204      	movs	r2, #4
 8001562:	409a      	lsls	r2, r3
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800156c:	f043 0204 	orr.w	r2, r3, #4
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001578:	2210      	movs	r2, #16
 800157a:	409a      	lsls	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4013      	ands	r3, r2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d043      	beq.n	800160c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d03c      	beq.n	800160c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001596:	2210      	movs	r2, #16
 8001598:	409a      	lsls	r2, r3
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d018      	beq.n	80015de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d108      	bne.n	80015cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d024      	beq.n	800160c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	4798      	blx	r3
 80015ca:	e01f      	b.n	800160c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d01b      	beq.n	800160c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	4798      	blx	r3
 80015dc:	e016      	b.n	800160c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d107      	bne.n	80015fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0208 	bic.w	r2, r2, #8
 80015fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001610:	2220      	movs	r2, #32
 8001612:	409a      	lsls	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4013      	ands	r3, r2
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 808f 	beq.w	800173c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 8087 	beq.w	800173c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001632:	2220      	movs	r2, #32
 8001634:	409a      	lsls	r2, r3
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b05      	cmp	r3, #5
 8001644:	d136      	bne.n	80016b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0216 	bic.w	r2, r2, #22
 8001654:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	695a      	ldr	r2, [r3, #20]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001664:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	2b00      	cmp	r3, #0
 800166c:	d103      	bne.n	8001676 <HAL_DMA_IRQHandler+0x1da>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001672:	2b00      	cmp	r3, #0
 8001674:	d007      	beq.n	8001686 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0208 	bic.w	r2, r2, #8
 8001684:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800168a:	223f      	movs	r2, #63	@ 0x3f
 800168c:	409a      	lsls	r2, r3
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d07e      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	4798      	blx	r3
        }
        return;
 80016b2:	e079      	b.n	80017a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d01d      	beq.n	80016fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10d      	bne.n	80016ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d031      	beq.n	800173c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	4798      	blx	r3
 80016e0:	e02c      	b.n	800173c <HAL_DMA_IRQHandler+0x2a0>
 80016e2:	bf00      	nop
 80016e4:	20000000 	.word	0x20000000
 80016e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d023      	beq.n	800173c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	4798      	blx	r3
 80016fc:	e01e      	b.n	800173c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10f      	bne.n	800172c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0210 	bic.w	r2, r2, #16
 800171a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001740:	2b00      	cmp	r3, #0
 8001742:	d032      	beq.n	80017aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b00      	cmp	r3, #0
 800174e:	d022      	beq.n	8001796 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2205      	movs	r2, #5
 8001754:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0201 	bic.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	3301      	adds	r3, #1
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	429a      	cmp	r2, r3
 8001772:	d307      	bcc.n	8001784 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f2      	bne.n	8001768 <HAL_DMA_IRQHandler+0x2cc>
 8001782:	e000      	b.n	8001786 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001784:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179a:	2b00      	cmp	r3, #0
 800179c:	d005      	beq.n	80017aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	4798      	blx	r3
 80017a6:	e000      	b.n	80017aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80017a8:	bf00      	nop
    }
  }
}
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80017cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2b40      	cmp	r3, #64	@ 0x40
 80017dc:	d108      	bne.n	80017f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80017ee:	e007      	b.n	8001800 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	60da      	str	r2, [r3, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	3b10      	subs	r3, #16
 800181c:	4a14      	ldr	r2, [pc, #80]	@ (8001870 <DMA_CalcBaseAndBitshift+0x64>)
 800181e:	fba2 2303 	umull	r2, r3, r2, r3
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001826:	4a13      	ldr	r2, [pc, #76]	@ (8001874 <DMA_CalcBaseAndBitshift+0x68>)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b03      	cmp	r3, #3
 8001838:	d909      	bls.n	800184e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001842:	f023 0303 	bic.w	r3, r3, #3
 8001846:	1d1a      	adds	r2, r3, #4
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	659a      	str	r2, [r3, #88]	@ 0x58
 800184c:	e007      	b.n	800185e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001856:	f023 0303 	bic.w	r3, r3, #3
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	aaaaaaab 	.word	0xaaaaaaab
 8001874:	08009964 	.word	0x08009964

08001878 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001888:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d11f      	bne.n	80018d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2b03      	cmp	r3, #3
 8001896:	d856      	bhi.n	8001946 <DMA_CheckFifoParam+0xce>
 8001898:	a201      	add	r2, pc, #4	@ (adr r2, 80018a0 <DMA_CheckFifoParam+0x28>)
 800189a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189e:	bf00      	nop
 80018a0:	080018b1 	.word	0x080018b1
 80018a4:	080018c3 	.word	0x080018c3
 80018a8:	080018b1 	.word	0x080018b1
 80018ac:	08001947 	.word	0x08001947
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d046      	beq.n	800194a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018c0:	e043      	b.n	800194a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80018ca:	d140      	bne.n	800194e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018d0:	e03d      	b.n	800194e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018da:	d121      	bne.n	8001920 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d837      	bhi.n	8001952 <DMA_CheckFifoParam+0xda>
 80018e2:	a201      	add	r2, pc, #4	@ (adr r2, 80018e8 <DMA_CheckFifoParam+0x70>)
 80018e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e8:	080018f9 	.word	0x080018f9
 80018ec:	080018ff 	.word	0x080018ff
 80018f0:	080018f9 	.word	0x080018f9
 80018f4:	08001911 	.word	0x08001911
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
      break;
 80018fc:	e030      	b.n	8001960 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001902:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d025      	beq.n	8001956 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800190e:	e022      	b.n	8001956 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001914:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001918:	d11f      	bne.n	800195a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800191e:	e01c      	b.n	800195a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d903      	bls.n	800192e <DMA_CheckFifoParam+0xb6>
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	2b03      	cmp	r3, #3
 800192a:	d003      	beq.n	8001934 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800192c:	e018      	b.n	8001960 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	73fb      	strb	r3, [r7, #15]
      break;
 8001932:	e015      	b.n	8001960 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001938:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00e      	beq.n	800195e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
      break;
 8001944:	e00b      	b.n	800195e <DMA_CheckFifoParam+0xe6>
      break;
 8001946:	bf00      	nop
 8001948:	e00a      	b.n	8001960 <DMA_CheckFifoParam+0xe8>
      break;
 800194a:	bf00      	nop
 800194c:	e008      	b.n	8001960 <DMA_CheckFifoParam+0xe8>
      break;
 800194e:	bf00      	nop
 8001950:	e006      	b.n	8001960 <DMA_CheckFifoParam+0xe8>
      break;
 8001952:	bf00      	nop
 8001954:	e004      	b.n	8001960 <DMA_CheckFifoParam+0xe8>
      break;
 8001956:	bf00      	nop
 8001958:	e002      	b.n	8001960 <DMA_CheckFifoParam+0xe8>
      break;   
 800195a:	bf00      	nop
 800195c:	e000      	b.n	8001960 <DMA_CheckFifoParam+0xe8>
      break;
 800195e:	bf00      	nop
    }
  } 
  
  return status; 
 8001960:	7bfb      	ldrb	r3, [r7, #15]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop

08001970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001970:	b480      	push	{r7}
 8001972:	b089      	sub	sp, #36	@ 0x24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	e159      	b.n	8001c40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800198c:	2201      	movs	r2, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	f040 8148 	bne.w	8001c3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d005      	beq.n	80019c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d130      	bne.n	8001a24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f8:	2201      	movs	r2, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	f003 0201 	and.w	r2, r3, #1
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d017      	beq.n	8001a60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d123      	bne.n	8001ab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	08da      	lsrs	r2, r3, #3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3208      	adds	r2, #8
 8001a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	220f      	movs	r2, #15
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	691a      	ldr	r2, [r3, #16]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	08da      	lsrs	r2, r3, #3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3208      	adds	r2, #8
 8001aae:	69b9      	ldr	r1, [r7, #24]
 8001ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	2203      	movs	r2, #3
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0203 	and.w	r2, r3, #3
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80a2 	beq.w	8001c3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b57      	ldr	r3, [pc, #348]	@ (8001c58 <HAL_GPIO_Init+0x2e8>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afe:	4a56      	ldr	r2, [pc, #344]	@ (8001c58 <HAL_GPIO_Init+0x2e8>)
 8001b00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b06:	4b54      	ldr	r3, [pc, #336]	@ (8001c58 <HAL_GPIO_Init+0x2e8>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b12:	4a52      	ldr	r2, [pc, #328]	@ (8001c5c <HAL_GPIO_Init+0x2ec>)
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	089b      	lsrs	r3, r3, #2
 8001b18:	3302      	adds	r3, #2
 8001b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	220f      	movs	r2, #15
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a49      	ldr	r2, [pc, #292]	@ (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d019      	beq.n	8001b72 <HAL_GPIO_Init+0x202>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a48      	ldr	r2, [pc, #288]	@ (8001c64 <HAL_GPIO_Init+0x2f4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d013      	beq.n	8001b6e <HAL_GPIO_Init+0x1fe>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a47      	ldr	r2, [pc, #284]	@ (8001c68 <HAL_GPIO_Init+0x2f8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00d      	beq.n	8001b6a <HAL_GPIO_Init+0x1fa>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a46      	ldr	r2, [pc, #280]	@ (8001c6c <HAL_GPIO_Init+0x2fc>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d007      	beq.n	8001b66 <HAL_GPIO_Init+0x1f6>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a45      	ldr	r2, [pc, #276]	@ (8001c70 <HAL_GPIO_Init+0x300>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d101      	bne.n	8001b62 <HAL_GPIO_Init+0x1f2>
 8001b5e:	2304      	movs	r3, #4
 8001b60:	e008      	b.n	8001b74 <HAL_GPIO_Init+0x204>
 8001b62:	2307      	movs	r3, #7
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x204>
 8001b66:	2303      	movs	r3, #3
 8001b68:	e004      	b.n	8001b74 <HAL_GPIO_Init+0x204>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e002      	b.n	8001b74 <HAL_GPIO_Init+0x204>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <HAL_GPIO_Init+0x204>
 8001b72:	2300      	movs	r3, #0
 8001b74:	69fa      	ldr	r2, [r7, #28]
 8001b76:	f002 0203 	and.w	r2, r2, #3
 8001b7a:	0092      	lsls	r2, r2, #2
 8001b7c:	4093      	lsls	r3, r2
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b84:	4935      	ldr	r1, [pc, #212]	@ (8001c5c <HAL_GPIO_Init+0x2ec>)
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	089b      	lsrs	r3, r3, #2
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b92:	4b38      	ldr	r3, [pc, #224]	@ (8001c74 <HAL_GPIO_Init+0x304>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bb6:	4a2f      	ldr	r2, [pc, #188]	@ (8001c74 <HAL_GPIO_Init+0x304>)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c74 <HAL_GPIO_Init+0x304>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001be0:	4a24      	ldr	r2, [pc, #144]	@ (8001c74 <HAL_GPIO_Init+0x304>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001be6:	4b23      	ldr	r3, [pc, #140]	@ (8001c74 <HAL_GPIO_Init+0x304>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c0a:	4a1a      	ldr	r2, [pc, #104]	@ (8001c74 <HAL_GPIO_Init+0x304>)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c10:	4b18      	ldr	r3, [pc, #96]	@ (8001c74 <HAL_GPIO_Init+0x304>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c34:	4a0f      	ldr	r2, [pc, #60]	@ (8001c74 <HAL_GPIO_Init+0x304>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	61fb      	str	r3, [r7, #28]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	2b0f      	cmp	r3, #15
 8001c44:	f67f aea2 	bls.w	800198c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3724      	adds	r7, #36	@ 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40013800 	.word	0x40013800
 8001c60:	40020000 	.word	0x40020000
 8001c64:	40020400 	.word	0x40020400
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	40020c00 	.word	0x40020c00
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40013c00 	.word	0x40013c00

08001c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	807b      	strh	r3, [r7, #2]
 8001c84:	4613      	mov	r3, r2
 8001c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c88:	787b      	ldrb	r3, [r7, #1]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c8e:	887a      	ldrh	r2, [r7, #2]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c94:	e003      	b.n	8001c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c96:	887b      	ldrh	r3, [r7, #2]
 8001c98:	041a      	lsls	r2, r3, #16
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	619a      	str	r2, [r3, #24]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b085      	sub	sp, #20
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cbc:	887a      	ldrh	r2, [r7, #2]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	041a      	lsls	r2, r3, #16
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	43d9      	mvns	r1, r3
 8001cc8:	887b      	ldrh	r3, [r7, #2]
 8001cca:	400b      	ands	r3, r1
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	619a      	str	r2, [r3, #24]
}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af02      	add	r7, sp, #8
 8001ce4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e101      	b.n	8001ef4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d106      	bne.n	8001d10 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f006 fe02 	bl	8008914 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2203      	movs	r2, #3
 8001d14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d1e:	d102      	bne.n	8001d26 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f003 f9e3 	bl	80050f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7c1a      	ldrb	r2, [r3, #16]
 8001d38:	f88d 2000 	strb.w	r2, [sp]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d40:	f003 f8c2 	bl	8004ec8 <USB_CoreInit>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0ce      	b.n	8001ef4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f003 f9db 	bl	8005118 <USB_SetCurrentMode>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0bf      	b.n	8001ef4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	73fb      	strb	r3, [r7, #15]
 8001d78:	e04a      	b.n	8001e10 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d7a:	7bfa      	ldrb	r2, [r7, #15]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	3315      	adds	r3, #21
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	3314      	adds	r3, #20
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	b298      	uxth	r0, r3
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	332e      	adds	r3, #46	@ 0x2e
 8001db6:	4602      	mov	r2, r0
 8001db8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3318      	adds	r3, #24
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	331c      	adds	r3, #28
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	3320      	adds	r3, #32
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	3324      	adds	r3, #36	@ 0x24
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	791b      	ldrb	r3, [r3, #4]
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d3af      	bcc.n	8001d7a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]
 8001e1e:	e044      	b.n	8001eaa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4413      	add	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e36:	7bfa      	ldrb	r2, [r7, #15]
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001e48:	7bfa      	ldrb	r2, [r7, #15]
 8001e4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e4c:	7bfa      	ldrb	r2, [r7, #15]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e62:	7bfa      	ldrb	r2, [r7, #15]
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	73fb      	strb	r3, [r7, #15]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	791b      	ldrb	r3, [r3, #4]
 8001eae:	7bfa      	ldrb	r2, [r7, #15]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d3b5      	bcc.n	8001e20 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7c1a      	ldrb	r2, [r3, #16]
 8001ebc:	f88d 2000 	strb.w	r2, [sp]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ec4:	f003 f974 	bl	80051b0 <USB_DevInit>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d005      	beq.n	8001eda <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00c      	b.n	8001ef4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f004 f9b8 	bl	8006262 <USB_DevDisconnect>

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_PCD_Start+0x1c>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e022      	b.n	8001f5e <HAL_PCD_Start+0x62>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d009      	beq.n	8001f40 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d105      	bne.n	8001f40 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f38:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 f8c5 	bl	80050d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f004 f966 	bl	8006220 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f66:	b590      	push	{r4, r7, lr}
 8001f68:	b08d      	sub	sp, #52	@ 0x34
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f004 fa24 	bl	80063ca <USB_GetMode>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f040 848c 	bne.w	80028a2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f004 f988 	bl	80062a4 <USB_ReadInterrupts>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8482 	beq.w	80028a0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f004 f975 	bl	80062a4 <USB_ReadInterrupts>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d107      	bne.n	8001fd4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695a      	ldr	r2, [r3, #20]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f002 0202 	and.w	r2, r2, #2
 8001fd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f004 f963 	bl	80062a4 <USB_ReadInterrupts>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	2b10      	cmp	r3, #16
 8001fe6:	d161      	bne.n	80020ac <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0210 	bic.w	r2, r2, #16
 8001ff6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	f003 020f 	and.w	r2, r3, #15
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	4413      	add	r3, r2
 8002014:	3304      	adds	r3, #4
 8002016:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	0c5b      	lsrs	r3, r3, #17
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	2b02      	cmp	r3, #2
 8002022:	d124      	bne.n	800206e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d035      	beq.n	800209c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800203a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800203e:	b29b      	uxth	r3, r3
 8002040:	461a      	mov	r2, r3
 8002042:	6a38      	ldr	r0, [r7, #32]
 8002044:	f003 ff9a 	bl	8005f7c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	091b      	lsrs	r3, r3, #4
 8002050:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002054:	441a      	add	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	695a      	ldr	r2, [r3, #20]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002066:	441a      	add	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	615a      	str	r2, [r3, #20]
 800206c:	e016      	b.n	800209c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	0c5b      	lsrs	r3, r3, #17
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	2b06      	cmp	r3, #6
 8002078:	d110      	bne.n	800209c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002080:	2208      	movs	r2, #8
 8002082:	4619      	mov	r1, r3
 8002084:	6a38      	ldr	r0, [r7, #32]
 8002086:	f003 ff79 	bl	8005f7c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002096:	441a      	add	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699a      	ldr	r2, [r3, #24]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0210 	orr.w	r2, r2, #16
 80020aa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f004 f8f7 	bl	80062a4 <USB_ReadInterrupts>
 80020b6:	4603      	mov	r3, r0
 80020b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80020c0:	f040 80a7 	bne.w	8002212 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f004 f8fc 	bl	80062ca <USB_ReadDevAllOutEpInterrupt>
 80020d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80020d4:	e099      	b.n	800220a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80020d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 808e 	beq.w	80021fe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f004 f920 	bl	8006332 <USB_ReadDevOutEPInterrupt>
 80020f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00c      	beq.n	8002118 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	4413      	add	r3, r2
 8002106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800210a:	461a      	mov	r2, r3
 800210c:	2301      	movs	r3, #1
 800210e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002110:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fea2 	bl	8002e5c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00c      	beq.n	800213c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	4413      	add	r3, r2
 800212a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800212e:	461a      	mov	r2, r3
 8002130:	2308      	movs	r3, #8
 8002132:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002134:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 ff78 	bl	800302c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	2b00      	cmp	r3, #0
 8002144:	d008      	beq.n	8002158 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	4413      	add	r3, r2
 800214e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002152:	461a      	mov	r2, r3
 8002154:	2310      	movs	r3, #16
 8002156:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d030      	beq.n	80021c4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800216a:	2b80      	cmp	r3, #128	@ 0x80
 800216c:	d109      	bne.n	8002182 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	69fa      	ldr	r2, [r7, #28]
 8002178:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800217c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002180:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	4413      	add	r3, r2
 8002194:	3304      	adds	r3, #4
 8002196:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	78db      	ldrb	r3, [r3, #3]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d108      	bne.n	80021b2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2200      	movs	r2, #0
 80021a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	4619      	mov	r1, r3
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f006 fcad 	bl	8008b0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80021b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b4:	015a      	lsls	r2, r3, #5
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021be:	461a      	mov	r2, r3
 80021c0:	2302      	movs	r3, #2
 80021c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d008      	beq.n	80021e0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021da:	461a      	mov	r2, r3
 80021dc:	2320      	movs	r3, #32
 80021de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d009      	beq.n	80021fe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021f6:	461a      	mov	r2, r3
 80021f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021fc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	3301      	adds	r3, #1
 8002202:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002206:	085b      	lsrs	r3, r3, #1
 8002208:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800220a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220c:	2b00      	cmp	r3, #0
 800220e:	f47f af62 	bne.w	80020d6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f004 f844 	bl	80062a4 <USB_ReadInterrupts>
 800221c:	4603      	mov	r3, r0
 800221e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002222:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002226:	f040 80db 	bne.w	80023e0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f004 f865 	bl	80062fe <USB_ReadDevAllInEpInterrupt>
 8002234:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800223a:	e0cd      	b.n	80023d8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800223c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 80c2 	beq.w	80023cc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	4611      	mov	r1, r2
 8002252:	4618      	mov	r0, r3
 8002254:	f004 f88b 	bl	800636e <USB_ReadDevInEPInterrupt>
 8002258:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d057      	beq.n	8002314 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	2201      	movs	r2, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002278:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	43db      	mvns	r3, r3
 800227e:	69f9      	ldr	r1, [r7, #28]
 8002280:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002284:	4013      	ands	r3, r2
 8002286:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	4413      	add	r3, r2
 8002290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002294:	461a      	mov	r2, r3
 8002296:	2301      	movs	r3, #1
 8002298:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	799b      	ldrb	r3, [r3, #6]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d132      	bne.n	8002308 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	3320      	adds	r3, #32
 80022b2:	6819      	ldr	r1, [r3, #0]
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4403      	add	r3, r0
 80022c2:	331c      	adds	r3, #28
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4419      	add	r1, r3
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022cc:	4613      	mov	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4403      	add	r3, r0
 80022d6:	3320      	adds	r3, #32
 80022d8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d113      	bne.n	8002308 <HAL_PCD_IRQHandler+0x3a2>
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	3324      	adds	r3, #36	@ 0x24
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d108      	bne.n	8002308 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002300:	461a      	mov	r2, r3
 8002302:	2101      	movs	r1, #1
 8002304:	f004 f892 	bl	800642c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	b2db      	uxtb	r3, r3
 800230c:	4619      	mov	r1, r3
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f006 fb81 	bl	8008a16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d008      	beq.n	8002330 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	4413      	add	r3, r2
 8002326:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800232a:	461a      	mov	r2, r3
 800232c:	2308      	movs	r3, #8
 800232e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b00      	cmp	r3, #0
 8002338:	d008      	beq.n	800234c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	4413      	add	r3, r2
 8002342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002346:	461a      	mov	r2, r3
 8002348:	2310      	movs	r3, #16
 800234a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002352:	2b00      	cmp	r3, #0
 8002354:	d008      	beq.n	8002368 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	4413      	add	r3, r2
 800235e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002362:	461a      	mov	r2, r3
 8002364:	2340      	movs	r3, #64	@ 0x40
 8002366:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d023      	beq.n	80023ba <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002372:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002374:	6a38      	ldr	r0, [r7, #32]
 8002376:	f003 f87f 	bl	8005478 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800237a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	3310      	adds	r3, #16
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	3304      	adds	r3, #4
 800238c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	78db      	ldrb	r3, [r3, #3]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d108      	bne.n	80023a8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2200      	movs	r2, #0
 800239a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800239c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	4619      	mov	r1, r3
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f006 fbc4 	bl	8008b30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80023a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023b4:	461a      	mov	r2, r3
 80023b6:	2302      	movs	r3, #2
 80023b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 fcbb 	bl	8002d42 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ce:	3301      	adds	r3, #1
 80023d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80023d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d4:	085b      	lsrs	r3, r3, #1
 80023d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80023d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f47f af2e 	bne.w	800223c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f003 ff5d 	bl	80062a4 <USB_ReadInterrupts>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80023f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80023f4:	d122      	bne.n	800243c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	69fa      	ldr	r2, [r7, #28]
 8002400:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002410:	2b01      	cmp	r3, #1
 8002412:	d108      	bne.n	8002426 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800241c:	2100      	movs	r1, #0
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 fea2 	bl	8003168 <HAL_PCDEx_LPM_Callback>
 8002424:	e002      	b.n	800242c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f006 fb62 	bl	8008af0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800243a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f003 ff2f 	bl	80062a4 <USB_ReadInterrupts>
 8002446:	4603      	mov	r3, r0
 8002448:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800244c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002450:	d112      	bne.n	8002478 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b01      	cmp	r3, #1
 8002460:	d102      	bne.n	8002468 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f006 fb1e 	bl	8008aa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002476:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f003 ff11 	bl	80062a4 <USB_ReadInterrupts>
 8002482:	4603      	mov	r3, r0
 8002484:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002488:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800248c:	f040 80b7 	bne.w	80025fe <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	69fa      	ldr	r2, [r7, #28]
 800249a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800249e:	f023 0301 	bic.w	r3, r3, #1
 80024a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2110      	movs	r1, #16
 80024aa:	4618      	mov	r0, r3
 80024ac:	f002 ffe4 	bl	8005478 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024b0:	2300      	movs	r3, #0
 80024b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024b4:	e046      	b.n	8002544 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024c2:	461a      	mov	r2, r3
 80024c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80024c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024da:	0151      	lsls	r1, r2, #5
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	440a      	add	r2, r1
 80024e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80024e4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80024e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024f6:	461a      	mov	r2, r3
 80024f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80024fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	4413      	add	r3, r2
 8002506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800250e:	0151      	lsls	r1, r2, #5
 8002510:	69fa      	ldr	r2, [r7, #28]
 8002512:	440a      	add	r2, r1
 8002514:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002518:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800251c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800251e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002520:	015a      	lsls	r2, r3, #5
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	4413      	add	r3, r2
 8002526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800252e:	0151      	lsls	r1, r2, #5
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	440a      	add	r2, r1
 8002534:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002538:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800253c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800253e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002540:	3301      	adds	r3, #1
 8002542:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	791b      	ldrb	r3, [r3, #4]
 8002548:	461a      	mov	r2, r3
 800254a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800254c:	4293      	cmp	r3, r2
 800254e:	d3b2      	bcc.n	80024b6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	69fa      	ldr	r2, [r7, #28]
 800255a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800255e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002562:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	7bdb      	ldrb	r3, [r3, #15]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d016      	beq.n	800259a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002572:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800257c:	f043 030b 	orr.w	r3, r3, #11
 8002580:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800258a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258c:	69fa      	ldr	r2, [r7, #28]
 800258e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002592:	f043 030b 	orr.w	r3, r3, #11
 8002596:	6453      	str	r3, [r2, #68]	@ 0x44
 8002598:	e015      	b.n	80025c6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	69fa      	ldr	r2, [r7, #28]
 80025a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025ac:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80025b0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025c0:	f043 030b 	orr.w	r3, r3, #11
 80025c4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025d4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80025d8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025e8:	461a      	mov	r2, r3
 80025ea:	f003 ff1f 	bl	800642c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695a      	ldr	r2, [r3, #20]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80025fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f003 fe4e 	bl	80062a4 <USB_ReadInterrupts>
 8002608:	4603      	mov	r3, r0
 800260a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800260e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002612:	d123      	bne.n	800265c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f003 fee4 	bl	80063e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f002 ffa1 	bl	800556a <USB_GetDevSpeed>
 8002628:	4603      	mov	r3, r0
 800262a:	461a      	mov	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681c      	ldr	r4, [r3, #0]
 8002634:	f001 f9c8 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 8002638:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800263e:	461a      	mov	r2, r3
 8002640:	4620      	mov	r0, r4
 8002642:	f002 fca5 	bl	8004f90 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f006 fa0d 	bl	8008a66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695a      	ldr	r2, [r3, #20]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800265a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f003 fe1f 	bl	80062a4 <USB_ReadInterrupts>
 8002666:	4603      	mov	r3, r0
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b08      	cmp	r3, #8
 800266e:	d10a      	bne.n	8002686 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f006 f9ea 	bl	8008a4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695a      	ldr	r2, [r3, #20]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f002 0208 	and.w	r2, r2, #8
 8002684:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f003 fe0a 	bl	80062a4 <USB_ReadInterrupts>
 8002690:	4603      	mov	r3, r0
 8002692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002696:	2b80      	cmp	r3, #128	@ 0x80
 8002698:	d123      	bne.n	80026e2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026a6:	2301      	movs	r3, #1
 80026a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80026aa:	e014      	b.n	80026d6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d105      	bne.n	80026d0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80026c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	4619      	mov	r1, r3
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 fb08 	bl	8002ce0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	3301      	adds	r3, #1
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	791b      	ldrb	r3, [r3, #4]
 80026da:	461a      	mov	r2, r3
 80026dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026de:	4293      	cmp	r3, r2
 80026e0:	d3e4      	bcc.n	80026ac <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f003 fddc 	bl	80062a4 <USB_ReadInterrupts>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026f6:	d13c      	bne.n	8002772 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026f8:	2301      	movs	r3, #1
 80026fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80026fc:	e02b      	b.n	8002756 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	4413      	add	r3, r2
 8002706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002712:	4613      	mov	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	3318      	adds	r3, #24
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d115      	bne.n	8002750 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002724:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002726:	2b00      	cmp	r3, #0
 8002728:	da12      	bge.n	8002750 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	3317      	adds	r3, #23
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	b2db      	uxtb	r3, r3
 8002742:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002746:	b2db      	uxtb	r3, r3
 8002748:	4619      	mov	r1, r3
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fac8 	bl	8002ce0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	3301      	adds	r3, #1
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	791b      	ldrb	r3, [r3, #4]
 800275a:	461a      	mov	r2, r3
 800275c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275e:	4293      	cmp	r3, r2
 8002760:	d3cd      	bcc.n	80026fe <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002770:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f003 fd94 	bl	80062a4 <USB_ReadInterrupts>
 800277c:	4603      	mov	r3, r0
 800277e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002782:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002786:	d156      	bne.n	8002836 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002788:	2301      	movs	r3, #1
 800278a:	627b      	str	r3, [r7, #36]	@ 0x24
 800278c:	e045      	b.n	800281a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	4413      	add	r3, r2
 8002796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d12e      	bne.n	8002814 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027b6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	da2b      	bge.n	8002814 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80027c8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d121      	bne.n	8002814 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027d4:	4613      	mov	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10a      	bne.n	8002814 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800280c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002810:	6053      	str	r3, [r2, #4]
            break;
 8002812:	e008      	b.n	8002826 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002816:	3301      	adds	r3, #1
 8002818:	627b      	str	r3, [r7, #36]	@ 0x24
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	791b      	ldrb	r3, [r3, #4]
 800281e:	461a      	mov	r2, r3
 8002820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002822:	4293      	cmp	r3, r2
 8002824:	d3b3      	bcc.n	800278e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002834:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f003 fd32 	bl	80062a4 <USB_ReadInterrupts>
 8002840:	4603      	mov	r3, r0
 8002842:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800284a:	d10a      	bne.n	8002862 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f006 f981 	bl	8008b54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695a      	ldr	r2, [r3, #20]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002860:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f003 fd1c 	bl	80062a4 <USB_ReadInterrupts>
 800286c:	4603      	mov	r3, r0
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b04      	cmp	r3, #4
 8002874:	d115      	bne.n	80028a2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f006 f971 	bl	8008b70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	430a      	orrs	r2, r1
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	e000      	b.n	80028a2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80028a0:	bf00      	nop
    }
  }
}
 80028a2:	3734      	adds	r7, #52	@ 0x34
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd90      	pop	{r4, r7, pc}

080028a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <HAL_PCD_SetAddress+0x1a>
 80028be:	2302      	movs	r3, #2
 80028c0:	e012      	b.n	80028e8 <HAL_PCD_SetAddress+0x40>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	78fa      	ldrb	r2, [r7, #3]
 80028ce:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	4611      	mov	r1, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f003 fc7b 	bl	80061d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	4608      	mov	r0, r1
 80028fa:	4611      	mov	r1, r2
 80028fc:	461a      	mov	r2, r3
 80028fe:	4603      	mov	r3, r0
 8002900:	70fb      	strb	r3, [r7, #3]
 8002902:	460b      	mov	r3, r1
 8002904:	803b      	strh	r3, [r7, #0]
 8002906:	4613      	mov	r3, r2
 8002908:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800290e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002912:	2b00      	cmp	r3, #0
 8002914:	da0f      	bge.n	8002936 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	f003 020f 	and.w	r2, r3, #15
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	3310      	adds	r3, #16
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	4413      	add	r3, r2
 800292a:	3304      	adds	r3, #4
 800292c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	705a      	strb	r2, [r3, #1]
 8002934:	e00f      	b.n	8002956 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002936:	78fb      	ldrb	r3, [r7, #3]
 8002938:	f003 020f 	and.w	r2, r3, #15
 800293c:	4613      	mov	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4413      	add	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	4413      	add	r3, r2
 800294c:	3304      	adds	r3, #4
 800294e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002956:	78fb      	ldrb	r3, [r7, #3]
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	b2da      	uxtb	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002962:	883a      	ldrh	r2, [r7, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	78ba      	ldrb	r2, [r7, #2]
 800296c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	785b      	ldrb	r3, [r3, #1]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d004      	beq.n	8002980 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002980:	78bb      	ldrb	r3, [r7, #2]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d102      	bne.n	800298c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_PCD_EP_Open+0xaa>
 8002996:	2302      	movs	r3, #2
 8002998:	e00e      	b.n	80029b8 <HAL_PCD_EP_Open+0xc8>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68f9      	ldr	r1, [r7, #12]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f002 fe03 	bl	80055b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80029b6:	7afb      	ldrb	r3, [r7, #11]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	da0f      	bge.n	80029f4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	f003 020f 	and.w	r2, r3, #15
 80029da:	4613      	mov	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	3310      	adds	r3, #16
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	4413      	add	r3, r2
 80029e8:	3304      	adds	r3, #4
 80029ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2201      	movs	r2, #1
 80029f0:	705a      	strb	r2, [r3, #1]
 80029f2:	e00f      	b.n	8002a14 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	f003 020f 	and.w	r2, r3, #15
 80029fa:	4613      	mov	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_PCD_EP_Close+0x6e>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e00e      	b.n	8002a4c <HAL_PCD_EP_Close+0x8c>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68f9      	ldr	r1, [r7, #12]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f002 fe41 	bl	80056c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	460b      	mov	r3, r1
 8002a62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a64:	7afb      	ldrb	r3, [r7, #11]
 8002a66:	f003 020f 	and.w	r2, r3, #15
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4413      	add	r3, r2
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2200      	movs	r2, #0
 8002a94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a96:	7afb      	ldrb	r3, [r7, #11]
 8002a98:	f003 030f 	and.w	r3, r3, #15
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	799b      	ldrb	r3, [r3, #6]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d102      	bne.n	8002ab0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	799b      	ldrb	r3, [r3, #6]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	6979      	ldr	r1, [r7, #20]
 8002abc:	f002 fede 	bl	800587c <USB_EPStartXfer>

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ad6:	78fb      	ldrb	r3, [r7, #3]
 8002ad8:	f003 020f 	and.w	r2, r3, #15
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002aec:	681b      	ldr	r3, [r3, #0]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b086      	sub	sp, #24
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	603b      	str	r3, [r7, #0]
 8002b06:	460b      	mov	r3, r1
 8002b08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b0a:	7afb      	ldrb	r3, [r7, #11]
 8002b0c:	f003 020f 	and.w	r2, r3, #15
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	3310      	adds	r3, #16
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3304      	adds	r3, #4
 8002b20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2200      	movs	r2, #0
 8002b32:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2201      	movs	r2, #1
 8002b38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b3a:	7afb      	ldrb	r3, [r7, #11]
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	799b      	ldrb	r3, [r3, #6]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d102      	bne.n	8002b54 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	799b      	ldrb	r3, [r3, #6]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	6979      	ldr	r1, [r7, #20]
 8002b60:	f002 fe8c 	bl	800587c <USB_EPStartXfer>

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b084      	sub	sp, #16
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	460b      	mov	r3, r1
 8002b78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b7a:	78fb      	ldrb	r3, [r7, #3]
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	7912      	ldrb	r2, [r2, #4]
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d901      	bls.n	8002b8c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e04f      	b.n	8002c2c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	da0f      	bge.n	8002bb4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b94:	78fb      	ldrb	r3, [r7, #3]
 8002b96:	f003 020f 	and.w	r2, r3, #15
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	3310      	adds	r3, #16
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3304      	adds	r3, #4
 8002baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	705a      	strb	r2, [r3, #1]
 8002bb2:	e00d      	b.n	8002bd0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bb4:	78fa      	ldrb	r2, [r7, #3]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_PCD_EP_SetStall+0x82>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e01d      	b.n	8002c2c <HAL_PCD_EP_SetStall+0xbe>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68f9      	ldr	r1, [r7, #12]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f003 fa14 	bl	800602c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	7999      	ldrb	r1, [r3, #6]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	f003 fc05 	bl	800642c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c40:	78fb      	ldrb	r3, [r7, #3]
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	7912      	ldrb	r2, [r2, #4]
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e042      	b.n	8002cd8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	da0f      	bge.n	8002c7a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c5a:	78fb      	ldrb	r3, [r7, #3]
 8002c5c:	f003 020f 	and.w	r2, r3, #15
 8002c60:	4613      	mov	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	3310      	adds	r3, #16
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3304      	adds	r3, #4
 8002c70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	705a      	strb	r2, [r3, #1]
 8002c78:	e00f      	b.n	8002c9a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	f003 020f 	and.w	r2, r3, #15
 8002c80:	4613      	mov	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	4413      	add	r3, r2
 8002c90:	3304      	adds	r3, #4
 8002c92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ca0:	78fb      	ldrb	r3, [r7, #3]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_PCD_EP_ClrStall+0x86>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e00e      	b.n	8002cd8 <HAL_PCD_EP_ClrStall+0xa4>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68f9      	ldr	r1, [r7, #12]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f003 fa1d 	bl	8006108 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002cec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	da0c      	bge.n	8002d0e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	f003 020f 	and.w	r2, r3, #15
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	3310      	adds	r3, #16
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	4413      	add	r3, r2
 8002d08:	3304      	adds	r3, #4
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	e00c      	b.n	8002d28 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	f003 020f 	and.w	r2, r3, #15
 8002d14:	4613      	mov	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	4413      	add	r3, r2
 8002d24:	3304      	adds	r3, #4
 8002d26:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68f9      	ldr	r1, [r7, #12]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f003 f83c 	bl	8005dac <USB_EPStopXfer>
 8002d34:	4603      	mov	r3, r0
 8002d36:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d38:	7afb      	ldrb	r3, [r7, #11]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b08a      	sub	sp, #40	@ 0x28
 8002d46:	af02      	add	r7, sp, #8
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	3310      	adds	r3, #16
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	3304      	adds	r3, #4
 8002d68:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d901      	bls.n	8002d7a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e06b      	b.n	8002e52 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d902      	bls.n	8002d96 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	3303      	adds	r3, #3
 8002d9a:	089b      	lsrs	r3, r3, #2
 8002d9c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d9e:	e02a      	b.n	8002df6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d902      	bls.n	8002dbc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	3303      	adds	r3, #3
 8002dc0:	089b      	lsrs	r3, r3, #2
 8002dc2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	68d9      	ldr	r1, [r3, #12]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	6978      	ldr	r0, [r7, #20]
 8002dda:	f003 f891 	bl	8005f00 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	441a      	add	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	441a      	add	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d809      	bhi.n	8002e20 <PCD_WriteEmptyTxFifo+0xde>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d203      	bcs.n	8002e20 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1bf      	bne.n	8002da0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d811      	bhi.n	8002e50 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	2201      	movs	r2, #1
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	43db      	mvns	r3, r3
 8002e46:	6939      	ldr	r1, [r7, #16]
 8002e48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3720      	adds	r7, #32
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	333c      	adds	r3, #60	@ 0x3c
 8002e74:	3304      	adds	r3, #4
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	799b      	ldrb	r3, [r3, #6]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d17b      	bne.n	8002f8a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d015      	beq.n	8002ec8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	4a61      	ldr	r2, [pc, #388]	@ (8003024 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	f240 80b9 	bls.w	8003018 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80b3 	beq.w	8003018 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ec4:	6093      	str	r3, [r2, #8]
 8002ec6:	e0a7      	b.n	8003018 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f003 0320 	and.w	r3, r3, #32
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ede:	461a      	mov	r2, r3
 8002ee0:	2320      	movs	r3, #32
 8002ee2:	6093      	str	r3, [r2, #8]
 8002ee4:	e098      	b.n	8003018 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 8093 	bne.w	8003018 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	4a4b      	ldr	r2, [pc, #300]	@ (8003024 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d90f      	bls.n	8002f1a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f10:	461a      	mov	r2, r3
 8002f12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f16:	6093      	str	r3, [r2, #8]
 8002f18:	e07e      	b.n	8003018 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a1a      	ldr	r2, [r3, #32]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	0159      	lsls	r1, r3, #5
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	440b      	add	r3, r1
 8002f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f46:	1ad2      	subs	r2, r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d114      	bne.n	8002f7c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f64:	461a      	mov	r2, r3
 8002f66:	2101      	movs	r1, #1
 8002f68:	f003 fa60 	bl	800642c <USB_EP0_OutStart>
 8002f6c:	e006      	b.n	8002f7c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	441a      	add	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	4619      	mov	r1, r3
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f005 fd2c 	bl	80089e0 <HAL_PCD_DataOutStageCallback>
 8002f88:	e046      	b.n	8003018 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	4a26      	ldr	r2, [pc, #152]	@ (8003028 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d124      	bne.n	8002fdc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00a      	beq.n	8002fb2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fa8:	461a      	mov	r2, r3
 8002faa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fae:	6093      	str	r3, [r2, #8]
 8002fb0:	e032      	b.n	8003018 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fc8:	461a      	mov	r2, r3
 8002fca:	2320      	movs	r3, #32
 8002fcc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f005 fd03 	bl	80089e0 <HAL_PCD_DataOutStageCallback>
 8002fda:	e01d      	b.n	8003018 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d114      	bne.n	800300c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d108      	bne.n	800300c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003004:	461a      	mov	r2, r3
 8003006:	2100      	movs	r1, #0
 8003008:	f003 fa10 	bl	800642c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	b2db      	uxtb	r3, r3
 8003010:	4619      	mov	r1, r3
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f005 fce4 	bl	80089e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3720      	adds	r7, #32
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	4f54300a 	.word	0x4f54300a
 8003028:	4f54310a 	.word	0x4f54310a

0800302c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	333c      	adds	r3, #60	@ 0x3c
 8003044:	3304      	adds	r3, #4
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	4413      	add	r3, r2
 8003052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4a15      	ldr	r2, [pc, #84]	@ (80030b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d90e      	bls.n	8003080 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003068:	2b00      	cmp	r3, #0
 800306a:	d009      	beq.n	8003080 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4413      	add	r3, r2
 8003074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003078:	461a      	mov	r2, r3
 800307a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800307e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f005 fc9b 	bl	80089bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4a0a      	ldr	r2, [pc, #40]	@ (80030b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d90c      	bls.n	80030a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	799b      	ldrb	r3, [r3, #6]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d108      	bne.n	80030a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030a0:	461a      	mov	r2, r3
 80030a2:	2101      	movs	r1, #1
 80030a4:	f003 f9c2 	bl	800642c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	4f54300a 	.word	0x4f54300a

080030b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	70fb      	strb	r3, [r7, #3]
 80030c4:	4613      	mov	r3, r2
 80030c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d107      	bne.n	80030e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80030d6:	883b      	ldrh	r3, [r7, #0]
 80030d8:	0419      	lsls	r1, r3, #16
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80030e4:	e028      	b.n	8003138 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ec:	0c1b      	lsrs	r3, r3, #16
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	4413      	add	r3, r2
 80030f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030f4:	2300      	movs	r3, #0
 80030f6:	73fb      	strb	r3, [r7, #15]
 80030f8:	e00d      	b.n	8003116 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	3340      	adds	r3, #64	@ 0x40
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	0c1b      	lsrs	r3, r3, #16
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	4413      	add	r3, r2
 800310e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	3301      	adds	r3, #1
 8003114:	73fb      	strb	r3, [r7, #15]
 8003116:	7bfa      	ldrb	r2, [r7, #15]
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	3b01      	subs	r3, #1
 800311c:	429a      	cmp	r2, r3
 800311e:	d3ec      	bcc.n	80030fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003120:	883b      	ldrh	r3, [r7, #0]
 8003122:	0418      	lsls	r0, r3, #16
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6819      	ldr	r1, [r3, #0]
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	3b01      	subs	r3, #1
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	4302      	orrs	r2, r0
 8003130:	3340      	adds	r3, #64	@ 0x40
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	460b      	mov	r3, r1
 8003150:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	887a      	ldrh	r2, [r7, #2]
 8003158:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e267      	b.n	8003662 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d075      	beq.n	800328a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800319e:	4b88      	ldr	r3, [pc, #544]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d00c      	beq.n	80031c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031aa:	4b85      	ldr	r3, [pc, #532]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d112      	bne.n	80031dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031b6:	4b82      	ldr	r3, [pc, #520]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031c2:	d10b      	bne.n	80031dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c4:	4b7e      	ldr	r3, [pc, #504]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d05b      	beq.n	8003288 <HAL_RCC_OscConfig+0x108>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d157      	bne.n	8003288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e242      	b.n	8003662 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031e4:	d106      	bne.n	80031f4 <HAL_RCC_OscConfig+0x74>
 80031e6:	4b76      	ldr	r3, [pc, #472]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a75      	ldr	r2, [pc, #468]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 80031ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	e01d      	b.n	8003230 <HAL_RCC_OscConfig+0xb0>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031fc:	d10c      	bne.n	8003218 <HAL_RCC_OscConfig+0x98>
 80031fe:	4b70      	ldr	r3, [pc, #448]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a6f      	ldr	r2, [pc, #444]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 8003204:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	4b6d      	ldr	r3, [pc, #436]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a6c      	ldr	r2, [pc, #432]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 8003210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	e00b      	b.n	8003230 <HAL_RCC_OscConfig+0xb0>
 8003218:	4b69      	ldr	r3, [pc, #420]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a68      	ldr	r2, [pc, #416]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 800321e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	4b66      	ldr	r3, [pc, #408]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a65      	ldr	r2, [pc, #404]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 800322a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800322e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d013      	beq.n	8003260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003238:	f7fd fee8 	bl	800100c <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003240:	f7fd fee4 	bl	800100c <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b64      	cmp	r3, #100	@ 0x64
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e207      	b.n	8003662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003252:	4b5b      	ldr	r3, [pc, #364]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0xc0>
 800325e:	e014      	b.n	800328a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fd fed4 	bl	800100c <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003268:	f7fd fed0 	bl	800100c <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	@ 0x64
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e1f3      	b.n	8003662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800327a:	4b51      	ldr	r3, [pc, #324]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0xe8>
 8003286:	e000      	b.n	800328a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d063      	beq.n	800335e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003296:	4b4a      	ldr	r3, [pc, #296]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00b      	beq.n	80032ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032a2:	4b47      	ldr	r3, [pc, #284]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d11c      	bne.n	80032e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ae:	4b44      	ldr	r3, [pc, #272]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d116      	bne.n	80032e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ba:	4b41      	ldr	r3, [pc, #260]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d005      	beq.n	80032d2 <HAL_RCC_OscConfig+0x152>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d001      	beq.n	80032d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e1c7      	b.n	8003662 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d2:	4b3b      	ldr	r3, [pc, #236]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4937      	ldr	r1, [pc, #220]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e6:	e03a      	b.n	800335e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d020      	beq.n	8003332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f0:	4b34      	ldr	r3, [pc, #208]	@ (80033c4 <HAL_RCC_OscConfig+0x244>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f6:	f7fd fe89 	bl	800100c <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032fe:	f7fd fe85 	bl	800100c <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e1a8      	b.n	8003662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003310:	4b2b      	ldr	r3, [pc, #172]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0f0      	beq.n	80032fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331c:	4b28      	ldr	r3, [pc, #160]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4925      	ldr	r1, [pc, #148]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 800332c:	4313      	orrs	r3, r2
 800332e:	600b      	str	r3, [r1, #0]
 8003330:	e015      	b.n	800335e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003332:	4b24      	ldr	r3, [pc, #144]	@ (80033c4 <HAL_RCC_OscConfig+0x244>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fd fe68 	bl	800100c <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003340:	f7fd fe64 	bl	800100c <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e187      	b.n	8003662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003352:	4b1b      	ldr	r3, [pc, #108]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d036      	beq.n	80033d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d016      	beq.n	80033a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003372:	4b15      	ldr	r3, [pc, #84]	@ (80033c8 <HAL_RCC_OscConfig+0x248>)
 8003374:	2201      	movs	r2, #1
 8003376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003378:	f7fd fe48 	bl	800100c <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003380:	f7fd fe44 	bl	800100c <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e167      	b.n	8003662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003392:	4b0b      	ldr	r3, [pc, #44]	@ (80033c0 <HAL_RCC_OscConfig+0x240>)
 8003394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0x200>
 800339e:	e01b      	b.n	80033d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033a0:	4b09      	ldr	r3, [pc, #36]	@ (80033c8 <HAL_RCC_OscConfig+0x248>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a6:	f7fd fe31 	bl	800100c <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ac:	e00e      	b.n	80033cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ae:	f7fd fe2d 	bl	800100c <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d907      	bls.n	80033cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e150      	b.n	8003662 <HAL_RCC_OscConfig+0x4e2>
 80033c0:	40023800 	.word	0x40023800
 80033c4:	42470000 	.word	0x42470000
 80033c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033cc:	4b88      	ldr	r3, [pc, #544]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 80033ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1ea      	bne.n	80033ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 8097 	beq.w	8003514 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e6:	2300      	movs	r3, #0
 80033e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ea:	4b81      	ldr	r3, [pc, #516]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10f      	bne.n	8003416 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	4b7d      	ldr	r3, [pc, #500]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	4a7c      	ldr	r2, [pc, #496]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 8003400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003404:	6413      	str	r3, [r2, #64]	@ 0x40
 8003406:	4b7a      	ldr	r3, [pc, #488]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003412:	2301      	movs	r3, #1
 8003414:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003416:	4b77      	ldr	r3, [pc, #476]	@ (80035f4 <HAL_RCC_OscConfig+0x474>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341e:	2b00      	cmp	r3, #0
 8003420:	d118      	bne.n	8003454 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003422:	4b74      	ldr	r3, [pc, #464]	@ (80035f4 <HAL_RCC_OscConfig+0x474>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a73      	ldr	r2, [pc, #460]	@ (80035f4 <HAL_RCC_OscConfig+0x474>)
 8003428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800342c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800342e:	f7fd fded 	bl	800100c <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003436:	f7fd fde9 	bl	800100c <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e10c      	b.n	8003662 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003448:	4b6a      	ldr	r3, [pc, #424]	@ (80035f4 <HAL_RCC_OscConfig+0x474>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d106      	bne.n	800346a <HAL_RCC_OscConfig+0x2ea>
 800345c:	4b64      	ldr	r3, [pc, #400]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 800345e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003460:	4a63      	ldr	r2, [pc, #396]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	6713      	str	r3, [r2, #112]	@ 0x70
 8003468:	e01c      	b.n	80034a4 <HAL_RCC_OscConfig+0x324>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b05      	cmp	r3, #5
 8003470:	d10c      	bne.n	800348c <HAL_RCC_OscConfig+0x30c>
 8003472:	4b5f      	ldr	r3, [pc, #380]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003476:	4a5e      	ldr	r2, [pc, #376]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 8003478:	f043 0304 	orr.w	r3, r3, #4
 800347c:	6713      	str	r3, [r2, #112]	@ 0x70
 800347e:	4b5c      	ldr	r3, [pc, #368]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003482:	4a5b      	ldr	r2, [pc, #364]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	6713      	str	r3, [r2, #112]	@ 0x70
 800348a:	e00b      	b.n	80034a4 <HAL_RCC_OscConfig+0x324>
 800348c:	4b58      	ldr	r3, [pc, #352]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003490:	4a57      	ldr	r2, [pc, #348]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 8003492:	f023 0301 	bic.w	r3, r3, #1
 8003496:	6713      	str	r3, [r2, #112]	@ 0x70
 8003498:	4b55      	ldr	r3, [pc, #340]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800349c:	4a54      	ldr	r2, [pc, #336]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 800349e:	f023 0304 	bic.w	r3, r3, #4
 80034a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d015      	beq.n	80034d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ac:	f7fd fdae 	bl	800100c <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b2:	e00a      	b.n	80034ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b4:	f7fd fdaa 	bl	800100c <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e0cb      	b.n	8003662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ca:	4b49      	ldr	r3, [pc, #292]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 80034cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0ee      	beq.n	80034b4 <HAL_RCC_OscConfig+0x334>
 80034d6:	e014      	b.n	8003502 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d8:	f7fd fd98 	bl	800100c <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034de:	e00a      	b.n	80034f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e0:	f7fd fd94 	bl	800100c <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e0b5      	b.n	8003662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f6:	4b3e      	ldr	r3, [pc, #248]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1ee      	bne.n	80034e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d105      	bne.n	8003514 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003508:	4b39      	ldr	r3, [pc, #228]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 800350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350c:	4a38      	ldr	r2, [pc, #224]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 800350e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003512:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 80a1 	beq.w	8003660 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800351e:	4b34      	ldr	r3, [pc, #208]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	2b08      	cmp	r3, #8
 8003528:	d05c      	beq.n	80035e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d141      	bne.n	80035b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003532:	4b31      	ldr	r3, [pc, #196]	@ (80035f8 <HAL_RCC_OscConfig+0x478>)
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003538:	f7fd fd68 	bl	800100c <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003540:	f7fd fd64 	bl	800100c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e087      	b.n	8003662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003552:	4b27      	ldr	r3, [pc, #156]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69da      	ldr	r2, [r3, #28]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356c:	019b      	lsls	r3, r3, #6
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003574:	085b      	lsrs	r3, r3, #1
 8003576:	3b01      	subs	r3, #1
 8003578:	041b      	lsls	r3, r3, #16
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003580:	061b      	lsls	r3, r3, #24
 8003582:	491b      	ldr	r1, [pc, #108]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 8003584:	4313      	orrs	r3, r2
 8003586:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003588:	4b1b      	ldr	r3, [pc, #108]	@ (80035f8 <HAL_RCC_OscConfig+0x478>)
 800358a:	2201      	movs	r2, #1
 800358c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358e:	f7fd fd3d 	bl	800100c <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003596:	f7fd fd39 	bl	800100c <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e05c      	b.n	8003662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a8:	4b11      	ldr	r3, [pc, #68]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0f0      	beq.n	8003596 <HAL_RCC_OscConfig+0x416>
 80035b4:	e054      	b.n	8003660 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b6:	4b10      	ldr	r3, [pc, #64]	@ (80035f8 <HAL_RCC_OscConfig+0x478>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7fd fd26 	bl	800100c <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c4:	f7fd fd22 	bl	800100c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e045      	b.n	8003662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d6:	4b06      	ldr	r3, [pc, #24]	@ (80035f0 <HAL_RCC_OscConfig+0x470>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x444>
 80035e2:	e03d      	b.n	8003660 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d107      	bne.n	80035fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e038      	b.n	8003662 <HAL_RCC_OscConfig+0x4e2>
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40007000 	.word	0x40007000
 80035f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035fc:	4b1b      	ldr	r3, [pc, #108]	@ (800366c <HAL_RCC_OscConfig+0x4ec>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d028      	beq.n	800365c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d121      	bne.n	800365c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003622:	429a      	cmp	r2, r3
 8003624:	d11a      	bne.n	800365c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800362c:	4013      	ands	r3, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003634:	4293      	cmp	r3, r2
 8003636:	d111      	bne.n	800365c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003642:	085b      	lsrs	r3, r3, #1
 8003644:	3b01      	subs	r3, #1
 8003646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003648:	429a      	cmp	r2, r3
 800364a:	d107      	bne.n	800365c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003658:	429a      	cmp	r2, r3
 800365a:	d001      	beq.n	8003660 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40023800 	.word	0x40023800

08003670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0cc      	b.n	800381e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003684:	4b68      	ldr	r3, [pc, #416]	@ (8003828 <HAL_RCC_ClockConfig+0x1b8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d90c      	bls.n	80036ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003692:	4b65      	ldr	r3, [pc, #404]	@ (8003828 <HAL_RCC_ClockConfig+0x1b8>)
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800369a:	4b63      	ldr	r3, [pc, #396]	@ (8003828 <HAL_RCC_ClockConfig+0x1b8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0b8      	b.n	800381e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d020      	beq.n	80036fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036c4:	4b59      	ldr	r3, [pc, #356]	@ (800382c <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	4a58      	ldr	r2, [pc, #352]	@ (800382c <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036dc:	4b53      	ldr	r3, [pc, #332]	@ (800382c <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	4a52      	ldr	r2, [pc, #328]	@ (800382c <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e8:	4b50      	ldr	r3, [pc, #320]	@ (800382c <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	494d      	ldr	r1, [pc, #308]	@ (800382c <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d044      	beq.n	8003790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d107      	bne.n	800371e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370e:	4b47      	ldr	r3, [pc, #284]	@ (800382c <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d119      	bne.n	800374e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e07f      	b.n	800381e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d003      	beq.n	800372e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800372a:	2b03      	cmp	r3, #3
 800372c:	d107      	bne.n	800373e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372e:	4b3f      	ldr	r3, [pc, #252]	@ (800382c <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e06f      	b.n	800381e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800373e:	4b3b      	ldr	r3, [pc, #236]	@ (800382c <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e067      	b.n	800381e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800374e:	4b37      	ldr	r3, [pc, #220]	@ (800382c <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f023 0203 	bic.w	r2, r3, #3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	4934      	ldr	r1, [pc, #208]	@ (800382c <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	4313      	orrs	r3, r2
 800375e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003760:	f7fd fc54 	bl	800100c <HAL_GetTick>
 8003764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003766:	e00a      	b.n	800377e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003768:	f7fd fc50 	bl	800100c <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003776:	4293      	cmp	r3, r2
 8003778:	d901      	bls.n	800377e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e04f      	b.n	800381e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377e:	4b2b      	ldr	r3, [pc, #172]	@ (800382c <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 020c 	and.w	r2, r3, #12
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	429a      	cmp	r2, r3
 800378e:	d1eb      	bne.n	8003768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003790:	4b25      	ldr	r3, [pc, #148]	@ (8003828 <HAL_RCC_ClockConfig+0x1b8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d20c      	bcs.n	80037b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379e:	4b22      	ldr	r3, [pc, #136]	@ (8003828 <HAL_RCC_ClockConfig+0x1b8>)
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	4b20      	ldr	r3, [pc, #128]	@ (8003828 <HAL_RCC_ClockConfig+0x1b8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e032      	b.n	800381e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d008      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037c4:	4b19      	ldr	r3, [pc, #100]	@ (800382c <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	4916      	ldr	r1, [pc, #88]	@ (800382c <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037e2:	4b12      	ldr	r3, [pc, #72]	@ (800382c <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	490e      	ldr	r1, [pc, #56]	@ (800382c <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037f6:	f000 f821 	bl	800383c <HAL_RCC_GetSysClockFreq>
 80037fa:	4602      	mov	r2, r0
 80037fc:	4b0b      	ldr	r3, [pc, #44]	@ (800382c <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	490a      	ldr	r1, [pc, #40]	@ (8003830 <HAL_RCC_ClockConfig+0x1c0>)
 8003808:	5ccb      	ldrb	r3, [r1, r3]
 800380a:	fa22 f303 	lsr.w	r3, r2, r3
 800380e:	4a09      	ldr	r2, [pc, #36]	@ (8003834 <HAL_RCC_ClockConfig+0x1c4>)
 8003810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003812:	4b09      	ldr	r3, [pc, #36]	@ (8003838 <HAL_RCC_ClockConfig+0x1c8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7fd fbb4 	bl	8000f84 <HAL_InitTick>

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40023c00 	.word	0x40023c00
 800382c:	40023800 	.word	0x40023800
 8003830:	0800994c 	.word	0x0800994c
 8003834:	20000000 	.word	0x20000000
 8003838:	20000004 	.word	0x20000004

0800383c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800383c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003840:	b090      	sub	sp, #64	@ 0x40
 8003842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	637b      	str	r3, [r7, #52]	@ 0x34
 8003848:	2300      	movs	r3, #0
 800384a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800384c:	2300      	movs	r3, #0
 800384e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003854:	4b59      	ldr	r3, [pc, #356]	@ (80039bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 030c 	and.w	r3, r3, #12
 800385c:	2b08      	cmp	r3, #8
 800385e:	d00d      	beq.n	800387c <HAL_RCC_GetSysClockFreq+0x40>
 8003860:	2b08      	cmp	r3, #8
 8003862:	f200 80a1 	bhi.w	80039a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0x34>
 800386a:	2b04      	cmp	r3, #4
 800386c:	d003      	beq.n	8003876 <HAL_RCC_GetSysClockFreq+0x3a>
 800386e:	e09b      	b.n	80039a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003870:	4b53      	ldr	r3, [pc, #332]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003872:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003874:	e09b      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003876:	4b53      	ldr	r3, [pc, #332]	@ (80039c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003878:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800387a:	e098      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800387c:	4b4f      	ldr	r3, [pc, #316]	@ (80039bc <HAL_RCC_GetSysClockFreq+0x180>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003884:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003886:	4b4d      	ldr	r3, [pc, #308]	@ (80039bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d028      	beq.n	80038e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003892:	4b4a      	ldr	r3, [pc, #296]	@ (80039bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	099b      	lsrs	r3, r3, #6
 8003898:	2200      	movs	r2, #0
 800389a:	623b      	str	r3, [r7, #32]
 800389c:	627a      	str	r2, [r7, #36]	@ 0x24
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038a4:	2100      	movs	r1, #0
 80038a6:	4b47      	ldr	r3, [pc, #284]	@ (80039c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80038a8:	fb03 f201 	mul.w	r2, r3, r1
 80038ac:	2300      	movs	r3, #0
 80038ae:	fb00 f303 	mul.w	r3, r0, r3
 80038b2:	4413      	add	r3, r2
 80038b4:	4a43      	ldr	r2, [pc, #268]	@ (80039c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80038b6:	fba0 1202 	umull	r1, r2, r0, r2
 80038ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038bc:	460a      	mov	r2, r1
 80038be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80038c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038c2:	4413      	add	r3, r2
 80038c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038c8:	2200      	movs	r2, #0
 80038ca:	61bb      	str	r3, [r7, #24]
 80038cc:	61fa      	str	r2, [r7, #28]
 80038ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80038d6:	f7fc fcd3 	bl	8000280 <__aeabi_uldivmod>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	4613      	mov	r3, r2
 80038e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038e2:	e053      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038e4:	4b35      	ldr	r3, [pc, #212]	@ (80039bc <HAL_RCC_GetSysClockFreq+0x180>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	099b      	lsrs	r3, r3, #6
 80038ea:	2200      	movs	r2, #0
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	617a      	str	r2, [r7, #20]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038f6:	f04f 0b00 	mov.w	fp, #0
 80038fa:	4652      	mov	r2, sl
 80038fc:	465b      	mov	r3, fp
 80038fe:	f04f 0000 	mov.w	r0, #0
 8003902:	f04f 0100 	mov.w	r1, #0
 8003906:	0159      	lsls	r1, r3, #5
 8003908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800390c:	0150      	lsls	r0, r2, #5
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	ebb2 080a 	subs.w	r8, r2, sl
 8003916:	eb63 090b 	sbc.w	r9, r3, fp
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003926:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800392a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800392e:	ebb2 0408 	subs.w	r4, r2, r8
 8003932:	eb63 0509 	sbc.w	r5, r3, r9
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	00eb      	lsls	r3, r5, #3
 8003940:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003944:	00e2      	lsls	r2, r4, #3
 8003946:	4614      	mov	r4, r2
 8003948:	461d      	mov	r5, r3
 800394a:	eb14 030a 	adds.w	r3, r4, sl
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	eb45 030b 	adc.w	r3, r5, fp
 8003954:	607b      	str	r3, [r7, #4]
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003962:	4629      	mov	r1, r5
 8003964:	028b      	lsls	r3, r1, #10
 8003966:	4621      	mov	r1, r4
 8003968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800396c:	4621      	mov	r1, r4
 800396e:	028a      	lsls	r2, r1, #10
 8003970:	4610      	mov	r0, r2
 8003972:	4619      	mov	r1, r3
 8003974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003976:	2200      	movs	r2, #0
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	60fa      	str	r2, [r7, #12]
 800397c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003980:	f7fc fc7e 	bl	8000280 <__aeabi_uldivmod>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4613      	mov	r3, r2
 800398a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800398c:	4b0b      	ldr	r3, [pc, #44]	@ (80039bc <HAL_RCC_GetSysClockFreq+0x180>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	0c1b      	lsrs	r3, r3, #16
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	3301      	adds	r3, #1
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800399c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800399e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039a6:	e002      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039a8:	4b05      	ldr	r3, [pc, #20]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80039aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3740      	adds	r7, #64	@ 0x40
 80039b4:	46bd      	mov	sp, r7
 80039b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800
 80039c0:	00f42400 	.word	0x00f42400
 80039c4:	017d7840 	.word	0x017d7840

080039c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039cc:	4b03      	ldr	r3, [pc, #12]	@ (80039dc <HAL_RCC_GetHCLKFreq+0x14>)
 80039ce:	681b      	ldr	r3, [r3, #0]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20000000 	.word	0x20000000

080039e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039e4:	f7ff fff0 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 80039e8:	4602      	mov	r2, r0
 80039ea:	4b05      	ldr	r3, [pc, #20]	@ (8003a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	0a9b      	lsrs	r3, r3, #10
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	4903      	ldr	r1, [pc, #12]	@ (8003a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f6:	5ccb      	ldrb	r3, [r1, r3]
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40023800 	.word	0x40023800
 8003a04:	0800995c 	.word	0x0800995c

08003a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a0c:	f7ff ffdc 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 8003a10:	4602      	mov	r2, r0
 8003a12:	4b05      	ldr	r3, [pc, #20]	@ (8003a28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	0b5b      	lsrs	r3, r3, #13
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	4903      	ldr	r1, [pc, #12]	@ (8003a2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a1e:	5ccb      	ldrb	r3, [r1, r3]
 8003a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	0800995c 	.word	0x0800995c

08003a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e041      	b.n	8003ac6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fd f97a 	bl	8000d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	f000 fa70 	bl	8003f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d001      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e044      	b.n	8003b72 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1e      	ldr	r2, [pc, #120]	@ (8003b80 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d018      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0x6c>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b12:	d013      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0x6c>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1a      	ldr	r2, [pc, #104]	@ (8003b84 <HAL_TIM_Base_Start_IT+0xb4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00e      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0x6c>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a19      	ldr	r2, [pc, #100]	@ (8003b88 <HAL_TIM_Base_Start_IT+0xb8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d009      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0x6c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a17      	ldr	r2, [pc, #92]	@ (8003b8c <HAL_TIM_Base_Start_IT+0xbc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d004      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0x6c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a16      	ldr	r2, [pc, #88]	@ (8003b90 <HAL_TIM_Base_Start_IT+0xc0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d111      	bne.n	8003b60 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b06      	cmp	r3, #6
 8003b4c:	d010      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0201 	orr.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5e:	e007      	b.n	8003b70 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40010000 	.word	0x40010000
 8003b84:	40000400 	.word	0x40000400
 8003b88:	40000800 	.word	0x40000800
 8003b8c:	40000c00 	.word	0x40000c00
 8003b90:	40014000 	.word	0x40014000

08003b94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d020      	beq.n	8003bf8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01b      	beq.n	8003bf8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0202 	mvn.w	r2, #2
 8003bc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f999 	bl	8003f16 <HAL_TIM_IC_CaptureCallback>
 8003be4:	e005      	b.n	8003bf2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f98b 	bl	8003f02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f99c 	bl	8003f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d020      	beq.n	8003c44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01b      	beq.n	8003c44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0204 	mvn.w	r2, #4
 8003c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2202      	movs	r2, #2
 8003c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f973 	bl	8003f16 <HAL_TIM_IC_CaptureCallback>
 8003c30:	e005      	b.n	8003c3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f965 	bl	8003f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f976 	bl	8003f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d020      	beq.n	8003c90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01b      	beq.n	8003c90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0208 	mvn.w	r2, #8
 8003c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2204      	movs	r2, #4
 8003c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f94d 	bl	8003f16 <HAL_TIM_IC_CaptureCallback>
 8003c7c:	e005      	b.n	8003c8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f93f 	bl	8003f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f950 	bl	8003f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f003 0310 	and.w	r3, r3, #16
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d020      	beq.n	8003cdc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01b      	beq.n	8003cdc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0210 	mvn.w	r2, #16
 8003cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2208      	movs	r2, #8
 8003cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f927 	bl	8003f16 <HAL_TIM_IC_CaptureCallback>
 8003cc8:	e005      	b.n	8003cd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f919 	bl	8003f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f92a 	bl	8003f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00c      	beq.n	8003d00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d007      	beq.n	8003d00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0201 	mvn.w	r2, #1
 8003cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fc fcaa 	bl	8000654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00c      	beq.n	8003d24 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d007      	beq.n	8003d24 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fab6 	bl	8004290 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00c      	beq.n	8003d48 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d007      	beq.n	8003d48 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f8fb 	bl	8003f3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f003 0320 	and.w	r3, r3, #32
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00c      	beq.n	8003d6c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d007      	beq.n	8003d6c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0220 	mvn.w	r2, #32
 8003d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fa88 	bl	800427c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_TIM_ConfigClockSource+0x1c>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e0b4      	b.n	8003efa <HAL_TIM_ConfigClockSource+0x186>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003db6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dc8:	d03e      	beq.n	8003e48 <HAL_TIM_ConfigClockSource+0xd4>
 8003dca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dce:	f200 8087 	bhi.w	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd6:	f000 8086 	beq.w	8003ee6 <HAL_TIM_ConfigClockSource+0x172>
 8003dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dde:	d87f      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003de0:	2b70      	cmp	r3, #112	@ 0x70
 8003de2:	d01a      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0xa6>
 8003de4:	2b70      	cmp	r3, #112	@ 0x70
 8003de6:	d87b      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003de8:	2b60      	cmp	r3, #96	@ 0x60
 8003dea:	d050      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x11a>
 8003dec:	2b60      	cmp	r3, #96	@ 0x60
 8003dee:	d877      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003df0:	2b50      	cmp	r3, #80	@ 0x50
 8003df2:	d03c      	beq.n	8003e6e <HAL_TIM_ConfigClockSource+0xfa>
 8003df4:	2b50      	cmp	r3, #80	@ 0x50
 8003df6:	d873      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003df8:	2b40      	cmp	r3, #64	@ 0x40
 8003dfa:	d058      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0x13a>
 8003dfc:	2b40      	cmp	r3, #64	@ 0x40
 8003dfe:	d86f      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e00:	2b30      	cmp	r3, #48	@ 0x30
 8003e02:	d064      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15a>
 8003e04:	2b30      	cmp	r3, #48	@ 0x30
 8003e06:	d86b      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d060      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15a>
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d867      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d05c      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15a>
 8003e14:	2b10      	cmp	r3, #16
 8003e16:	d05a      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15a>
 8003e18:	e062      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e2a:	f000 f999 	bl	8004160 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	609a      	str	r2, [r3, #8]
      break;
 8003e46:	e04f      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e58:	f000 f982 	bl	8004160 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e6a:	609a      	str	r2, [r3, #8]
      break;
 8003e6c:	e03c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f000 f8f6 	bl	800406c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2150      	movs	r1, #80	@ 0x50
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 f94f 	bl	800412a <TIM_ITRx_SetConfig>
      break;
 8003e8c:	e02c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f000 f915 	bl	80040ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2160      	movs	r1, #96	@ 0x60
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 f93f 	bl	800412a <TIM_ITRx_SetConfig>
      break;
 8003eac:	e01c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f000 f8d6 	bl	800406c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2140      	movs	r1, #64	@ 0x40
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 f92f 	bl	800412a <TIM_ITRx_SetConfig>
      break;
 8003ecc:	e00c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4610      	mov	r0, r2
 8003eda:	f000 f926 	bl	800412a <TIM_ITRx_SetConfig>
      break;
 8003ede:	e003      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee4:	e000      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ee6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
	...

08003f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a3a      	ldr	r2, [pc, #232]	@ (8004050 <TIM_Base_SetConfig+0xfc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00f      	beq.n	8003f8c <TIM_Base_SetConfig+0x38>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f72:	d00b      	beq.n	8003f8c <TIM_Base_SetConfig+0x38>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a37      	ldr	r2, [pc, #220]	@ (8004054 <TIM_Base_SetConfig+0x100>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d007      	beq.n	8003f8c <TIM_Base_SetConfig+0x38>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a36      	ldr	r2, [pc, #216]	@ (8004058 <TIM_Base_SetConfig+0x104>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d003      	beq.n	8003f8c <TIM_Base_SetConfig+0x38>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a35      	ldr	r2, [pc, #212]	@ (800405c <TIM_Base_SetConfig+0x108>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d108      	bne.n	8003f9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a2b      	ldr	r2, [pc, #172]	@ (8004050 <TIM_Base_SetConfig+0xfc>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d01b      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fac:	d017      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a28      	ldr	r2, [pc, #160]	@ (8004054 <TIM_Base_SetConfig+0x100>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d013      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a27      	ldr	r2, [pc, #156]	@ (8004058 <TIM_Base_SetConfig+0x104>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00f      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a26      	ldr	r2, [pc, #152]	@ (800405c <TIM_Base_SetConfig+0x108>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d00b      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a25      	ldr	r2, [pc, #148]	@ (8004060 <TIM_Base_SetConfig+0x10c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d007      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a24      	ldr	r2, [pc, #144]	@ (8004064 <TIM_Base_SetConfig+0x110>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d003      	beq.n	8003fde <TIM_Base_SetConfig+0x8a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a23      	ldr	r2, [pc, #140]	@ (8004068 <TIM_Base_SetConfig+0x114>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d108      	bne.n	8003ff0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a0e      	ldr	r2, [pc, #56]	@ (8004050 <TIM_Base_SetConfig+0xfc>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d103      	bne.n	8004024 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b01      	cmp	r3, #1
 8004034:	d105      	bne.n	8004042 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f023 0201 	bic.w	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	611a      	str	r2, [r3, #16]
  }
}
 8004042:	bf00      	nop
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40010000 	.word	0x40010000
 8004054:	40000400 	.word	0x40000400
 8004058:	40000800 	.word	0x40000800
 800405c:	40000c00 	.word	0x40000c00
 8004060:	40014000 	.word	0x40014000
 8004064:	40014400 	.word	0x40014400
 8004068:	40014800 	.word	0x40014800

0800406c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	f023 0201 	bic.w	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4313      	orrs	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f023 030a 	bic.w	r3, r3, #10
 80040a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	621a      	str	r2, [r3, #32]
}
 80040be:	bf00      	nop
 80040c0:	371c      	adds	r7, #28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b087      	sub	sp, #28
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	f023 0210 	bic.w	r2, r3, #16
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	031b      	lsls	r3, r3, #12
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004106:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	621a      	str	r2, [r3, #32]
}
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800412a:	b480      	push	{r7}
 800412c:	b085      	sub	sp, #20
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	f043 0307 	orr.w	r3, r3, #7
 800414c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	609a      	str	r2, [r3, #8]
}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800417a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	021a      	lsls	r2, r3, #8
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	431a      	orrs	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	4313      	orrs	r3, r2
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	609a      	str	r2, [r3, #8]
}
 8004194:	bf00      	nop
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e050      	b.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d018      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004204:	d013      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a18      	ldr	r2, [pc, #96]	@ (800426c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00e      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a16      	ldr	r2, [pc, #88]	@ (8004270 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d009      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a15      	ldr	r2, [pc, #84]	@ (8004274 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d004      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a13      	ldr	r2, [pc, #76]	@ (8004278 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d10c      	bne.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004234:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	4313      	orrs	r3, r2
 800423e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40010000 	.word	0x40010000
 800426c:	40000400 	.word	0x40000400
 8004270:	40000800 	.word	0x40000800
 8004274:	40000c00 	.word	0x40000c00
 8004278:	40014000 	.word	0x40014000

0800427c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e042      	b.n	800433c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fc fd92 	bl	8000df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2224      	movs	r2, #36	@ 0x24
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 fb79 	bl	80049e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695a      	ldr	r2, [r3, #20]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800430c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800431c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	@ 0x28
 8004348:	af02      	add	r7, sp, #8
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b20      	cmp	r3, #32
 8004362:	d175      	bne.n	8004450 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <HAL_UART_Transmit+0x2c>
 800436a:	88fb      	ldrh	r3, [r7, #6]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e06e      	b.n	8004452 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2221      	movs	r2, #33	@ 0x21
 800437e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004382:	f7fc fe43 	bl	800100c <HAL_GetTick>
 8004386:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	88fa      	ldrh	r2, [r7, #6]
 800438c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	88fa      	ldrh	r2, [r7, #6]
 8004392:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800439c:	d108      	bne.n	80043b0 <HAL_UART_Transmit+0x6c>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d104      	bne.n	80043b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	e003      	b.n	80043b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043b8:	e02e      	b.n	8004418 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2200      	movs	r2, #0
 80043c2:	2180      	movs	r1, #128	@ 0x80
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 f98b 	bl	80046e0 <UART_WaitOnFlagUntilTimeout>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e03a      	b.n	8004452 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10b      	bne.n	80043fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	3302      	adds	r3, #2
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	e007      	b.n	800440a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	781a      	ldrb	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	3301      	adds	r3, #1
 8004408:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1cb      	bne.n	80043ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2200      	movs	r2, #0
 800442a:	2140      	movs	r1, #64	@ 0x40
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f957 	bl	80046e0 <UART_WaitOnFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e006      	b.n	8004452 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	e000      	b.n	8004452 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004450:	2302      	movs	r3, #2
  }
}
 8004452:	4618      	mov	r0, r3
 8004454:	3720      	adds	r7, #32
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b084      	sub	sp, #16
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	4613      	mov	r3, r2
 8004466:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b20      	cmp	r3, #32
 8004472:	d112      	bne.n	800449a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <HAL_UART_Receive_DMA+0x26>
 800447a:	88fb      	ldrh	r3, [r7, #6]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e00b      	b.n	800449c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800448a:	88fb      	ldrh	r3, [r7, #6]
 800448c:	461a      	mov	r2, r3
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f97f 	bl	8004794 <UART_Start_Receive_DMA>
 8004496:	4603      	mov	r3, r0
 8004498:	e000      	b.n	800449c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800449a:	2302      	movs	r3, #2
  }
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b09c      	sub	sp, #112	@ 0x70
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d172      	bne.n	80045e6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004500:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004502:	2200      	movs	r2, #0
 8004504:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004506:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	330c      	adds	r3, #12
 800450c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004510:	e853 3f00 	ldrex	r3, [r3]
 8004514:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004516:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800451c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800451e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	330c      	adds	r3, #12
 8004524:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004526:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004528:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800452c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004534:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e5      	bne.n	8004506 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3314      	adds	r3, #20
 8004540:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800454a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800454c:	f023 0301 	bic.w	r3, r3, #1
 8004550:	667b      	str	r3, [r7, #100]	@ 0x64
 8004552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3314      	adds	r3, #20
 8004558:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800455a:	647a      	str	r2, [r7, #68]	@ 0x44
 800455c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004560:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e5      	bne.n	800453a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800456e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3314      	adds	r3, #20
 8004574:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	623b      	str	r3, [r7, #32]
   return(result);
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004584:	663b      	str	r3, [r7, #96]	@ 0x60
 8004586:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3314      	adds	r3, #20
 800458c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800458e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004590:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004594:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800459c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e5      	bne.n	800456e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80045a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d119      	bne.n	80045e6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	330c      	adds	r3, #12
 80045b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	e853 3f00 	ldrex	r3, [r3]
 80045c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f023 0310 	bic.w	r3, r3, #16
 80045c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	330c      	adds	r3, #12
 80045d0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80045d2:	61fa      	str	r2, [r7, #28]
 80045d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d6:	69b9      	ldr	r1, [r7, #24]
 80045d8:	69fa      	ldr	r2, [r7, #28]
 80045da:	e841 2300 	strex	r3, r2, [r1]
 80045de:	617b      	str	r3, [r7, #20]
   return(result);
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1e5      	bne.n	80045b2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045e8:	2200      	movs	r2, #0
 80045ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d106      	bne.n	8004602 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045f6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045f8:	4619      	mov	r1, r3
 80045fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80045fc:	f7ff ff66 	bl	80044cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004600:	e002      	b.n	8004608 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004602:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004604:	f7fc f8a2 	bl	800074c <HAL_UART_RxCpltCallback>
}
 8004608:	bf00      	nop
 800460a:	3770      	adds	r7, #112	@ 0x70
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004628:	2b01      	cmp	r3, #1
 800462a:	d108      	bne.n	800463e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004630:	085b      	lsrs	r3, r3, #1
 8004632:	b29b      	uxth	r3, r3
 8004634:	4619      	mov	r1, r3
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f7ff ff48 	bl	80044cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800463c:	e002      	b.n	8004644 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f7ff ff30 	bl	80044a4 <HAL_UART_RxHalfCpltCallback>
}
 8004644:	bf00      	nop
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004654:	2300      	movs	r3, #0
 8004656:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800465c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004668:	2b80      	cmp	r3, #128	@ 0x80
 800466a:	bf0c      	ite	eq
 800466c:	2301      	moveq	r3, #1
 800466e:	2300      	movne	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b21      	cmp	r3, #33	@ 0x21
 800467e:	d108      	bne.n	8004692 <UART_DMAError+0x46>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2200      	movs	r2, #0
 800468a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800468c:	68b8      	ldr	r0, [r7, #8]
 800468e:	f000 f91b 	bl	80048c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469c:	2b40      	cmp	r3, #64	@ 0x40
 800469e:	bf0c      	ite	eq
 80046a0:	2301      	moveq	r3, #1
 80046a2:	2300      	movne	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b22      	cmp	r3, #34	@ 0x22
 80046b2:	d108      	bne.n	80046c6 <UART_DMAError+0x7a>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d005      	beq.n	80046c6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2200      	movs	r2, #0
 80046be:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80046c0:	68b8      	ldr	r0, [r7, #8]
 80046c2:	f000 f929 	bl	8004918 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ca:	f043 0210 	orr.w	r2, r3, #16
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046d2:	68b8      	ldr	r0, [r7, #8]
 80046d4:	f7ff fef0 	bl	80044b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046d8:	bf00      	nop
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	4613      	mov	r3, r2
 80046ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046f0:	e03b      	b.n	800476a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d037      	beq.n	800476a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046fa:	f7fc fc87 	bl	800100c <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	6a3a      	ldr	r2, [r7, #32]
 8004706:	429a      	cmp	r2, r3
 8004708:	d302      	bcc.n	8004710 <UART_WaitOnFlagUntilTimeout+0x30>
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e03a      	b.n	800478a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	2b00      	cmp	r3, #0
 8004720:	d023      	beq.n	800476a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b80      	cmp	r3, #128	@ 0x80
 8004726:	d020      	beq.n	800476a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2b40      	cmp	r3, #64	@ 0x40
 800472c:	d01d      	beq.n	800476a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b08      	cmp	r3, #8
 800473a:	d116      	bne.n	800476a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 f8e0 	bl	8004918 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2208      	movs	r2, #8
 800475c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e00f      	b.n	800478a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4013      	ands	r3, r2
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	429a      	cmp	r2, r3
 8004778:	bf0c      	ite	eq
 800477a:	2301      	moveq	r3, #1
 800477c:	2300      	movne	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	429a      	cmp	r2, r3
 8004786:	d0b4      	beq.n	80046f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b098      	sub	sp, #96	@ 0x60
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	4613      	mov	r3, r2
 80047a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	88fa      	ldrh	r2, [r7, #6]
 80047ac:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2222      	movs	r2, #34	@ 0x22
 80047b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c0:	4a3e      	ldr	r2, [pc, #248]	@ (80048bc <UART_Start_Receive_DMA+0x128>)
 80047c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c8:	4a3d      	ldr	r2, [pc, #244]	@ (80048c0 <UART_Start_Receive_DMA+0x12c>)
 80047ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d0:	4a3c      	ldr	r2, [pc, #240]	@ (80048c4 <UART_Start_Receive_DMA+0x130>)
 80047d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d8:	2200      	movs	r2, #0
 80047da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80047dc:	f107 0308 	add.w	r3, r7, #8
 80047e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3304      	adds	r3, #4
 80047ec:	4619      	mov	r1, r3
 80047ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	f7fc fdfa 	bl	80013ec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80047f8:	2300      	movs	r3, #0
 80047fa:	613b      	str	r3, [r7, #16]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d019      	beq.n	800484a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	330c      	adds	r3, #12
 800481c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004820:	e853 3f00 	ldrex	r3, [r3]
 8004824:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800482c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	330c      	adds	r3, #12
 8004834:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004836:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004838:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800483c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e5      	bne.n	8004816 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3314      	adds	r3, #20
 8004850:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004854:	e853 3f00 	ldrex	r3, [r3]
 8004858:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800485a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	657b      	str	r3, [r7, #84]	@ 0x54
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3314      	adds	r3, #20
 8004868:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800486a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800486c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004870:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004872:	e841 2300 	strex	r3, r2, [r1]
 8004876:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1e5      	bne.n	800484a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3314      	adds	r3, #20
 8004884:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	617b      	str	r3, [r7, #20]
   return(result);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004894:	653b      	str	r3, [r7, #80]	@ 0x50
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3314      	adds	r3, #20
 800489c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800489e:	627a      	str	r2, [r7, #36]	@ 0x24
 80048a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a2:	6a39      	ldr	r1, [r7, #32]
 80048a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a6:	e841 2300 	strex	r3, r2, [r1]
 80048aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1e5      	bne.n	800487e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3760      	adds	r7, #96	@ 0x60
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	080044e5 	.word	0x080044e5
 80048c0:	08004611 	.word	0x08004611
 80048c4:	0800464d 	.word	0x0800464d

080048c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b089      	sub	sp, #36	@ 0x24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	330c      	adds	r3, #12
 80048d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	e853 3f00 	ldrex	r3, [r3]
 80048de:	60bb      	str	r3, [r7, #8]
   return(result);
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80048e6:	61fb      	str	r3, [r7, #28]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	330c      	adds	r3, #12
 80048ee:	69fa      	ldr	r2, [r7, #28]
 80048f0:	61ba      	str	r2, [r7, #24]
 80048f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f4:	6979      	ldr	r1, [r7, #20]
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	e841 2300 	strex	r3, r2, [r1]
 80048fc:	613b      	str	r3, [r7, #16]
   return(result);
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e5      	bne.n	80048d0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800490c:	bf00      	nop
 800490e:	3724      	adds	r7, #36	@ 0x24
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004918:	b480      	push	{r7}
 800491a:	b095      	sub	sp, #84	@ 0x54
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	330c      	adds	r3, #12
 8004926:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004932:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	330c      	adds	r3, #12
 800493e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004940:	643a      	str	r2, [r7, #64]	@ 0x40
 8004942:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004946:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004948:	e841 2300 	strex	r3, r2, [r1]
 800494c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800494e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e5      	bne.n	8004920 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3314      	adds	r3, #20
 800495a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	e853 3f00 	ldrex	r3, [r3]
 8004962:	61fb      	str	r3, [r7, #28]
   return(result);
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f023 0301 	bic.w	r3, r3, #1
 800496a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3314      	adds	r3, #20
 8004972:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004974:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004976:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004978:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800497a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800497c:	e841 2300 	strex	r3, r2, [r1]
 8004980:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1e5      	bne.n	8004954 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498c:	2b01      	cmp	r3, #1
 800498e:	d119      	bne.n	80049c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	330c      	adds	r3, #12
 8004996:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	e853 3f00 	ldrex	r3, [r3]
 800499e:	60bb      	str	r3, [r7, #8]
   return(result);
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f023 0310 	bic.w	r3, r3, #16
 80049a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	330c      	adds	r3, #12
 80049ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049b0:	61ba      	str	r2, [r7, #24]
 80049b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b4:	6979      	ldr	r1, [r7, #20]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	e841 2300 	strex	r3, r2, [r1]
 80049bc:	613b      	str	r3, [r7, #16]
   return(result);
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e5      	bne.n	8004990 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80049d2:	bf00      	nop
 80049d4:	3754      	adds	r7, #84	@ 0x54
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
	...

080049e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e4:	b0c0      	sub	sp, #256	@ 0x100
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fc:	68d9      	ldr	r1, [r3, #12]
 80049fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	ea40 0301 	orr.w	r3, r0, r1
 8004a08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	431a      	orrs	r2, r3
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004a38:	f021 010c 	bic.w	r1, r1, #12
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a46:	430b      	orrs	r3, r1
 8004a48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a5a:	6999      	ldr	r1, [r3, #24]
 8004a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	ea40 0301 	orr.w	r3, r0, r1
 8004a66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	4b8f      	ldr	r3, [pc, #572]	@ (8004cac <UART_SetConfig+0x2cc>)
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d005      	beq.n	8004a80 <UART_SetConfig+0xa0>
 8004a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	4b8d      	ldr	r3, [pc, #564]	@ (8004cb0 <UART_SetConfig+0x2d0>)
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d104      	bne.n	8004a8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a80:	f7fe ffc2 	bl	8003a08 <HAL_RCC_GetPCLK2Freq>
 8004a84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a88:	e003      	b.n	8004a92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a8a:	f7fe ffa9 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 8004a8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a9c:	f040 810c 	bne.w	8004cb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004aaa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004aae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	462b      	mov	r3, r5
 8004ab6:	1891      	adds	r1, r2, r2
 8004ab8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004aba:	415b      	adcs	r3, r3
 8004abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004abe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ac2:	4621      	mov	r1, r4
 8004ac4:	eb12 0801 	adds.w	r8, r2, r1
 8004ac8:	4629      	mov	r1, r5
 8004aca:	eb43 0901 	adc.w	r9, r3, r1
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ae2:	4690      	mov	r8, r2
 8004ae4:	4699      	mov	r9, r3
 8004ae6:	4623      	mov	r3, r4
 8004ae8:	eb18 0303 	adds.w	r3, r8, r3
 8004aec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004af0:	462b      	mov	r3, r5
 8004af2:	eb49 0303 	adc.w	r3, r9, r3
 8004af6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004b0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b0e:	460b      	mov	r3, r1
 8004b10:	18db      	adds	r3, r3, r3
 8004b12:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b14:	4613      	mov	r3, r2
 8004b16:	eb42 0303 	adc.w	r3, r2, r3
 8004b1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004b24:	f7fb fbac 	bl	8000280 <__aeabi_uldivmod>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4b61      	ldr	r3, [pc, #388]	@ (8004cb4 <UART_SetConfig+0x2d4>)
 8004b2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	011c      	lsls	r4, r3, #4
 8004b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b48:	4642      	mov	r2, r8
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	1891      	adds	r1, r2, r2
 8004b4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b50:	415b      	adcs	r3, r3
 8004b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b58:	4641      	mov	r1, r8
 8004b5a:	eb12 0a01 	adds.w	sl, r2, r1
 8004b5e:	4649      	mov	r1, r9
 8004b60:	eb43 0b01 	adc.w	fp, r3, r1
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b78:	4692      	mov	sl, r2
 8004b7a:	469b      	mov	fp, r3
 8004b7c:	4643      	mov	r3, r8
 8004b7e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b86:	464b      	mov	r3, r9
 8004b88:	eb4b 0303 	adc.w	r3, fp, r3
 8004b8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ba0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	18db      	adds	r3, r3, r3
 8004ba8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004baa:	4613      	mov	r3, r2
 8004bac:	eb42 0303 	adc.w	r3, r2, r3
 8004bb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004bb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004bba:	f7fb fb61 	bl	8000280 <__aeabi_uldivmod>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	4b3b      	ldr	r3, [pc, #236]	@ (8004cb4 <UART_SetConfig+0x2d4>)
 8004bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	2264      	movs	r2, #100	@ 0x64
 8004bce:	fb02 f303 	mul.w	r3, r2, r3
 8004bd2:	1acb      	subs	r3, r1, r3
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004bda:	4b36      	ldr	r3, [pc, #216]	@ (8004cb4 <UART_SetConfig+0x2d4>)
 8004bdc:	fba3 2302 	umull	r2, r3, r3, r2
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004be8:	441c      	add	r4, r3
 8004bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bf4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004bf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004bfc:	4642      	mov	r2, r8
 8004bfe:	464b      	mov	r3, r9
 8004c00:	1891      	adds	r1, r2, r2
 8004c02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c04:	415b      	adcs	r3, r3
 8004c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c0c:	4641      	mov	r1, r8
 8004c0e:	1851      	adds	r1, r2, r1
 8004c10:	6339      	str	r1, [r7, #48]	@ 0x30
 8004c12:	4649      	mov	r1, r9
 8004c14:	414b      	adcs	r3, r1
 8004c16:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004c24:	4659      	mov	r1, fp
 8004c26:	00cb      	lsls	r3, r1, #3
 8004c28:	4651      	mov	r1, sl
 8004c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c2e:	4651      	mov	r1, sl
 8004c30:	00ca      	lsls	r2, r1, #3
 8004c32:	4610      	mov	r0, r2
 8004c34:	4619      	mov	r1, r3
 8004c36:	4603      	mov	r3, r0
 8004c38:	4642      	mov	r2, r8
 8004c3a:	189b      	adds	r3, r3, r2
 8004c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c40:	464b      	mov	r3, r9
 8004c42:	460a      	mov	r2, r1
 8004c44:	eb42 0303 	adc.w	r3, r2, r3
 8004c48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c60:	460b      	mov	r3, r1
 8004c62:	18db      	adds	r3, r3, r3
 8004c64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c66:	4613      	mov	r3, r2
 8004c68:	eb42 0303 	adc.w	r3, r2, r3
 8004c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c76:	f7fb fb03 	bl	8000280 <__aeabi_uldivmod>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb4 <UART_SetConfig+0x2d4>)
 8004c80:	fba3 1302 	umull	r1, r3, r3, r2
 8004c84:	095b      	lsrs	r3, r3, #5
 8004c86:	2164      	movs	r1, #100	@ 0x64
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	3332      	adds	r3, #50	@ 0x32
 8004c92:	4a08      	ldr	r2, [pc, #32]	@ (8004cb4 <UART_SetConfig+0x2d4>)
 8004c94:	fba2 2303 	umull	r2, r3, r2, r3
 8004c98:	095b      	lsrs	r3, r3, #5
 8004c9a:	f003 0207 	and.w	r2, r3, #7
 8004c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4422      	add	r2, r4
 8004ca6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ca8:	e106      	b.n	8004eb8 <UART_SetConfig+0x4d8>
 8004caa:	bf00      	nop
 8004cac:	40011000 	.word	0x40011000
 8004cb0:	40011400 	.word	0x40011400
 8004cb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004cc2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004cc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004cca:	4642      	mov	r2, r8
 8004ccc:	464b      	mov	r3, r9
 8004cce:	1891      	adds	r1, r2, r2
 8004cd0:	6239      	str	r1, [r7, #32]
 8004cd2:	415b      	adcs	r3, r3
 8004cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cda:	4641      	mov	r1, r8
 8004cdc:	1854      	adds	r4, r2, r1
 8004cde:	4649      	mov	r1, r9
 8004ce0:	eb43 0501 	adc.w	r5, r3, r1
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	00eb      	lsls	r3, r5, #3
 8004cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cf2:	00e2      	lsls	r2, r4, #3
 8004cf4:	4614      	mov	r4, r2
 8004cf6:	461d      	mov	r5, r3
 8004cf8:	4643      	mov	r3, r8
 8004cfa:	18e3      	adds	r3, r4, r3
 8004cfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d00:	464b      	mov	r3, r9
 8004d02:	eb45 0303 	adc.w	r3, r5, r3
 8004d06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d26:	4629      	mov	r1, r5
 8004d28:	008b      	lsls	r3, r1, #2
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d30:	4621      	mov	r1, r4
 8004d32:	008a      	lsls	r2, r1, #2
 8004d34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004d38:	f7fb faa2 	bl	8000280 <__aeabi_uldivmod>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4b60      	ldr	r3, [pc, #384]	@ (8004ec4 <UART_SetConfig+0x4e4>)
 8004d42:	fba3 2302 	umull	r2, r3, r3, r2
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	011c      	lsls	r4, r3, #4
 8004d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	464b      	mov	r3, r9
 8004d60:	1891      	adds	r1, r2, r2
 8004d62:	61b9      	str	r1, [r7, #24]
 8004d64:	415b      	adcs	r3, r3
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d6c:	4641      	mov	r1, r8
 8004d6e:	1851      	adds	r1, r2, r1
 8004d70:	6139      	str	r1, [r7, #16]
 8004d72:	4649      	mov	r1, r9
 8004d74:	414b      	adcs	r3, r1
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d84:	4659      	mov	r1, fp
 8004d86:	00cb      	lsls	r3, r1, #3
 8004d88:	4651      	mov	r1, sl
 8004d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d8e:	4651      	mov	r1, sl
 8004d90:	00ca      	lsls	r2, r1, #3
 8004d92:	4610      	mov	r0, r2
 8004d94:	4619      	mov	r1, r3
 8004d96:	4603      	mov	r3, r0
 8004d98:	4642      	mov	r2, r8
 8004d9a:	189b      	adds	r3, r3, r2
 8004d9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004da0:	464b      	mov	r3, r9
 8004da2:	460a      	mov	r2, r1
 8004da4:	eb42 0303 	adc.w	r3, r2, r3
 8004da8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004db6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004dc4:	4649      	mov	r1, r9
 8004dc6:	008b      	lsls	r3, r1, #2
 8004dc8:	4641      	mov	r1, r8
 8004dca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dce:	4641      	mov	r1, r8
 8004dd0:	008a      	lsls	r2, r1, #2
 8004dd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004dd6:	f7fb fa53 	bl	8000280 <__aeabi_uldivmod>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4611      	mov	r1, r2
 8004de0:	4b38      	ldr	r3, [pc, #224]	@ (8004ec4 <UART_SetConfig+0x4e4>)
 8004de2:	fba3 2301 	umull	r2, r3, r3, r1
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	2264      	movs	r2, #100	@ 0x64
 8004dea:	fb02 f303 	mul.w	r3, r2, r3
 8004dee:	1acb      	subs	r3, r1, r3
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	3332      	adds	r3, #50	@ 0x32
 8004df4:	4a33      	ldr	r2, [pc, #204]	@ (8004ec4 <UART_SetConfig+0x4e4>)
 8004df6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e00:	441c      	add	r4, r3
 8004e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e06:	2200      	movs	r2, #0
 8004e08:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004e10:	4642      	mov	r2, r8
 8004e12:	464b      	mov	r3, r9
 8004e14:	1891      	adds	r1, r2, r2
 8004e16:	60b9      	str	r1, [r7, #8]
 8004e18:	415b      	adcs	r3, r3
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e20:	4641      	mov	r1, r8
 8004e22:	1851      	adds	r1, r2, r1
 8004e24:	6039      	str	r1, [r7, #0]
 8004e26:	4649      	mov	r1, r9
 8004e28:	414b      	adcs	r3, r1
 8004e2a:	607b      	str	r3, [r7, #4]
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e38:	4659      	mov	r1, fp
 8004e3a:	00cb      	lsls	r3, r1, #3
 8004e3c:	4651      	mov	r1, sl
 8004e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e42:	4651      	mov	r1, sl
 8004e44:	00ca      	lsls	r2, r1, #3
 8004e46:	4610      	mov	r0, r2
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	4642      	mov	r2, r8
 8004e4e:	189b      	adds	r3, r3, r2
 8004e50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e52:	464b      	mov	r3, r9
 8004e54:	460a      	mov	r2, r1
 8004e56:	eb42 0303 	adc.w	r3, r2, r3
 8004e5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e66:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e74:	4649      	mov	r1, r9
 8004e76:	008b      	lsls	r3, r1, #2
 8004e78:	4641      	mov	r1, r8
 8004e7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e7e:	4641      	mov	r1, r8
 8004e80:	008a      	lsls	r2, r1, #2
 8004e82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e86:	f7fb f9fb 	bl	8000280 <__aeabi_uldivmod>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec4 <UART_SetConfig+0x4e4>)
 8004e90:	fba3 1302 	umull	r1, r3, r3, r2
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	2164      	movs	r1, #100	@ 0x64
 8004e98:	fb01 f303 	mul.w	r3, r1, r3
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	3332      	adds	r3, #50	@ 0x32
 8004ea2:	4a08      	ldr	r2, [pc, #32]	@ (8004ec4 <UART_SetConfig+0x4e4>)
 8004ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea8:	095b      	lsrs	r3, r3, #5
 8004eaa:	f003 020f 	and.w	r2, r3, #15
 8004eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4422      	add	r2, r4
 8004eb6:	609a      	str	r2, [r3, #8]
}
 8004eb8:	bf00      	nop
 8004eba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ec4:	51eb851f 	.word	0x51eb851f

08004ec8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ec8:	b084      	sub	sp, #16
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	f107 001c 	add.w	r0, r7, #28
 8004ed6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004eda:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d123      	bne.n	8004f2a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004ef6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d105      	bne.n	8004f1e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f001 fae2 	bl	80064e8 <USB_CoreReset>
 8004f24:	4603      	mov	r3, r0
 8004f26:	73fb      	strb	r3, [r7, #15]
 8004f28:	e01b      	b.n	8004f62 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f001 fad6 	bl	80064e8 <USB_CoreReset>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f40:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d106      	bne.n	8004f56 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f54:	e005      	b.n	8004f62 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f62:	7fbb      	ldrb	r3, [r7, #30]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d10b      	bne.n	8004f80 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f043 0206 	orr.w	r2, r3, #6
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f043 0220 	orr.w	r2, r3, #32
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f8c:	b004      	add	sp, #16
 8004f8e:	4770      	bx	lr

08004f90 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d165      	bne.n	8005070 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4a41      	ldr	r2, [pc, #260]	@ (80050ac <USB_SetTurnaroundTime+0x11c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d906      	bls.n	8004fba <USB_SetTurnaroundTime+0x2a>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4a40      	ldr	r2, [pc, #256]	@ (80050b0 <USB_SetTurnaroundTime+0x120>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d202      	bcs.n	8004fba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004fb4:	230f      	movs	r3, #15
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	e062      	b.n	8005080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	4a3c      	ldr	r2, [pc, #240]	@ (80050b0 <USB_SetTurnaroundTime+0x120>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d306      	bcc.n	8004fd0 <USB_SetTurnaroundTime+0x40>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	4a3b      	ldr	r2, [pc, #236]	@ (80050b4 <USB_SetTurnaroundTime+0x124>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d202      	bcs.n	8004fd0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004fca:	230e      	movs	r3, #14
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	e057      	b.n	8005080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	4a38      	ldr	r2, [pc, #224]	@ (80050b4 <USB_SetTurnaroundTime+0x124>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d306      	bcc.n	8004fe6 <USB_SetTurnaroundTime+0x56>
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4a37      	ldr	r2, [pc, #220]	@ (80050b8 <USB_SetTurnaroundTime+0x128>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d202      	bcs.n	8004fe6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004fe0:	230d      	movs	r3, #13
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	e04c      	b.n	8005080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	4a33      	ldr	r2, [pc, #204]	@ (80050b8 <USB_SetTurnaroundTime+0x128>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d306      	bcc.n	8004ffc <USB_SetTurnaroundTime+0x6c>
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	4a32      	ldr	r2, [pc, #200]	@ (80050bc <USB_SetTurnaroundTime+0x12c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d802      	bhi.n	8004ffc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004ff6:	230c      	movs	r3, #12
 8004ff8:	617b      	str	r3, [r7, #20]
 8004ffa:	e041      	b.n	8005080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	4a2f      	ldr	r2, [pc, #188]	@ (80050bc <USB_SetTurnaroundTime+0x12c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d906      	bls.n	8005012 <USB_SetTurnaroundTime+0x82>
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	4a2e      	ldr	r2, [pc, #184]	@ (80050c0 <USB_SetTurnaroundTime+0x130>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d802      	bhi.n	8005012 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800500c:	230b      	movs	r3, #11
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	e036      	b.n	8005080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	4a2a      	ldr	r2, [pc, #168]	@ (80050c0 <USB_SetTurnaroundTime+0x130>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d906      	bls.n	8005028 <USB_SetTurnaroundTime+0x98>
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	4a29      	ldr	r2, [pc, #164]	@ (80050c4 <USB_SetTurnaroundTime+0x134>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d802      	bhi.n	8005028 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005022:	230a      	movs	r3, #10
 8005024:	617b      	str	r3, [r7, #20]
 8005026:	e02b      	b.n	8005080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4a26      	ldr	r2, [pc, #152]	@ (80050c4 <USB_SetTurnaroundTime+0x134>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d906      	bls.n	800503e <USB_SetTurnaroundTime+0xae>
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4a25      	ldr	r2, [pc, #148]	@ (80050c8 <USB_SetTurnaroundTime+0x138>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d202      	bcs.n	800503e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005038:	2309      	movs	r3, #9
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	e020      	b.n	8005080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	4a21      	ldr	r2, [pc, #132]	@ (80050c8 <USB_SetTurnaroundTime+0x138>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d306      	bcc.n	8005054 <USB_SetTurnaroundTime+0xc4>
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	4a20      	ldr	r2, [pc, #128]	@ (80050cc <USB_SetTurnaroundTime+0x13c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d802      	bhi.n	8005054 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800504e:	2308      	movs	r3, #8
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	e015      	b.n	8005080 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4a1d      	ldr	r2, [pc, #116]	@ (80050cc <USB_SetTurnaroundTime+0x13c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d906      	bls.n	800506a <USB_SetTurnaroundTime+0xda>
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4a1c      	ldr	r2, [pc, #112]	@ (80050d0 <USB_SetTurnaroundTime+0x140>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d202      	bcs.n	800506a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005064:	2307      	movs	r3, #7
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	e00a      	b.n	8005080 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800506a:	2306      	movs	r3, #6
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	e007      	b.n	8005080 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d102      	bne.n	800507c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005076:	2309      	movs	r3, #9
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	e001      	b.n	8005080 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800507c:	2309      	movs	r3, #9
 800507e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	029b      	lsls	r3, r3, #10
 8005094:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005098:	431a      	orrs	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	371c      	adds	r7, #28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	00d8acbf 	.word	0x00d8acbf
 80050b0:	00e4e1c0 	.word	0x00e4e1c0
 80050b4:	00f42400 	.word	0x00f42400
 80050b8:	01067380 	.word	0x01067380
 80050bc:	011a499f 	.word	0x011a499f
 80050c0:	01312cff 	.word	0x01312cff
 80050c4:	014ca43f 	.word	0x014ca43f
 80050c8:	016e3600 	.word	0x016e3600
 80050cc:	01a6ab1f 	.word	0x01a6ab1f
 80050d0:	01e84800 	.word	0x01e84800

080050d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f043 0201 	orr.w	r2, r3, #1
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f023 0201 	bic.w	r2, r3, #1
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d115      	bne.n	8005166 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005146:	200a      	movs	r0, #10
 8005148:	f7fb ff6c 	bl	8001024 <HAL_Delay>
      ms += 10U;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	330a      	adds	r3, #10
 8005150:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f001 f939 	bl	80063ca <USB_GetMode>
 8005158:	4603      	mov	r3, r0
 800515a:	2b01      	cmp	r3, #1
 800515c:	d01e      	beq.n	800519c <USB_SetCurrentMode+0x84>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2bc7      	cmp	r3, #199	@ 0xc7
 8005162:	d9f0      	bls.n	8005146 <USB_SetCurrentMode+0x2e>
 8005164:	e01a      	b.n	800519c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005166:	78fb      	ldrb	r3, [r7, #3]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d115      	bne.n	8005198 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005178:	200a      	movs	r0, #10
 800517a:	f7fb ff53 	bl	8001024 <HAL_Delay>
      ms += 10U;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	330a      	adds	r3, #10
 8005182:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f001 f920 	bl	80063ca <USB_GetMode>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d005      	beq.n	800519c <USB_SetCurrentMode+0x84>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2bc7      	cmp	r3, #199	@ 0xc7
 8005194:	d9f0      	bls.n	8005178 <USB_SetCurrentMode+0x60>
 8005196:	e001      	b.n	800519c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e005      	b.n	80051a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2bc8      	cmp	r3, #200	@ 0xc8
 80051a0:	d101      	bne.n	80051a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051b0:	b084      	sub	sp, #16
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b086      	sub	sp, #24
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80051be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80051ca:	2300      	movs	r3, #0
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	e009      	b.n	80051e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	3340      	adds	r3, #64	@ 0x40
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	2200      	movs	r2, #0
 80051dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	3301      	adds	r3, #1
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	2b0e      	cmp	r3, #14
 80051e8:	d9f2      	bls.n	80051d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80051ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d11c      	bne.n	800522c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005200:	f043 0302 	orr.w	r3, r3, #2
 8005204:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005216:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005222:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	639a      	str	r2, [r3, #56]	@ 0x38
 800522a:	e00b      	b.n	8005244 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005230:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800524a:	461a      	mov	r2, r3
 800524c:	2300      	movs	r3, #0
 800524e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005250:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005254:	2b01      	cmp	r3, #1
 8005256:	d10d      	bne.n	8005274 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005258:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800525c:	2b00      	cmp	r3, #0
 800525e:	d104      	bne.n	800526a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005260:	2100      	movs	r1, #0
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f968 	bl	8005538 <USB_SetDevSpeed>
 8005268:	e008      	b.n	800527c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800526a:	2101      	movs	r1, #1
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f963 	bl	8005538 <USB_SetDevSpeed>
 8005272:	e003      	b.n	800527c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005274:	2103      	movs	r1, #3
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f95e 	bl	8005538 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800527c:	2110      	movs	r1, #16
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f8fa 	bl	8005478 <USB_FlushTxFifo>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f924 	bl	80054dc <USB_FlushRxFifo>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052a4:	461a      	mov	r2, r3
 80052a6:	2300      	movs	r3, #0
 80052a8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052b0:	461a      	mov	r2, r3
 80052b2:	2300      	movs	r3, #0
 80052b4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052bc:	461a      	mov	r2, r3
 80052be:	2300      	movs	r3, #0
 80052c0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052c2:	2300      	movs	r3, #0
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	e043      	b.n	8005350 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052de:	d118      	bne.n	8005312 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10a      	bne.n	80052fc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f2:	461a      	mov	r2, r3
 80052f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	e013      	b.n	8005324 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005308:	461a      	mov	r2, r3
 800530a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	e008      	b.n	8005324 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4413      	add	r3, r2
 800531a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800531e:	461a      	mov	r2, r3
 8005320:	2300      	movs	r3, #0
 8005322:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4413      	add	r3, r2
 800532c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005330:	461a      	mov	r2, r3
 8005332:	2300      	movs	r3, #0
 8005334:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4413      	add	r3, r2
 800533e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005342:	461a      	mov	r2, r3
 8005344:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005348:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	3301      	adds	r3, #1
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005354:	461a      	mov	r2, r3
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	4293      	cmp	r3, r2
 800535a:	d3b5      	bcc.n	80052c8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800535c:	2300      	movs	r3, #0
 800535e:	613b      	str	r3, [r7, #16]
 8005360:	e043      	b.n	80053ea <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005374:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005378:	d118      	bne.n	80053ac <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800538c:	461a      	mov	r2, r3
 800538e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	e013      	b.n	80053be <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a2:	461a      	mov	r2, r3
 80053a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	e008      	b.n	80053be <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b8:	461a      	mov	r2, r3
 80053ba:	2300      	movs	r3, #0
 80053bc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ca:	461a      	mov	r2, r3
 80053cc:	2300      	movs	r3, #0
 80053ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053dc:	461a      	mov	r2, r3
 80053de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80053e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	3301      	adds	r3, #1
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80053ee:	461a      	mov	r2, r3
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d3b5      	bcc.n	8005362 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005408:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005416:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005418:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800541c:	2b00      	cmp	r3, #0
 800541e:	d105      	bne.n	800542c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	f043 0210 	orr.w	r2, r3, #16
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	699a      	ldr	r2, [r3, #24]
 8005430:	4b10      	ldr	r3, [pc, #64]	@ (8005474 <USB_DevInit+0x2c4>)
 8005432:	4313      	orrs	r3, r2
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005438:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800543c:	2b00      	cmp	r3, #0
 800543e:	d005      	beq.n	800544c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	f043 0208 	orr.w	r2, r3, #8
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800544c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005450:	2b01      	cmp	r3, #1
 8005452:	d107      	bne.n	8005464 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800545c:	f043 0304 	orr.w	r3, r3, #4
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005464:	7dfb      	ldrb	r3, [r7, #23]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005470:	b004      	add	sp, #16
 8005472:	4770      	bx	lr
 8005474:	803c3800 	.word	0x803c3800

08005478 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	3301      	adds	r3, #1
 800548a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005492:	d901      	bls.n	8005498 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e01b      	b.n	80054d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	2b00      	cmp	r3, #0
 800549e:	daf2      	bge.n	8005486 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	019b      	lsls	r3, r3, #6
 80054a8:	f043 0220 	orr.w	r2, r3, #32
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	3301      	adds	r3, #1
 80054b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054bc:	d901      	bls.n	80054c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e006      	b.n	80054d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	d0f0      	beq.n	80054b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	3301      	adds	r3, #1
 80054ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054f4:	d901      	bls.n	80054fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e018      	b.n	800552c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	daf2      	bge.n	80054e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2210      	movs	r2, #16
 800550a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	3301      	adds	r3, #1
 8005510:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005518:	d901      	bls.n	800551e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e006      	b.n	800552c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	2b10      	cmp	r3, #16
 8005528:	d0f0      	beq.n	800550c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	68f9      	ldr	r1, [r7, #12]
 8005554:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005558:	4313      	orrs	r3, r2
 800555a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800556a:	b480      	push	{r7}
 800556c:	b087      	sub	sp, #28
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 0306 	and.w	r3, r3, #6
 8005582:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d102      	bne.n	8005590 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800558a:	2300      	movs	r3, #0
 800558c:	75fb      	strb	r3, [r7, #23]
 800558e:	e00a      	b.n	80055a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b02      	cmp	r3, #2
 8005594:	d002      	beq.n	800559c <USB_GetDevSpeed+0x32>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b06      	cmp	r3, #6
 800559a:	d102      	bne.n	80055a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800559c:	2302      	movs	r3, #2
 800559e:	75fb      	strb	r3, [r7, #23]
 80055a0:	e001      	b.n	80055a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80055a2:	230f      	movs	r3, #15
 80055a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80055a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	371c      	adds	r7, #28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	785b      	ldrb	r3, [r3, #1]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d13a      	bne.n	8005646 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055d6:	69da      	ldr	r2, [r3, #28]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	f003 030f 	and.w	r3, r3, #15
 80055e0:	2101      	movs	r1, #1
 80055e2:	fa01 f303 	lsl.w	r3, r1, r3
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	68f9      	ldr	r1, [r7, #12]
 80055ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055ee:	4313      	orrs	r3, r2
 80055f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d155      	bne.n	80056b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	791b      	ldrb	r3, [r3, #4]
 8005622:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005624:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	059b      	lsls	r3, r3, #22
 800562a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800562c:	4313      	orrs	r3, r2
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	0151      	lsls	r1, r2, #5
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	440a      	add	r2, r1
 8005636:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800563a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800563e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	e036      	b.n	80056b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800564c:	69da      	ldr	r2, [r3, #28]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	2101      	movs	r1, #1
 8005658:	fa01 f303 	lsl.w	r3, r1, r3
 800565c:	041b      	lsls	r3, r3, #16
 800565e:	68f9      	ldr	r1, [r7, #12]
 8005660:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005664:	4313      	orrs	r3, r2
 8005666:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d11a      	bne.n	80056b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4413      	add	r3, r2
 8005686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	791b      	ldrb	r3, [r3, #4]
 8005698:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800569a:	430b      	orrs	r3, r1
 800569c:	4313      	orrs	r3, r2
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	0151      	lsls	r1, r2, #5
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	440a      	add	r2, r1
 80056a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
	...

080056c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	785b      	ldrb	r3, [r3, #1]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d161      	bne.n	80057a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056f6:	d11f      	bne.n	8005738 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	0151      	lsls	r1, r2, #5
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	440a      	add	r2, r1
 800570e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005712:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005716:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	440a      	add	r2, r1
 800572e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005732:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005736:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800573e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	f003 030f 	and.w	r3, r3, #15
 8005748:	2101      	movs	r1, #1
 800574a:	fa01 f303 	lsl.w	r3, r1, r3
 800574e:	b29b      	uxth	r3, r3
 8005750:	43db      	mvns	r3, r3
 8005752:	68f9      	ldr	r1, [r7, #12]
 8005754:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005758:	4013      	ands	r3, r2
 800575a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005762:	69da      	ldr	r2, [r3, #28]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	f003 030f 	and.w	r3, r3, #15
 800576c:	2101      	movs	r1, #1
 800576e:	fa01 f303 	lsl.w	r3, r1, r3
 8005772:	b29b      	uxth	r3, r3
 8005774:	43db      	mvns	r3, r3
 8005776:	68f9      	ldr	r1, [r7, #12]
 8005778:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800577c:	4013      	ands	r3, r2
 800577e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	0159      	lsls	r1, r3, #5
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	440b      	add	r3, r1
 8005796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800579a:	4619      	mov	r1, r3
 800579c:	4b35      	ldr	r3, [pc, #212]	@ (8005874 <USB_DeactivateEndpoint+0x1b0>)
 800579e:	4013      	ands	r3, r2
 80057a0:	600b      	str	r3, [r1, #0]
 80057a2:	e060      	b.n	8005866 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057ba:	d11f      	bne.n	80057fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	0151      	lsls	r1, r2, #5
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	440a      	add	r2, r1
 80057d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80057da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	0151      	lsls	r1, r2, #5
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	440a      	add	r2, r1
 80057f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80057fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005802:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	f003 030f 	and.w	r3, r3, #15
 800580c:	2101      	movs	r1, #1
 800580e:	fa01 f303 	lsl.w	r3, r1, r3
 8005812:	041b      	lsls	r3, r3, #16
 8005814:	43db      	mvns	r3, r3
 8005816:	68f9      	ldr	r1, [r7, #12]
 8005818:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800581c:	4013      	ands	r3, r2
 800581e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005826:	69da      	ldr	r2, [r3, #28]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	f003 030f 	and.w	r3, r3, #15
 8005830:	2101      	movs	r1, #1
 8005832:	fa01 f303 	lsl.w	r3, r1, r3
 8005836:	041b      	lsls	r3, r3, #16
 8005838:	43db      	mvns	r3, r3
 800583a:	68f9      	ldr	r1, [r7, #12]
 800583c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005840:	4013      	ands	r3, r2
 8005842:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	0159      	lsls	r1, r3, #5
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	440b      	add	r3, r1
 800585a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800585e:	4619      	mov	r1, r3
 8005860:	4b05      	ldr	r3, [pc, #20]	@ (8005878 <USB_DeactivateEndpoint+0x1b4>)
 8005862:	4013      	ands	r3, r2
 8005864:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	ec337800 	.word	0xec337800
 8005878:	eff37800 	.word	0xeff37800

0800587c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08a      	sub	sp, #40	@ 0x28
 8005880:	af02      	add	r7, sp, #8
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	4613      	mov	r3, r2
 8005888:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	785b      	ldrb	r3, [r3, #1]
 8005898:	2b01      	cmp	r3, #1
 800589a:	f040 817a 	bne.w	8005b92 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d132      	bne.n	800590c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	0151      	lsls	r1, r2, #5
 80058b8:	69fa      	ldr	r2, [r7, #28]
 80058ba:	440a      	add	r2, r1
 80058bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058c0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80058c4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80058c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	0151      	lsls	r1, r2, #5
 80058dc:	69fa      	ldr	r2, [r7, #28]
 80058de:	440a      	add	r2, r1
 80058e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80058e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	0151      	lsls	r1, r2, #5
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	440a      	add	r2, r1
 8005900:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005904:	0cdb      	lsrs	r3, r3, #19
 8005906:	04db      	lsls	r3, r3, #19
 8005908:	6113      	str	r3, [r2, #16]
 800590a:	e092      	b.n	8005a32 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	0151      	lsls	r1, r2, #5
 800591e:	69fa      	ldr	r2, [r7, #28]
 8005920:	440a      	add	r2, r1
 8005922:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005926:	0cdb      	lsrs	r3, r3, #19
 8005928:	04db      	lsls	r3, r3, #19
 800592a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	0151      	lsls	r1, r2, #5
 800593e:	69fa      	ldr	r2, [r7, #28]
 8005940:	440a      	add	r2, r1
 8005942:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005946:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800594a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800594e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d11a      	bne.n	800598c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	691a      	ldr	r2, [r3, #16]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	429a      	cmp	r2, r3
 8005960:	d903      	bls.n	800596a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	0151      	lsls	r1, r2, #5
 800597c:	69fa      	ldr	r2, [r7, #28]
 800597e:	440a      	add	r2, r1
 8005980:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005984:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005988:	6113      	str	r3, [r2, #16]
 800598a:	e01b      	b.n	80059c4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005998:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	6919      	ldr	r1, [r3, #16]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	440b      	add	r3, r1
 80059a4:	1e59      	subs	r1, r3, #1
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80059ae:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80059b0:	4ba2      	ldr	r3, [pc, #648]	@ (8005c3c <USB_EPStartXfer+0x3c0>)
 80059b2:	400b      	ands	r3, r1
 80059b4:	69b9      	ldr	r1, [r7, #24]
 80059b6:	0148      	lsls	r0, r1, #5
 80059b8:	69f9      	ldr	r1, [r7, #28]
 80059ba:	4401      	add	r1, r0
 80059bc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80059c0:	4313      	orrs	r3, r2
 80059c2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059d0:	691a      	ldr	r2, [r3, #16]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059da:	69b9      	ldr	r1, [r7, #24]
 80059dc:	0148      	lsls	r0, r1, #5
 80059de:	69f9      	ldr	r1, [r7, #28]
 80059e0:	4401      	add	r1, r0
 80059e2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80059e6:	4313      	orrs	r3, r2
 80059e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	791b      	ldrb	r3, [r3, #4]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d11f      	bne.n	8005a32 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	0151      	lsls	r1, r2, #5
 8005a04:	69fa      	ldr	r2, [r7, #28]
 8005a06:	440a      	add	r2, r1
 8005a08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a0c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005a10:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	0151      	lsls	r1, r2, #5
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	440a      	add	r2, r1
 8005a28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a2c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005a30:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005a32:	79fb      	ldrb	r3, [r7, #7]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d14b      	bne.n	8005ad0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d009      	beq.n	8005a54 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	791b      	ldrb	r3, [r3, #4]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d128      	bne.n	8005aae <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d110      	bne.n	8005a8e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	0151      	lsls	r1, r2, #5
 8005a7e:	69fa      	ldr	r2, [r7, #28]
 8005a80:	440a      	add	r2, r1
 8005a82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a86:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	e00f      	b.n	8005aae <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	0151      	lsls	r1, r2, #5
 8005aa0:	69fa      	ldr	r2, [r7, #28]
 8005aa2:	440a      	add	r2, r1
 8005aa4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005aac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	0151      	lsls	r1, r2, #5
 8005ac0:	69fa      	ldr	r2, [r7, #28]
 8005ac2:	440a      	add	r2, r1
 8005ac4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ac8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005acc:	6013      	str	r3, [r2, #0]
 8005ace:	e165      	b.n	8005d9c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	0151      	lsls	r1, r2, #5
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	440a      	add	r2, r1
 8005ae6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005aee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	791b      	ldrb	r3, [r3, #4]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d015      	beq.n	8005b24 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 814d 	beq.w	8005d9c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	2101      	movs	r1, #1
 8005b14:	fa01 f303 	lsl.w	r3, r1, r3
 8005b18:	69f9      	ldr	r1, [r7, #28]
 8005b1a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	634b      	str	r3, [r1, #52]	@ 0x34
 8005b22:	e13b      	b.n	8005d9c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d110      	bne.n	8005b56 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	0151      	lsls	r1, r2, #5
 8005b46:	69fa      	ldr	r2, [r7, #28]
 8005b48:	440a      	add	r2, r1
 8005b4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b4e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005b52:	6013      	str	r3, [r2, #0]
 8005b54:	e00f      	b.n	8005b76 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	0151      	lsls	r1, r2, #5
 8005b68:	69fa      	ldr	r2, [r7, #28]
 8005b6a:	440a      	add	r2, r1
 8005b6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b74:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	68d9      	ldr	r1, [r3, #12]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	781a      	ldrb	r2, [r3, #0]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	b298      	uxth	r0, r3
 8005b84:	79fb      	ldrb	r3, [r7, #7]
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	4603      	mov	r3, r0
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 f9b8 	bl	8005f00 <USB_WritePacket>
 8005b90:	e104      	b.n	8005d9c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	0151      	lsls	r1, r2, #5
 8005ba4:	69fa      	ldr	r2, [r7, #28]
 8005ba6:	440a      	add	r2, r1
 8005ba8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bac:	0cdb      	lsrs	r3, r3, #19
 8005bae:	04db      	lsls	r3, r3, #19
 8005bb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	0151      	lsls	r1, r2, #5
 8005bc4:	69fa      	ldr	r2, [r7, #28]
 8005bc6:	440a      	add	r2, r1
 8005bc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bcc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005bd0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005bd4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d131      	bne.n	8005c40 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c00:	691a      	ldr	r2, [r3, #16]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c0a:	69b9      	ldr	r1, [r7, #24]
 8005c0c:	0148      	lsls	r0, r1, #5
 8005c0e:	69f9      	ldr	r1, [r7, #28]
 8005c10:	4401      	add	r1, r0
 8005c12:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005c16:	4313      	orrs	r3, r2
 8005c18:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	0151      	lsls	r1, r2, #5
 8005c2c:	69fa      	ldr	r2, [r7, #28]
 8005c2e:	440a      	add	r2, r1
 8005c30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c38:	6113      	str	r3, [r2, #16]
 8005c3a:	e061      	b.n	8005d00 <USB_EPStartXfer+0x484>
 8005c3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d123      	bne.n	8005c90 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c54:	691a      	ldr	r2, [r3, #16]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c5e:	69b9      	ldr	r1, [r7, #24]
 8005c60:	0148      	lsls	r0, r1, #5
 8005c62:	69f9      	ldr	r1, [r7, #28]
 8005c64:	4401      	add	r1, r0
 8005c66:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	0151      	lsls	r1, r2, #5
 8005c80:	69fa      	ldr	r2, [r7, #28]
 8005c82:	440a      	add	r2, r1
 8005c84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c8c:	6113      	str	r3, [r2, #16]
 8005c8e:	e037      	b.n	8005d00 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	4413      	add	r3, r2
 8005c9a:	1e5a      	subs	r2, r3, #1
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	8afa      	ldrh	r2, [r7, #22]
 8005cac:	fb03 f202 	mul.w	r2, r3, r2
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc0:	691a      	ldr	r2, [r3, #16]
 8005cc2:	8afb      	ldrh	r3, [r7, #22]
 8005cc4:	04d9      	lsls	r1, r3, #19
 8005cc6:	4b38      	ldr	r3, [pc, #224]	@ (8005da8 <USB_EPStartXfer+0x52c>)
 8005cc8:	400b      	ands	r3, r1
 8005cca:	69b9      	ldr	r1, [r7, #24]
 8005ccc:	0148      	lsls	r0, r1, #5
 8005cce:	69f9      	ldr	r1, [r7, #28]
 8005cd0:	4401      	add	r1, r0
 8005cd2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cf0:	69b9      	ldr	r1, [r7, #24]
 8005cf2:	0148      	lsls	r0, r1, #5
 8005cf4:	69f9      	ldr	r1, [r7, #28]
 8005cf6:	4401      	add	r1, r0
 8005cf8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005d00:	79fb      	ldrb	r3, [r7, #7]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d10d      	bne.n	8005d22 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d009      	beq.n	8005d22 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	68d9      	ldr	r1, [r3, #12]
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d1e:	460a      	mov	r2, r1
 8005d20:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	791b      	ldrb	r3, [r3, #4]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d128      	bne.n	8005d7c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d110      	bne.n	8005d5c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	69fa      	ldr	r2, [r7, #28]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d54:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	e00f      	b.n	8005d7c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	0151      	lsls	r1, r2, #5
 8005d6e:	69fa      	ldr	r2, [r7, #28]
 8005d70:	440a      	add	r2, r1
 8005d72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	0151      	lsls	r1, r2, #5
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	440a      	add	r2, r1
 8005d92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d96:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005d9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3720      	adds	r7, #32
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	1ff80000 	.word	0x1ff80000

08005dac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	785b      	ldrb	r3, [r3, #1]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d14a      	bne.n	8005e60 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005de2:	f040 8086 	bne.w	8005ef2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	7812      	ldrb	r2, [r2, #0]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e08:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	7812      	ldrb	r2, [r2, #0]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	3301      	adds	r3, #1
 8005e32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d902      	bls.n	8005e44 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	75fb      	strb	r3, [r7, #23]
          break;
 8005e42:	e056      	b.n	8005ef2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e5c:	d0e7      	beq.n	8005e2e <USB_EPStopXfer+0x82>
 8005e5e:	e048      	b.n	8005ef2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e78:	d13b      	bne.n	8005ef2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	7812      	ldrb	r2, [r2, #0]
 8005e8e:	0151      	lsls	r1, r2, #5
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	440a      	add	r2, r1
 8005e94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e9c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	7812      	ldrb	r2, [r2, #0]
 8005eb2:	0151      	lsls	r1, r2, #5
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ebc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ec0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d902      	bls.n	8005ed8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ed6:	e00c      	b.n	8005ef2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005eec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ef0:	d0e7      	beq.n	8005ec2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	371c      	adds	r7, #28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b089      	sub	sp, #36	@ 0x24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	4611      	mov	r1, r2
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	460b      	mov	r3, r1
 8005f10:	71fb      	strb	r3, [r7, #7]
 8005f12:	4613      	mov	r3, r2
 8005f14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d123      	bne.n	8005f6e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f26:	88bb      	ldrh	r3, [r7, #4]
 8005f28:	3303      	adds	r3, #3
 8005f2a:	089b      	lsrs	r3, r3, #2
 8005f2c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f2e:	2300      	movs	r3, #0
 8005f30:	61bb      	str	r3, [r7, #24]
 8005f32:	e018      	b.n	8005f66 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f34:	79fb      	ldrb	r3, [r7, #7]
 8005f36:	031a      	lsls	r2, r3, #12
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f40:	461a      	mov	r2, r3
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	3301      	adds	r3, #1
 8005f52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	3301      	adds	r3, #1
 8005f58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	3301      	adds	r3, #1
 8005f64:	61bb      	str	r3, [r7, #24]
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d3e2      	bcc.n	8005f34 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3724      	adds	r7, #36	@ 0x24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b08b      	sub	sp, #44	@ 0x2c
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	4613      	mov	r3, r2
 8005f88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f92:	88fb      	ldrh	r3, [r7, #6]
 8005f94:	089b      	lsrs	r3, r3, #2
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f9a:	88fb      	ldrh	r3, [r7, #6]
 8005f9c:	f003 0303 	and.w	r3, r3, #3
 8005fa0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	623b      	str	r3, [r7, #32]
 8005fa6:	e014      	b.n	8005fd2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc8:	3301      	adds	r3, #1
 8005fca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	623b      	str	r3, [r7, #32]
 8005fd2:	6a3a      	ldr	r2, [r7, #32]
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d3e6      	bcc.n	8005fa8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005fda:	8bfb      	ldrh	r3, [r7, #30]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d01e      	beq.n	800601e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fea:	461a      	mov	r2, r3
 8005fec:	f107 0310 	add.w	r3, r7, #16
 8005ff0:	6812      	ldr	r2, [r2, #0]
 8005ff2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8006000:	b2da      	uxtb	r2, r3
 8006002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006004:	701a      	strb	r2, [r3, #0]
      i++;
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	3301      	adds	r3, #1
 800600a:	623b      	str	r3, [r7, #32]
      pDest++;
 800600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600e:	3301      	adds	r3, #1
 8006010:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006012:	8bfb      	ldrh	r3, [r7, #30]
 8006014:	3b01      	subs	r3, #1
 8006016:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006018:	8bfb      	ldrh	r3, [r7, #30]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1ea      	bne.n	8005ff4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800601e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006020:	4618      	mov	r0, r3
 8006022:	372c      	adds	r7, #44	@ 0x2c
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	785b      	ldrb	r3, [r3, #1]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d12c      	bne.n	80060a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	db12      	blt.n	8006080 <USB_EPSetStall+0x54>
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00f      	beq.n	8006080 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	0151      	lsls	r1, r2, #5
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	440a      	add	r2, r1
 8006076:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800607a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800607e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	440a      	add	r2, r1
 8006096:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800609a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	e02b      	b.n	80060fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	db12      	blt.n	80060da <USB_EPSetStall+0xae>
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00f      	beq.n	80060da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	0151      	lsls	r1, r2, #5
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	440a      	add	r2, r1
 80060d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80060f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	785b      	ldrb	r3, [r3, #1]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d128      	bne.n	8006176 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	440a      	add	r2, r1
 800613a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800613e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006142:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	791b      	ldrb	r3, [r3, #4]
 8006148:	2b03      	cmp	r3, #3
 800614a:	d003      	beq.n	8006154 <USB_EPClearStall+0x4c>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	791b      	ldrb	r3, [r3, #4]
 8006150:	2b02      	cmp	r3, #2
 8006152:	d138      	bne.n	80061c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	0151      	lsls	r1, r2, #5
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	440a      	add	r2, r1
 800616a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800616e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	e027      	b.n	80061c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	0151      	lsls	r1, r2, #5
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	440a      	add	r2, r1
 800618c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006190:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006194:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	791b      	ldrb	r3, [r3, #4]
 800619a:	2b03      	cmp	r3, #3
 800619c:	d003      	beq.n	80061a6 <USB_EPClearStall+0x9e>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	791b      	ldrb	r3, [r3, #4]
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d10f      	bne.n	80061c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	0151      	lsls	r1, r2, #5
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	440a      	add	r2, r1
 80061bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80061f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006208:	68f9      	ldr	r1, [r7, #12]
 800620a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800620e:	4313      	orrs	r3, r2
 8006210:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800623a:	f023 0303 	bic.w	r3, r3, #3
 800623e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800624e:	f023 0302 	bic.w	r3, r3, #2
 8006252:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006262:	b480      	push	{r7}
 8006264:	b085      	sub	sp, #20
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800627c:	f023 0303 	bic.w	r3, r3, #3
 8006280:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006290:	f043 0302 	orr.w	r3, r3, #2
 8006294:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4013      	ands	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062bc:	68fb      	ldr	r3, [r7, #12]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b085      	sub	sp, #20
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	4013      	ands	r3, r2
 80062ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	0c1b      	lsrs	r3, r3, #16
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80062fe:	b480      	push	{r7}
 8006300:	b085      	sub	sp, #20
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	4013      	ands	r3, r2
 8006320:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	b29b      	uxth	r3, r3
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006332:	b480      	push	{r7}
 8006334:	b085      	sub	sp, #20
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	460b      	mov	r3, r1
 800633c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006342:	78fb      	ldrb	r3, [r7, #3]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4413      	add	r3, r2
 800634a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	4013      	ands	r3, r2
 800635e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006360:	68bb      	ldr	r3, [r7, #8]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800636e:	b480      	push	{r7}
 8006370:	b087      	sub	sp, #28
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	460b      	mov	r3, r1
 8006378:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800638e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006390:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006392:	78fb      	ldrb	r3, [r7, #3]
 8006394:	f003 030f 	and.w	r3, r3, #15
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	fa22 f303 	lsr.w	r3, r2, r3
 800639e:	01db      	lsls	r3, r3, #7
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80063a8:	78fb      	ldrb	r3, [r7, #3]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	4013      	ands	r3, r2
 80063ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063bc:	68bb      	ldr	r3, [r7, #8]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	371c      	adds	r7, #28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b083      	sub	sp, #12
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	f003 0301 	and.w	r3, r3, #1
}
 80063da:	4618      	mov	r0, r3
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b085      	sub	sp, #20
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006400:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006404:	f023 0307 	bic.w	r3, r3, #7
 8006408:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006418:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800641c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800642c:	b480      	push	{r7}
 800642e:	b087      	sub	sp, #28
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	460b      	mov	r3, r1
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	333c      	adds	r3, #60	@ 0x3c
 8006442:	3304      	adds	r3, #4
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	4a26      	ldr	r2, [pc, #152]	@ (80064e4 <USB_EP0_OutStart+0xb8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d90a      	bls.n	8006466 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800645c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006460:	d101      	bne.n	8006466 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	e037      	b.n	80064d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800646c:	461a      	mov	r2, r3
 800646e:	2300      	movs	r3, #0
 8006470:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006480:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006484:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006494:	f043 0318 	orr.w	r3, r3, #24
 8006498:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064a8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80064ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80064ae:	7afb      	ldrb	r3, [r7, #11]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d10f      	bne.n	80064d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ba:	461a      	mov	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064ce:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80064d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	371c      	adds	r7, #28
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	4f54300a 	.word	0x4f54300a

080064e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	3301      	adds	r3, #1
 80064f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006500:	d901      	bls.n	8006506 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e01b      	b.n	800653e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	daf2      	bge.n	80064f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f043 0201 	orr.w	r2, r3, #1
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3301      	adds	r3, #1
 8006522:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800652a:	d901      	bls.n	8006530 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e006      	b.n	800653e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b01      	cmp	r3, #1
 800653a:	d0f0      	beq.n	800651e <USB_CoreReset+0x36>

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
	...

0800654c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006558:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800655c:	f002 fca0 	bl	8008ea0 <USBD_static_malloc>
 8006560:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d109      	bne.n	800657c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	32b0      	adds	r2, #176	@ 0xb0
 8006572:	2100      	movs	r1, #0
 8006574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006578:	2302      	movs	r3, #2
 800657a:	e0d4      	b.n	8006726 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800657c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006580:	2100      	movs	r1, #0
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f002 fd0a 	bl	8008f9c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	32b0      	adds	r2, #176	@ 0xb0
 8006592:	68f9      	ldr	r1, [r7, #12]
 8006594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	32b0      	adds	r2, #176	@ 0xb0
 80065a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	7c1b      	ldrb	r3, [r3, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d138      	bne.n	8006626 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80065b4:	4b5e      	ldr	r3, [pc, #376]	@ (8006730 <USBD_CDC_Init+0x1e4>)
 80065b6:	7819      	ldrb	r1, [r3, #0]
 80065b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80065bc:	2202      	movs	r2, #2
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f002 fb4b 	bl	8008c5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80065c4:	4b5a      	ldr	r3, [pc, #360]	@ (8006730 <USBD_CDC_Init+0x1e4>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	f003 020f 	and.w	r2, r3, #15
 80065cc:	6879      	ldr	r1, [r7, #4]
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	440b      	add	r3, r1
 80065d8:	3324      	adds	r3, #36	@ 0x24
 80065da:	2201      	movs	r2, #1
 80065dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80065de:	4b55      	ldr	r3, [pc, #340]	@ (8006734 <USBD_CDC_Init+0x1e8>)
 80065e0:	7819      	ldrb	r1, [r3, #0]
 80065e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80065e6:	2202      	movs	r2, #2
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f002 fb36 	bl	8008c5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80065ee:	4b51      	ldr	r3, [pc, #324]	@ (8006734 <USBD_CDC_Init+0x1e8>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	f003 020f 	and.w	r2, r3, #15
 80065f6:	6879      	ldr	r1, [r7, #4]
 80065f8:	4613      	mov	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	440b      	add	r3, r1
 8006602:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006606:	2201      	movs	r2, #1
 8006608:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800660a:	4b4b      	ldr	r3, [pc, #300]	@ (8006738 <USBD_CDC_Init+0x1ec>)
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	f003 020f 	and.w	r2, r3, #15
 8006612:	6879      	ldr	r1, [r7, #4]
 8006614:	4613      	mov	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	440b      	add	r3, r1
 800661e:	3326      	adds	r3, #38	@ 0x26
 8006620:	2210      	movs	r2, #16
 8006622:	801a      	strh	r2, [r3, #0]
 8006624:	e035      	b.n	8006692 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006626:	4b42      	ldr	r3, [pc, #264]	@ (8006730 <USBD_CDC_Init+0x1e4>)
 8006628:	7819      	ldrb	r1, [r3, #0]
 800662a:	2340      	movs	r3, #64	@ 0x40
 800662c:	2202      	movs	r2, #2
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f002 fb13 	bl	8008c5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006634:	4b3e      	ldr	r3, [pc, #248]	@ (8006730 <USBD_CDC_Init+0x1e4>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	f003 020f 	and.w	r2, r3, #15
 800663c:	6879      	ldr	r1, [r7, #4]
 800663e:	4613      	mov	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	440b      	add	r3, r1
 8006648:	3324      	adds	r3, #36	@ 0x24
 800664a:	2201      	movs	r2, #1
 800664c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800664e:	4b39      	ldr	r3, [pc, #228]	@ (8006734 <USBD_CDC_Init+0x1e8>)
 8006650:	7819      	ldrb	r1, [r3, #0]
 8006652:	2340      	movs	r3, #64	@ 0x40
 8006654:	2202      	movs	r2, #2
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f002 faff 	bl	8008c5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800665c:	4b35      	ldr	r3, [pc, #212]	@ (8006734 <USBD_CDC_Init+0x1e8>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	f003 020f 	and.w	r2, r3, #15
 8006664:	6879      	ldr	r1, [r7, #4]
 8006666:	4613      	mov	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	440b      	add	r3, r1
 8006670:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006674:	2201      	movs	r2, #1
 8006676:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006678:	4b2f      	ldr	r3, [pc, #188]	@ (8006738 <USBD_CDC_Init+0x1ec>)
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	f003 020f 	and.w	r2, r3, #15
 8006680:	6879      	ldr	r1, [r7, #4]
 8006682:	4613      	mov	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	440b      	add	r3, r1
 800668c:	3326      	adds	r3, #38	@ 0x26
 800668e:	2210      	movs	r2, #16
 8006690:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006692:	4b29      	ldr	r3, [pc, #164]	@ (8006738 <USBD_CDC_Init+0x1ec>)
 8006694:	7819      	ldrb	r1, [r3, #0]
 8006696:	2308      	movs	r3, #8
 8006698:	2203      	movs	r2, #3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f002 fadd 	bl	8008c5a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80066a0:	4b25      	ldr	r3, [pc, #148]	@ (8006738 <USBD_CDC_Init+0x1ec>)
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	f003 020f 	and.w	r2, r3, #15
 80066a8:	6879      	ldr	r1, [r7, #4]
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	440b      	add	r3, r1
 80066b4:	3324      	adds	r3, #36	@ 0x24
 80066b6:	2201      	movs	r2, #1
 80066b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	33b0      	adds	r3, #176	@ 0xb0
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80066f0:	2302      	movs	r3, #2
 80066f2:	e018      	b.n	8006726 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	7c1b      	ldrb	r3, [r3, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10a      	bne.n	8006712 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006734 <USBD_CDC_Init+0x1e8>)
 80066fe:	7819      	ldrb	r1, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006706:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f002 fb94 	bl	8008e38 <USBD_LL_PrepareReceive>
 8006710:	e008      	b.n	8006724 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006712:	4b08      	ldr	r3, [pc, #32]	@ (8006734 <USBD_CDC_Init+0x1e8>)
 8006714:	7819      	ldrb	r1, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800671c:	2340      	movs	r3, #64	@ 0x40
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f002 fb8a 	bl	8008e38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	20000093 	.word	0x20000093
 8006734:	20000094 	.word	0x20000094
 8006738:	20000095 	.word	0x20000095

0800673c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006748:	4b3a      	ldr	r3, [pc, #232]	@ (8006834 <USBD_CDC_DeInit+0xf8>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f002 faa9 	bl	8008ca6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006754:	4b37      	ldr	r3, [pc, #220]	@ (8006834 <USBD_CDC_DeInit+0xf8>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	f003 020f 	and.w	r2, r3, #15
 800675c:	6879      	ldr	r1, [r7, #4]
 800675e:	4613      	mov	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	440b      	add	r3, r1
 8006768:	3324      	adds	r3, #36	@ 0x24
 800676a:	2200      	movs	r2, #0
 800676c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800676e:	4b32      	ldr	r3, [pc, #200]	@ (8006838 <USBD_CDC_DeInit+0xfc>)
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	4619      	mov	r1, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f002 fa96 	bl	8008ca6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800677a:	4b2f      	ldr	r3, [pc, #188]	@ (8006838 <USBD_CDC_DeInit+0xfc>)
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	f003 020f 	and.w	r2, r3, #15
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	4613      	mov	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	440b      	add	r3, r1
 800678e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006792:	2200      	movs	r2, #0
 8006794:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006796:	4b29      	ldr	r3, [pc, #164]	@ (800683c <USBD_CDC_DeInit+0x100>)
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	4619      	mov	r1, r3
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f002 fa82 	bl	8008ca6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80067a2:	4b26      	ldr	r3, [pc, #152]	@ (800683c <USBD_CDC_DeInit+0x100>)
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	f003 020f 	and.w	r2, r3, #15
 80067aa:	6879      	ldr	r1, [r7, #4]
 80067ac:	4613      	mov	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	440b      	add	r3, r1
 80067b6:	3324      	adds	r3, #36	@ 0x24
 80067b8:	2200      	movs	r2, #0
 80067ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80067bc:	4b1f      	ldr	r3, [pc, #124]	@ (800683c <USBD_CDC_DeInit+0x100>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	f003 020f 	and.w	r2, r3, #15
 80067c4:	6879      	ldr	r1, [r7, #4]
 80067c6:	4613      	mov	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	440b      	add	r3, r1
 80067d0:	3326      	adds	r3, #38	@ 0x26
 80067d2:	2200      	movs	r2, #0
 80067d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	32b0      	adds	r2, #176	@ 0xb0
 80067e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01f      	beq.n	8006828 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	33b0      	adds	r3, #176	@ 0xb0
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	32b0      	adds	r2, #176	@ 0xb0
 8006806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800680a:	4618      	mov	r0, r3
 800680c:	f002 fb56 	bl	8008ebc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	32b0      	adds	r2, #176	@ 0xb0
 800681a:	2100      	movs	r1, #0
 800681c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	20000093 	.word	0x20000093
 8006838:	20000094 	.word	0x20000094
 800683c:	20000095 	.word	0x20000095

08006840 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	32b0      	adds	r2, #176	@ 0xb0
 8006854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006858:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d101      	bne.n	8006870 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800686c:	2303      	movs	r3, #3
 800686e:	e0bf      	b.n	80069f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006878:	2b00      	cmp	r3, #0
 800687a:	d050      	beq.n	800691e <USBD_CDC_Setup+0xde>
 800687c:	2b20      	cmp	r3, #32
 800687e:	f040 80af 	bne.w	80069e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	88db      	ldrh	r3, [r3, #6]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d03a      	beq.n	8006900 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	b25b      	sxtb	r3, r3
 8006890:	2b00      	cmp	r3, #0
 8006892:	da1b      	bge.n	80068cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	33b0      	adds	r3, #176	@ 0xb0
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80068aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	88d2      	ldrh	r2, [r2, #6]
 80068b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	88db      	ldrh	r3, [r3, #6]
 80068b6:	2b07      	cmp	r3, #7
 80068b8:	bf28      	it	cs
 80068ba:	2307      	movcs	r3, #7
 80068bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	89fa      	ldrh	r2, [r7, #14]
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 fd87 	bl	80083d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80068ca:	e090      	b.n	80069ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	785a      	ldrb	r2, [r3, #1]
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	88db      	ldrh	r3, [r3, #6]
 80068da:	2b3f      	cmp	r3, #63	@ 0x3f
 80068dc:	d803      	bhi.n	80068e6 <USBD_CDC_Setup+0xa6>
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	88db      	ldrh	r3, [r3, #6]
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	e000      	b.n	80068e8 <USBD_CDC_Setup+0xa8>
 80068e6:	2240      	movs	r2, #64	@ 0x40
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80068ee:	6939      	ldr	r1, [r7, #16]
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80068f6:	461a      	mov	r2, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f001 fd99 	bl	8008430 <USBD_CtlPrepareRx>
      break;
 80068fe:	e076      	b.n	80069ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	33b0      	adds	r3, #176	@ 0xb0
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	7850      	ldrb	r0, [r2, #1]
 8006916:	2200      	movs	r2, #0
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	4798      	blx	r3
      break;
 800691c:	e067      	b.n	80069ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	785b      	ldrb	r3, [r3, #1]
 8006922:	2b0b      	cmp	r3, #11
 8006924:	d851      	bhi.n	80069ca <USBD_CDC_Setup+0x18a>
 8006926:	a201      	add	r2, pc, #4	@ (adr r2, 800692c <USBD_CDC_Setup+0xec>)
 8006928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692c:	0800695d 	.word	0x0800695d
 8006930:	080069d9 	.word	0x080069d9
 8006934:	080069cb 	.word	0x080069cb
 8006938:	080069cb 	.word	0x080069cb
 800693c:	080069cb 	.word	0x080069cb
 8006940:	080069cb 	.word	0x080069cb
 8006944:	080069cb 	.word	0x080069cb
 8006948:	080069cb 	.word	0x080069cb
 800694c:	080069cb 	.word	0x080069cb
 8006950:	080069cb 	.word	0x080069cb
 8006954:	08006987 	.word	0x08006987
 8006958:	080069b1 	.word	0x080069b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b03      	cmp	r3, #3
 8006966:	d107      	bne.n	8006978 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006968:	f107 030a 	add.w	r3, r7, #10
 800696c:	2202      	movs	r2, #2
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f001 fd31 	bl	80083d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006976:	e032      	b.n	80069de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f001 fcbb 	bl	80082f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006980:	2303      	movs	r3, #3
 8006982:	75fb      	strb	r3, [r7, #23]
          break;
 8006984:	e02b      	b.n	80069de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b03      	cmp	r3, #3
 8006990:	d107      	bne.n	80069a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006992:	f107 030d 	add.w	r3, r7, #13
 8006996:	2201      	movs	r2, #1
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 fd1c 	bl	80083d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069a0:	e01d      	b.n	80069de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 fca6 	bl	80082f6 <USBD_CtlError>
            ret = USBD_FAIL;
 80069aa:	2303      	movs	r3, #3
 80069ac:	75fb      	strb	r3, [r7, #23]
          break;
 80069ae:	e016      	b.n	80069de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d00f      	beq.n	80069dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f001 fc99 	bl	80082f6 <USBD_CtlError>
            ret = USBD_FAIL;
 80069c4:	2303      	movs	r3, #3
 80069c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80069c8:	e008      	b.n	80069dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f001 fc92 	bl	80082f6 <USBD_CtlError>
          ret = USBD_FAIL;
 80069d2:	2303      	movs	r3, #3
 80069d4:	75fb      	strb	r3, [r7, #23]
          break;
 80069d6:	e002      	b.n	80069de <USBD_CDC_Setup+0x19e>
          break;
 80069d8:	bf00      	nop
 80069da:	e008      	b.n	80069ee <USBD_CDC_Setup+0x1ae>
          break;
 80069dc:	bf00      	nop
      }
      break;
 80069de:	e006      	b.n	80069ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80069e0:	6839      	ldr	r1, [r7, #0]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f001 fc87 	bl	80082f6 <USBD_CtlError>
      ret = USBD_FAIL;
 80069e8:	2303      	movs	r3, #3
 80069ea:	75fb      	strb	r3, [r7, #23]
      break;
 80069ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	460b      	mov	r3, r1
 8006a02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006a0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	32b0      	adds	r2, #176	@ 0xb0
 8006a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e065      	b.n	8006aee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	32b0      	adds	r2, #176	@ 0xb0
 8006a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a30:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a32:	78fb      	ldrb	r3, [r7, #3]
 8006a34:	f003 020f 	and.w	r2, r3, #15
 8006a38:	6879      	ldr	r1, [r7, #4]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	440b      	add	r3, r1
 8006a44:	3318      	adds	r3, #24
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d02f      	beq.n	8006aac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006a4c:	78fb      	ldrb	r3, [r7, #3]
 8006a4e:	f003 020f 	and.w	r2, r3, #15
 8006a52:	6879      	ldr	r1, [r7, #4]
 8006a54:	4613      	mov	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	440b      	add	r3, r1
 8006a5e:	3318      	adds	r3, #24
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	78fb      	ldrb	r3, [r7, #3]
 8006a64:	f003 010f 	and.w	r1, r3, #15
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	00db      	lsls	r3, r3, #3
 8006a6e:	440b      	add	r3, r1
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4403      	add	r3, r0
 8006a74:	331c      	adds	r3, #28
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a7c:	fb01 f303 	mul.w	r3, r1, r3
 8006a80:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d112      	bne.n	8006aac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006a86:	78fb      	ldrb	r3, [r7, #3]
 8006a88:	f003 020f 	and.w	r2, r3, #15
 8006a8c:	6879      	ldr	r1, [r7, #4]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	440b      	add	r3, r1
 8006a98:	3318      	adds	r3, #24
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a9e:	78f9      	ldrb	r1, [r7, #3]
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f002 f9a6 	bl	8008df6 <USBD_LL_Transmit>
 8006aaa:	e01f      	b.n	8006aec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	33b0      	adds	r3, #176	@ 0xb0
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d010      	beq.n	8006aec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	33b0      	adds	r3, #176	@ 0xb0
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006ae8:	78fa      	ldrb	r2, [r7, #3]
 8006aea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b084      	sub	sp, #16
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	460b      	mov	r3, r1
 8006b00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	32b0      	adds	r2, #176	@ 0xb0
 8006b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	32b0      	adds	r2, #176	@ 0xb0
 8006b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e01a      	b.n	8006b5e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b28:	78fb      	ldrb	r3, [r7, #3]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f002 f9a4 	bl	8008e7a <USBD_LL_GetRxDataSize>
 8006b32:	4602      	mov	r2, r0
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	33b0      	adds	r3, #176	@ 0xb0
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006b58:	4611      	mov	r1, r2
 8006b5a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b084      	sub	sp, #16
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	32b0      	adds	r2, #176	@ 0xb0
 8006b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e024      	b.n	8006bd2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	33b0      	adds	r3, #176	@ 0xb0
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d019      	beq.n	8006bd0 <USBD_CDC_EP0_RxReady+0x6a>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006ba2:	2bff      	cmp	r3, #255	@ 0xff
 8006ba4:	d014      	beq.n	8006bd0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	33b0      	adds	r3, #176	@ 0xb0
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006bbe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006bc6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	22ff      	movs	r2, #255	@ 0xff
 8006bcc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006be4:	2182      	movs	r1, #130	@ 0x82
 8006be6:	4818      	ldr	r0, [pc, #96]	@ (8006c48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006be8:	f000 fd4f 	bl	800768a <USBD_GetEpDesc>
 8006bec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006bee:	2101      	movs	r1, #1
 8006bf0:	4815      	ldr	r0, [pc, #84]	@ (8006c48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006bf2:	f000 fd4a 	bl	800768a <USBD_GetEpDesc>
 8006bf6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006bf8:	2181      	movs	r1, #129	@ 0x81
 8006bfa:	4813      	ldr	r0, [pc, #76]	@ (8006c48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006bfc:	f000 fd45 	bl	800768a <USBD_GetEpDesc>
 8006c00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	2210      	movs	r2, #16
 8006c0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d006      	beq.n	8006c22 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c1c:	711a      	strb	r2, [r3, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d006      	beq.n	8006c36 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c30:	711a      	strb	r2, [r3, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2243      	movs	r2, #67	@ 0x43
 8006c3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c3c:	4b02      	ldr	r3, [pc, #8]	@ (8006c48 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20000050 	.word	0x20000050

08006c4c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c54:	2182      	movs	r1, #130	@ 0x82
 8006c56:	4818      	ldr	r0, [pc, #96]	@ (8006cb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c58:	f000 fd17 	bl	800768a <USBD_GetEpDesc>
 8006c5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c5e:	2101      	movs	r1, #1
 8006c60:	4815      	ldr	r0, [pc, #84]	@ (8006cb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c62:	f000 fd12 	bl	800768a <USBD_GetEpDesc>
 8006c66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c68:	2181      	movs	r1, #129	@ 0x81
 8006c6a:	4813      	ldr	r0, [pc, #76]	@ (8006cb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c6c:	f000 fd0d 	bl	800768a <USBD_GetEpDesc>
 8006c70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	2210      	movs	r2, #16
 8006c7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d006      	beq.n	8006c92 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	2200      	movs	r2, #0
 8006c88:	711a      	strb	r2, [r3, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f042 0202 	orr.w	r2, r2, #2
 8006c90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d006      	beq.n	8006ca6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	711a      	strb	r2, [r3, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f042 0202 	orr.w	r2, r2, #2
 8006ca4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2243      	movs	r2, #67	@ 0x43
 8006caa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006cac:	4b02      	ldr	r3, [pc, #8]	@ (8006cb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20000050 	.word	0x20000050

08006cbc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cc4:	2182      	movs	r1, #130	@ 0x82
 8006cc6:	4818      	ldr	r0, [pc, #96]	@ (8006d28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cc8:	f000 fcdf 	bl	800768a <USBD_GetEpDesc>
 8006ccc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cce:	2101      	movs	r1, #1
 8006cd0:	4815      	ldr	r0, [pc, #84]	@ (8006d28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cd2:	f000 fcda 	bl	800768a <USBD_GetEpDesc>
 8006cd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cd8:	2181      	movs	r1, #129	@ 0x81
 8006cda:	4813      	ldr	r0, [pc, #76]	@ (8006d28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cdc:	f000 fcd5 	bl	800768a <USBD_GetEpDesc>
 8006ce0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d002      	beq.n	8006cee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2210      	movs	r2, #16
 8006cec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d006      	beq.n	8006d02 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cfc:	711a      	strb	r2, [r3, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d006      	beq.n	8006d16 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d10:	711a      	strb	r2, [r3, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2243      	movs	r2, #67	@ 0x43
 8006d1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d1c:	4b02      	ldr	r3, [pc, #8]	@ (8006d28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3718      	adds	r7, #24
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	20000050 	.word	0x20000050

08006d2c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	220a      	movs	r2, #10
 8006d38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d3a:	4b03      	ldr	r3, [pc, #12]	@ (8006d48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	2000000c 	.word	0x2000000c

08006d4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e009      	b.n	8006d74 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	33b0      	adds	r3, #176	@ 0xb0
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	32b0      	adds	r2, #176	@ 0xb0
 8006d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d9a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e008      	b.n	8006db8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	371c      	adds	r7, #28
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	32b0      	adds	r2, #176	@ 0xb0
 8006dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ddc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e004      	b.n	8006df2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
	...

08006e00 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	32b0      	adds	r2, #176	@ 0xb0
 8006e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e16:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e025      	b.n	8006e72 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d11f      	bne.n	8006e70 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006e38:	4b10      	ldr	r3, [pc, #64]	@ (8006e7c <USBD_CDC_TransmitPacket+0x7c>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	f003 020f 	and.w	r2, r3, #15
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4403      	add	r3, r0
 8006e52:	3318      	adds	r3, #24
 8006e54:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006e56:	4b09      	ldr	r3, [pc, #36]	@ (8006e7c <USBD_CDC_TransmitPacket+0x7c>)
 8006e58:	7819      	ldrb	r1, [r3, #0]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f001 ffc5 	bl	8008df6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	20000093 	.word	0x20000093

08006e80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	32b0      	adds	r2, #176	@ 0xb0
 8006e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e96:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	32b0      	adds	r2, #176	@ 0xb0
 8006ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e018      	b.n	8006ee0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	7c1b      	ldrb	r3, [r3, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10a      	bne.n	8006ecc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee8 <USBD_CDC_ReceivePacket+0x68>)
 8006eb8:	7819      	ldrb	r1, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ec0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f001 ffb7 	bl	8008e38 <USBD_LL_PrepareReceive>
 8006eca:	e008      	b.n	8006ede <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ecc:	4b06      	ldr	r3, [pc, #24]	@ (8006ee8 <USBD_CDC_ReceivePacket+0x68>)
 8006ece:	7819      	ldrb	r1, [r3, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ed6:	2340      	movs	r3, #64	@ 0x40
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f001 ffad 	bl	8008e38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	20000094 	.word	0x20000094

08006eec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e01f      	b.n	8006f44 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d003      	beq.n	8006f2a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	79fa      	ldrb	r2, [r7, #7]
 8006f36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f001 fe27 	bl	8008b8c <USBD_LL_Init>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e025      	b.n	8006fb0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	32ae      	adds	r2, #174	@ 0xae
 8006f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00f      	beq.n	8006fa0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	32ae      	adds	r2, #174	@ 0xae
 8006f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f90:	f107 020e 	add.w	r2, r7, #14
 8006f94:	4610      	mov	r0, r2
 8006f96:	4798      	blx	r3
 8006f98:	4602      	mov	r2, r0
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f001 fe2f 	bl	8008c24 <USBD_LL_Start>
 8006fc6:	4603      	mov	r3, r0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fd8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d009      	beq.n	8007014 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	78fa      	ldrb	r2, [r7, #3]
 800700a:	4611      	mov	r1, r2
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	4798      	blx	r3
 8007010:	4603      	mov	r3, r0
 8007012:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007014:	7bfb      	ldrb	r3, [r7, #15]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b084      	sub	sp, #16
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	460b      	mov	r3, r1
 8007028:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	78fa      	ldrb	r2, [r7, #3]
 8007038:	4611      	mov	r1, r2
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	4798      	blx	r3
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007044:	2303      	movs	r3, #3
 8007046:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007048:	7bfb      	ldrb	r3, [r7, #15]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	4618      	mov	r0, r3
 8007066:	f001 f90c 	bl	8008282 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007078:	461a      	mov	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007086:	f003 031f 	and.w	r3, r3, #31
 800708a:	2b02      	cmp	r3, #2
 800708c:	d01a      	beq.n	80070c4 <USBD_LL_SetupStage+0x72>
 800708e:	2b02      	cmp	r3, #2
 8007090:	d822      	bhi.n	80070d8 <USBD_LL_SetupStage+0x86>
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <USBD_LL_SetupStage+0x4a>
 8007096:	2b01      	cmp	r3, #1
 8007098:	d00a      	beq.n	80070b0 <USBD_LL_SetupStage+0x5e>
 800709a:	e01d      	b.n	80070d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070a2:	4619      	mov	r1, r3
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fb63 	bl	8007770 <USBD_StdDevReq>
 80070aa:	4603      	mov	r3, r0
 80070ac:	73fb      	strb	r3, [r7, #15]
      break;
 80070ae:	e020      	b.n	80070f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fbcb 	bl	8007854 <USBD_StdItfReq>
 80070be:	4603      	mov	r3, r0
 80070c0:	73fb      	strb	r3, [r7, #15]
      break;
 80070c2:	e016      	b.n	80070f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fc2d 	bl	800792c <USBD_StdEPReq>
 80070d2:	4603      	mov	r3, r0
 80070d4:	73fb      	strb	r3, [r7, #15]
      break;
 80070d6:	e00c      	b.n	80070f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80070de:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	4619      	mov	r1, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f001 fdfc 	bl	8008ce4 <USBD_LL_StallEP>
 80070ec:	4603      	mov	r3, r0
 80070ee:	73fb      	strb	r3, [r7, #15]
      break;
 80070f0:	bf00      	nop
  }

  return ret;
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	460b      	mov	r3, r1
 8007106:	607a      	str	r2, [r7, #4]
 8007108:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800710e:	7afb      	ldrb	r3, [r7, #11]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d16e      	bne.n	80071f2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800711a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007122:	2b03      	cmp	r3, #3
 8007124:	f040 8098 	bne.w	8007258 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	429a      	cmp	r2, r3
 8007132:	d913      	bls.n	800715c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	689a      	ldr	r2, [r3, #8]
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	1ad2      	subs	r2, r2, r3
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	68da      	ldr	r2, [r3, #12]
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	4293      	cmp	r3, r2
 800714c:	bf28      	it	cs
 800714e:	4613      	movcs	r3, r2
 8007150:	461a      	mov	r2, r3
 8007152:	6879      	ldr	r1, [r7, #4]
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f001 f988 	bl	800846a <USBD_CtlContinueRx>
 800715a:	e07d      	b.n	8007258 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007162:	f003 031f 	and.w	r3, r3, #31
 8007166:	2b02      	cmp	r3, #2
 8007168:	d014      	beq.n	8007194 <USBD_LL_DataOutStage+0x98>
 800716a:	2b02      	cmp	r3, #2
 800716c:	d81d      	bhi.n	80071aa <USBD_LL_DataOutStage+0xae>
 800716e:	2b00      	cmp	r3, #0
 8007170:	d002      	beq.n	8007178 <USBD_LL_DataOutStage+0x7c>
 8007172:	2b01      	cmp	r3, #1
 8007174:	d003      	beq.n	800717e <USBD_LL_DataOutStage+0x82>
 8007176:	e018      	b.n	80071aa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	75bb      	strb	r3, [r7, #22]
            break;
 800717c:	e018      	b.n	80071b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007184:	b2db      	uxtb	r3, r3
 8007186:	4619      	mov	r1, r3
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 fa64 	bl	8007656 <USBD_CoreFindIF>
 800718e:	4603      	mov	r3, r0
 8007190:	75bb      	strb	r3, [r7, #22]
            break;
 8007192:	e00d      	b.n	80071b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800719a:	b2db      	uxtb	r3, r3
 800719c:	4619      	mov	r1, r3
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 fa66 	bl	8007670 <USBD_CoreFindEP>
 80071a4:	4603      	mov	r3, r0
 80071a6:	75bb      	strb	r3, [r7, #22]
            break;
 80071a8:	e002      	b.n	80071b0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	75bb      	strb	r3, [r7, #22]
            break;
 80071ae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80071b0:	7dbb      	ldrb	r3, [r7, #22]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d119      	bne.n	80071ea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b03      	cmp	r3, #3
 80071c0:	d113      	bne.n	80071ea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80071c2:	7dba      	ldrb	r2, [r7, #22]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	32ae      	adds	r2, #174	@ 0xae
 80071c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00b      	beq.n	80071ea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80071d2:	7dba      	ldrb	r2, [r7, #22]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80071da:	7dba      	ldrb	r2, [r7, #22]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	32ae      	adds	r2, #174	@ 0xae
 80071e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f001 f94e 	bl	800848c <USBD_CtlSendStatus>
 80071f0:	e032      	b.n	8007258 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80071f2:	7afb      	ldrb	r3, [r7, #11]
 80071f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	4619      	mov	r1, r3
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f000 fa37 	bl	8007670 <USBD_CoreFindEP>
 8007202:	4603      	mov	r3, r0
 8007204:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007206:	7dbb      	ldrb	r3, [r7, #22]
 8007208:	2bff      	cmp	r3, #255	@ 0xff
 800720a:	d025      	beq.n	8007258 <USBD_LL_DataOutStage+0x15c>
 800720c:	7dbb      	ldrb	r3, [r7, #22]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d122      	bne.n	8007258 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b03      	cmp	r3, #3
 800721c:	d117      	bne.n	800724e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800721e:	7dba      	ldrb	r2, [r7, #22]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	32ae      	adds	r2, #174	@ 0xae
 8007224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00f      	beq.n	800724e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800722e:	7dba      	ldrb	r2, [r7, #22]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007236:	7dba      	ldrb	r2, [r7, #22]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	32ae      	adds	r2, #174	@ 0xae
 800723c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	7afa      	ldrb	r2, [r7, #11]
 8007244:	4611      	mov	r1, r2
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	4798      	blx	r3
 800724a:	4603      	mov	r3, r0
 800724c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800724e:	7dfb      	ldrb	r3, [r7, #23]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d001      	beq.n	8007258 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007254:	7dfb      	ldrb	r3, [r7, #23]
 8007256:	e000      	b.n	800725a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b086      	sub	sp, #24
 8007266:	af00      	add	r7, sp, #0
 8007268:	60f8      	str	r0, [r7, #12]
 800726a:	460b      	mov	r3, r1
 800726c:	607a      	str	r2, [r7, #4]
 800726e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007270:	7afb      	ldrb	r3, [r7, #11]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d16f      	bne.n	8007356 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	3314      	adds	r3, #20
 800727a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007282:	2b02      	cmp	r3, #2
 8007284:	d15a      	bne.n	800733c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	689a      	ldr	r2, [r3, #8]
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	429a      	cmp	r2, r3
 8007290:	d914      	bls.n	80072bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	689a      	ldr	r2, [r3, #8]
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	1ad2      	subs	r2, r2, r3
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	461a      	mov	r2, r3
 80072a6:	6879      	ldr	r1, [r7, #4]
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f001 f8b0 	bl	800840e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072ae:	2300      	movs	r3, #0
 80072b0:	2200      	movs	r2, #0
 80072b2:	2100      	movs	r1, #0
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f001 fdbf 	bl	8008e38 <USBD_LL_PrepareReceive>
 80072ba:	e03f      	b.n	800733c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	68da      	ldr	r2, [r3, #12]
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d11c      	bne.n	8007302 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d316      	bcc.n	8007302 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	685a      	ldr	r2, [r3, #4]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80072de:	429a      	cmp	r2, r3
 80072e0:	d20f      	bcs.n	8007302 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80072e2:	2200      	movs	r2, #0
 80072e4:	2100      	movs	r1, #0
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f001 f891 	bl	800840e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072f4:	2300      	movs	r3, #0
 80072f6:	2200      	movs	r2, #0
 80072f8:	2100      	movs	r1, #0
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f001 fd9c 	bl	8008e38 <USBD_LL_PrepareReceive>
 8007300:	e01c      	b.n	800733c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b03      	cmp	r3, #3
 800730c:	d10f      	bne.n	800732e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d009      	beq.n	800732e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800732e:	2180      	movs	r1, #128	@ 0x80
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f001 fcd7 	bl	8008ce4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f001 f8bb 	bl	80084b2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d03a      	beq.n	80073bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f7ff fe42 	bl	8006fd0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007354:	e032      	b.n	80073bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007356:	7afb      	ldrb	r3, [r7, #11]
 8007358:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800735c:	b2db      	uxtb	r3, r3
 800735e:	4619      	mov	r1, r3
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 f985 	bl	8007670 <USBD_CoreFindEP>
 8007366:	4603      	mov	r3, r0
 8007368:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800736a:	7dfb      	ldrb	r3, [r7, #23]
 800736c:	2bff      	cmp	r3, #255	@ 0xff
 800736e:	d025      	beq.n	80073bc <USBD_LL_DataInStage+0x15a>
 8007370:	7dfb      	ldrb	r3, [r7, #23]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d122      	bne.n	80073bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b03      	cmp	r3, #3
 8007380:	d11c      	bne.n	80073bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007382:	7dfa      	ldrb	r2, [r7, #23]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	32ae      	adds	r2, #174	@ 0xae
 8007388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d014      	beq.n	80073bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007392:	7dfa      	ldrb	r2, [r7, #23]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800739a:	7dfa      	ldrb	r2, [r7, #23]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	32ae      	adds	r2, #174	@ 0xae
 80073a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	7afa      	ldrb	r2, [r7, #11]
 80073a8:	4611      	mov	r1, r2
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	4798      	blx	r3
 80073ae:	4603      	mov	r3, r0
 80073b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80073b2:	7dbb      	ldrb	r3, [r7, #22]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80073b8:	7dbb      	ldrb	r3, [r7, #22]
 80073ba:	e000      	b.n	80073be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b084      	sub	sp, #16
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d014      	beq.n	800742c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00e      	beq.n	800742c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	6852      	ldr	r2, [r2, #4]
 800741a:	b2d2      	uxtb	r2, r2
 800741c:	4611      	mov	r1, r2
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	4798      	blx	r3
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d001      	beq.n	800742c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007428:	2303      	movs	r3, #3
 800742a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800742c:	2340      	movs	r3, #64	@ 0x40
 800742e:	2200      	movs	r2, #0
 8007430:	2100      	movs	r1, #0
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f001 fc11 	bl	8008c5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2240      	movs	r2, #64	@ 0x40
 8007444:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007448:	2340      	movs	r3, #64	@ 0x40
 800744a:	2200      	movs	r2, #0
 800744c:	2180      	movs	r1, #128	@ 0x80
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f001 fc03 	bl	8008c5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2240      	movs	r2, #64	@ 0x40
 800745e:	621a      	str	r2, [r3, #32]

  return ret;
 8007460:	7bfb      	ldrb	r3, [r7, #15]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	460b      	mov	r3, r1
 8007474:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	78fa      	ldrb	r2, [r7, #3]
 800747a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800748a:	b480      	push	{r7}
 800748c:	b083      	sub	sp, #12
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b04      	cmp	r3, #4
 800749c:	d006      	beq.n	80074ac <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2204      	movs	r2, #4
 80074b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	d106      	bne.n	80074e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b082      	sub	sp, #8
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b03      	cmp	r3, #3
 8007504:	d110      	bne.n	8007528 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00b      	beq.n	8007528 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b082      	sub	sp, #8
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	460b      	mov	r3, r1
 800753c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	32ae      	adds	r2, #174	@ 0xae
 8007548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d101      	bne.n	8007554 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007550:	2303      	movs	r3, #3
 8007552:	e01c      	b.n	800758e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b03      	cmp	r3, #3
 800755e:	d115      	bne.n	800758c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	32ae      	adds	r2, #174	@ 0xae
 800756a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00b      	beq.n	800758c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	32ae      	adds	r2, #174	@ 0xae
 800757e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007582:	6a1b      	ldr	r3, [r3, #32]
 8007584:	78fa      	ldrb	r2, [r7, #3]
 8007586:	4611      	mov	r1, r2
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b082      	sub	sp, #8
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	460b      	mov	r3, r1
 80075a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	32ae      	adds	r2, #174	@ 0xae
 80075ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e01c      	b.n	80075f2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b03      	cmp	r3, #3
 80075c2:	d115      	bne.n	80075f0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	32ae      	adds	r2, #174	@ 0xae
 80075ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00b      	beq.n	80075f0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	32ae      	adds	r2, #174	@ 0xae
 80075e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e8:	78fa      	ldrb	r2, [r7, #3]
 80075ea:	4611      	mov	r1, r2
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00e      	beq.n	800764c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	6852      	ldr	r2, [r2, #4]
 800763a:	b2d2      	uxtb	r2, r2
 800763c:	4611      	mov	r1, r2
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	4798      	blx	r3
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007648:	2303      	movs	r3, #3
 800764a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800764c:	7bfb      	ldrb	r3, [r7, #15]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
 800765e:	460b      	mov	r3, r1
 8007660:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007662:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007664:	4618      	mov	r0, r3
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	460b      	mov	r3, r1
 800767a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800767c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800767e:	4618      	mov	r0, r3
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b086      	sub	sp, #24
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	460b      	mov	r3, r1
 8007694:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800769e:	2300      	movs	r3, #0
 80076a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	885b      	ldrh	r3, [r3, #2]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	7812      	ldrb	r2, [r2, #0]
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d91f      	bls.n	80076f0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80076b6:	e013      	b.n	80076e0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80076b8:	f107 030a 	add.w	r3, r7, #10
 80076bc:	4619      	mov	r1, r3
 80076be:	6978      	ldr	r0, [r7, #20]
 80076c0:	f000 f81b 	bl	80076fa <USBD_GetNextDesc>
 80076c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	785b      	ldrb	r3, [r3, #1]
 80076ca:	2b05      	cmp	r3, #5
 80076cc:	d108      	bne.n	80076e0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	789b      	ldrb	r3, [r3, #2]
 80076d6:	78fa      	ldrb	r2, [r7, #3]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d008      	beq.n	80076ee <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80076dc:	2300      	movs	r3, #0
 80076de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	885b      	ldrh	r3, [r3, #2]
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	897b      	ldrh	r3, [r7, #10]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d8e5      	bhi.n	80076b8 <USBD_GetEpDesc+0x2e>
 80076ec:	e000      	b.n	80076f0 <USBD_GetEpDesc+0x66>
          break;
 80076ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80076f0:	693b      	ldr	r3, [r7, #16]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3718      	adds	r7, #24
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b085      	sub	sp, #20
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	7812      	ldrb	r2, [r2, #0]
 8007710:	4413      	add	r3, r2
 8007712:	b29a      	uxth	r2, r3
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	461a      	mov	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4413      	add	r3, r2
 8007722:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007724:	68fb      	ldr	r3, [r7, #12]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007732:	b480      	push	{r7}
 8007734:	b087      	sub	sp, #28
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	3301      	adds	r3, #1
 8007748:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007750:	8a3b      	ldrh	r3, [r7, #16]
 8007752:	021b      	lsls	r3, r3, #8
 8007754:	b21a      	sxth	r2, r3
 8007756:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800775a:	4313      	orrs	r3, r2
 800775c:	b21b      	sxth	r3, r3
 800775e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007760:	89fb      	ldrh	r3, [r7, #14]
}
 8007762:	4618      	mov	r0, r3
 8007764:	371c      	adds	r7, #28
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
	...

08007770 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007786:	2b40      	cmp	r3, #64	@ 0x40
 8007788:	d005      	beq.n	8007796 <USBD_StdDevReq+0x26>
 800778a:	2b40      	cmp	r3, #64	@ 0x40
 800778c:	d857      	bhi.n	800783e <USBD_StdDevReq+0xce>
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00f      	beq.n	80077b2 <USBD_StdDevReq+0x42>
 8007792:	2b20      	cmp	r3, #32
 8007794:	d153      	bne.n	800783e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	32ae      	adds	r2, #174	@ 0xae
 80077a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	4798      	blx	r3
 80077ac:	4603      	mov	r3, r0
 80077ae:	73fb      	strb	r3, [r7, #15]
      break;
 80077b0:	e04a      	b.n	8007848 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	785b      	ldrb	r3, [r3, #1]
 80077b6:	2b09      	cmp	r3, #9
 80077b8:	d83b      	bhi.n	8007832 <USBD_StdDevReq+0xc2>
 80077ba:	a201      	add	r2, pc, #4	@ (adr r2, 80077c0 <USBD_StdDevReq+0x50>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	08007815 	.word	0x08007815
 80077c4:	08007829 	.word	0x08007829
 80077c8:	08007833 	.word	0x08007833
 80077cc:	0800781f 	.word	0x0800781f
 80077d0:	08007833 	.word	0x08007833
 80077d4:	080077f3 	.word	0x080077f3
 80077d8:	080077e9 	.word	0x080077e9
 80077dc:	08007833 	.word	0x08007833
 80077e0:	0800780b 	.word	0x0800780b
 80077e4:	080077fd 	.word	0x080077fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fa3c 	bl	8007c68 <USBD_GetDescriptor>
          break;
 80077f0:	e024      	b.n	800783c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fba1 	bl	8007f3c <USBD_SetAddress>
          break;
 80077fa:	e01f      	b.n	800783c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fbe0 	bl	8007fc4 <USBD_SetConfig>
 8007804:	4603      	mov	r3, r0
 8007806:	73fb      	strb	r3, [r7, #15]
          break;
 8007808:	e018      	b.n	800783c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fc83 	bl	8008118 <USBD_GetConfig>
          break;
 8007812:	e013      	b.n	800783c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fcb4 	bl	8008184 <USBD_GetStatus>
          break;
 800781c:	e00e      	b.n	800783c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fce3 	bl	80081ec <USBD_SetFeature>
          break;
 8007826:	e009      	b.n	800783c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fd07 	bl	800823e <USBD_ClrFeature>
          break;
 8007830:	e004      	b.n	800783c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fd5e 	bl	80082f6 <USBD_CtlError>
          break;
 800783a:	bf00      	nop
      }
      break;
 800783c:	e004      	b.n	8007848 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fd58 	bl	80082f6 <USBD_CtlError>
      break;
 8007846:	bf00      	nop
  }

  return ret;
 8007848:	7bfb      	ldrb	r3, [r7, #15]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop

08007854 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800786a:	2b40      	cmp	r3, #64	@ 0x40
 800786c:	d005      	beq.n	800787a <USBD_StdItfReq+0x26>
 800786e:	2b40      	cmp	r3, #64	@ 0x40
 8007870:	d852      	bhi.n	8007918 <USBD_StdItfReq+0xc4>
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <USBD_StdItfReq+0x26>
 8007876:	2b20      	cmp	r3, #32
 8007878:	d14e      	bne.n	8007918 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007880:	b2db      	uxtb	r3, r3
 8007882:	3b01      	subs	r3, #1
 8007884:	2b02      	cmp	r3, #2
 8007886:	d840      	bhi.n	800790a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	889b      	ldrh	r3, [r3, #4]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b01      	cmp	r3, #1
 8007890:	d836      	bhi.n	8007900 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	889b      	ldrh	r3, [r3, #4]
 8007896:	b2db      	uxtb	r3, r3
 8007898:	4619      	mov	r1, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7ff fedb 	bl	8007656 <USBD_CoreFindIF>
 80078a0:	4603      	mov	r3, r0
 80078a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078a4:	7bbb      	ldrb	r3, [r7, #14]
 80078a6:	2bff      	cmp	r3, #255	@ 0xff
 80078a8:	d01d      	beq.n	80078e6 <USBD_StdItfReq+0x92>
 80078aa:	7bbb      	ldrb	r3, [r7, #14]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d11a      	bne.n	80078e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80078b0:	7bba      	ldrb	r2, [r7, #14]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	32ae      	adds	r2, #174	@ 0xae
 80078b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00f      	beq.n	80078e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80078c0:	7bba      	ldrb	r2, [r7, #14]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078c8:	7bba      	ldrb	r2, [r7, #14]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	32ae      	adds	r2, #174	@ 0xae
 80078ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	4798      	blx	r3
 80078da:	4603      	mov	r3, r0
 80078dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80078de:	e004      	b.n	80078ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80078e0:	2303      	movs	r3, #3
 80078e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80078e4:	e001      	b.n	80078ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80078e6:	2303      	movs	r3, #3
 80078e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	88db      	ldrh	r3, [r3, #6]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d110      	bne.n	8007914 <USBD_StdItfReq+0xc0>
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10d      	bne.n	8007914 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fdc7 	bl	800848c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80078fe:	e009      	b.n	8007914 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fcf7 	bl	80082f6 <USBD_CtlError>
          break;
 8007908:	e004      	b.n	8007914 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fcf2 	bl	80082f6 <USBD_CtlError>
          break;
 8007912:	e000      	b.n	8007916 <USBD_StdItfReq+0xc2>
          break;
 8007914:	bf00      	nop
      }
      break;
 8007916:	e004      	b.n	8007922 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fceb 	bl	80082f6 <USBD_CtlError>
      break;
 8007920:	bf00      	nop
  }

  return ret;
 8007922:	7bfb      	ldrb	r3, [r7, #15]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	889b      	ldrh	r3, [r3, #4]
 800793e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007948:	2b40      	cmp	r3, #64	@ 0x40
 800794a:	d007      	beq.n	800795c <USBD_StdEPReq+0x30>
 800794c:	2b40      	cmp	r3, #64	@ 0x40
 800794e:	f200 817f 	bhi.w	8007c50 <USBD_StdEPReq+0x324>
 8007952:	2b00      	cmp	r3, #0
 8007954:	d02a      	beq.n	80079ac <USBD_StdEPReq+0x80>
 8007956:	2b20      	cmp	r3, #32
 8007958:	f040 817a 	bne.w	8007c50 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800795c:	7bbb      	ldrb	r3, [r7, #14]
 800795e:	4619      	mov	r1, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f7ff fe85 	bl	8007670 <USBD_CoreFindEP>
 8007966:	4603      	mov	r3, r0
 8007968:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800796a:	7b7b      	ldrb	r3, [r7, #13]
 800796c:	2bff      	cmp	r3, #255	@ 0xff
 800796e:	f000 8174 	beq.w	8007c5a <USBD_StdEPReq+0x32e>
 8007972:	7b7b      	ldrb	r3, [r7, #13]
 8007974:	2b00      	cmp	r3, #0
 8007976:	f040 8170 	bne.w	8007c5a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800797a:	7b7a      	ldrb	r2, [r7, #13]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007982:	7b7a      	ldrb	r2, [r7, #13]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	32ae      	adds	r2, #174	@ 0xae
 8007988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 8163 	beq.w	8007c5a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007994:	7b7a      	ldrb	r2, [r7, #13]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	32ae      	adds	r2, #174	@ 0xae
 800799a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	4798      	blx	r3
 80079a6:	4603      	mov	r3, r0
 80079a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079aa:	e156      	b.n	8007c5a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	785b      	ldrb	r3, [r3, #1]
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d008      	beq.n	80079c6 <USBD_StdEPReq+0x9a>
 80079b4:	2b03      	cmp	r3, #3
 80079b6:	f300 8145 	bgt.w	8007c44 <USBD_StdEPReq+0x318>
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 809b 	beq.w	8007af6 <USBD_StdEPReq+0x1ca>
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d03c      	beq.n	8007a3e <USBD_StdEPReq+0x112>
 80079c4:	e13e      	b.n	8007c44 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d002      	beq.n	80079d8 <USBD_StdEPReq+0xac>
 80079d2:	2b03      	cmp	r3, #3
 80079d4:	d016      	beq.n	8007a04 <USBD_StdEPReq+0xd8>
 80079d6:	e02c      	b.n	8007a32 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00d      	beq.n	80079fa <USBD_StdEPReq+0xce>
 80079de:	7bbb      	ldrb	r3, [r7, #14]
 80079e0:	2b80      	cmp	r3, #128	@ 0x80
 80079e2:	d00a      	beq.n	80079fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f001 f97b 	bl	8008ce4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079ee:	2180      	movs	r1, #128	@ 0x80
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f001 f977 	bl	8008ce4 <USBD_LL_StallEP>
 80079f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079f8:	e020      	b.n	8007a3c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fc7a 	bl	80082f6 <USBD_CtlError>
              break;
 8007a02:	e01b      	b.n	8007a3c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	885b      	ldrh	r3, [r3, #2]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10e      	bne.n	8007a2a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00b      	beq.n	8007a2a <USBD_StdEPReq+0xfe>
 8007a12:	7bbb      	ldrb	r3, [r7, #14]
 8007a14:	2b80      	cmp	r3, #128	@ 0x80
 8007a16:	d008      	beq.n	8007a2a <USBD_StdEPReq+0xfe>
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	88db      	ldrh	r3, [r3, #6]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d104      	bne.n	8007a2a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 f95d 	bl	8008ce4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fd2e 	bl	800848c <USBD_CtlSendStatus>

              break;
 8007a30:	e004      	b.n	8007a3c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fc5e 	bl	80082f6 <USBD_CtlError>
              break;
 8007a3a:	bf00      	nop
          }
          break;
 8007a3c:	e107      	b.n	8007c4e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d002      	beq.n	8007a50 <USBD_StdEPReq+0x124>
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d016      	beq.n	8007a7c <USBD_StdEPReq+0x150>
 8007a4e:	e04b      	b.n	8007ae8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00d      	beq.n	8007a72 <USBD_StdEPReq+0x146>
 8007a56:	7bbb      	ldrb	r3, [r7, #14]
 8007a58:	2b80      	cmp	r3, #128	@ 0x80
 8007a5a:	d00a      	beq.n	8007a72 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f001 f93f 	bl	8008ce4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a66:	2180      	movs	r1, #128	@ 0x80
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 f93b 	bl	8008ce4 <USBD_LL_StallEP>
 8007a6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a70:	e040      	b.n	8007af4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fc3e 	bl	80082f6 <USBD_CtlError>
              break;
 8007a7a:	e03b      	b.n	8007af4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	885b      	ldrh	r3, [r3, #2]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d136      	bne.n	8007af2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
 8007a86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d004      	beq.n	8007a98 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
 8007a90:	4619      	mov	r1, r3
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f001 f945 	bl	8008d22 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fcf7 	bl	800848c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7ff fde4 	bl	8007670 <USBD_CoreFindEP>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007aac:	7b7b      	ldrb	r3, [r7, #13]
 8007aae:	2bff      	cmp	r3, #255	@ 0xff
 8007ab0:	d01f      	beq.n	8007af2 <USBD_StdEPReq+0x1c6>
 8007ab2:	7b7b      	ldrb	r3, [r7, #13]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d11c      	bne.n	8007af2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ab8:	7b7a      	ldrb	r2, [r7, #13]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007ac0:	7b7a      	ldrb	r2, [r7, #13]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	32ae      	adds	r2, #174	@ 0xae
 8007ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d010      	beq.n	8007af2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ad0:	7b7a      	ldrb	r2, [r7, #13]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	32ae      	adds	r2, #174	@ 0xae
 8007ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	4798      	blx	r3
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007ae6:	e004      	b.n	8007af2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007ae8:	6839      	ldr	r1, [r7, #0]
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fc03 	bl	80082f6 <USBD_CtlError>
              break;
 8007af0:	e000      	b.n	8007af4 <USBD_StdEPReq+0x1c8>
              break;
 8007af2:	bf00      	nop
          }
          break;
 8007af4:	e0ab      	b.n	8007c4e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d002      	beq.n	8007b08 <USBD_StdEPReq+0x1dc>
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d032      	beq.n	8007b6c <USBD_StdEPReq+0x240>
 8007b06:	e097      	b.n	8007c38 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d007      	beq.n	8007b1e <USBD_StdEPReq+0x1f2>
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
 8007b10:	2b80      	cmp	r3, #128	@ 0x80
 8007b12:	d004      	beq.n	8007b1e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fbed 	bl	80082f6 <USBD_CtlError>
                break;
 8007b1c:	e091      	b.n	8007c42 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	da0b      	bge.n	8007b3e <USBD_StdEPReq+0x212>
 8007b26:	7bbb      	ldrb	r3, [r7, #14]
 8007b28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	3310      	adds	r3, #16
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	4413      	add	r3, r2
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	e00b      	b.n	8007b56 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b3e:	7bbb      	ldrb	r3, [r7, #14]
 8007b40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b44:	4613      	mov	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4413      	add	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	4413      	add	r3, r2
 8007b54:	3304      	adds	r3, #4
 8007b56:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2202      	movs	r2, #2
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fc37 	bl	80083d8 <USBD_CtlSendData>
              break;
 8007b6a:	e06a      	b.n	8007c42 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	da11      	bge.n	8007b98 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
 8007b76:	f003 020f 	and.w	r2, r3, #15
 8007b7a:	6879      	ldr	r1, [r7, #4]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	440b      	add	r3, r1
 8007b86:	3324      	adds	r3, #36	@ 0x24
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d117      	bne.n	8007bbe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fbb0 	bl	80082f6 <USBD_CtlError>
                  break;
 8007b96:	e054      	b.n	8007c42 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
 8007b9a:	f003 020f 	and.w	r2, r3, #15
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	440b      	add	r3, r1
 8007baa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007bae:	881b      	ldrh	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d104      	bne.n	8007bbe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fb9d 	bl	80082f6 <USBD_CtlError>
                  break;
 8007bbc:	e041      	b.n	8007c42 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	da0b      	bge.n	8007bde <USBD_StdEPReq+0x2b2>
 8007bc6:	7bbb      	ldrb	r3, [r7, #14]
 8007bc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bcc:	4613      	mov	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	3310      	adds	r3, #16
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	4413      	add	r3, r2
 8007bda:	3304      	adds	r3, #4
 8007bdc:	e00b      	b.n	8007bf6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bde:	7bbb      	ldrb	r3, [r7, #14]
 8007be0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007be4:	4613      	mov	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <USBD_StdEPReq+0x2d8>
 8007bfe:	7bbb      	ldrb	r3, [r7, #14]
 8007c00:	2b80      	cmp	r3, #128	@ 0x80
 8007c02:	d103      	bne.n	8007c0c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	2200      	movs	r2, #0
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	e00e      	b.n	8007c2a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c0c:	7bbb      	ldrb	r3, [r7, #14]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f001 f8a5 	bl	8008d60 <USBD_LL_IsStallEP>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d003      	beq.n	8007c24 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	e002      	b.n	8007c2a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	2200      	movs	r2, #0
 8007c28:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fbd1 	bl	80083d8 <USBD_CtlSendData>
              break;
 8007c36:	e004      	b.n	8007c42 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fb5b 	bl	80082f6 <USBD_CtlError>
              break;
 8007c40:	bf00      	nop
          }
          break;
 8007c42:	e004      	b.n	8007c4e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fb55 	bl	80082f6 <USBD_CtlError>
          break;
 8007c4c:	bf00      	nop
      }
      break;
 8007c4e:	e005      	b.n	8007c5c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fb4f 	bl	80082f6 <USBD_CtlError>
      break;
 8007c58:	e000      	b.n	8007c5c <USBD_StdEPReq+0x330>
      break;
 8007c5a:	bf00      	nop
  }

  return ret;
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
	...

08007c68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c72:	2300      	movs	r3, #0
 8007c74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c76:	2300      	movs	r3, #0
 8007c78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	885b      	ldrh	r3, [r3, #2]
 8007c82:	0a1b      	lsrs	r3, r3, #8
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	3b01      	subs	r3, #1
 8007c88:	2b06      	cmp	r3, #6
 8007c8a:	f200 8128 	bhi.w	8007ede <USBD_GetDescriptor+0x276>
 8007c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c94 <USBD_GetDescriptor+0x2c>)
 8007c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c94:	08007cb1 	.word	0x08007cb1
 8007c98:	08007cc9 	.word	0x08007cc9
 8007c9c:	08007d09 	.word	0x08007d09
 8007ca0:	08007edf 	.word	0x08007edf
 8007ca4:	08007edf 	.word	0x08007edf
 8007ca8:	08007e7f 	.word	0x08007e7f
 8007cac:	08007eab 	.word	0x08007eab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	7c12      	ldrb	r2, [r2, #16]
 8007cbc:	f107 0108 	add.w	r1, r7, #8
 8007cc0:	4610      	mov	r0, r2
 8007cc2:	4798      	blx	r3
 8007cc4:	60f8      	str	r0, [r7, #12]
      break;
 8007cc6:	e112      	b.n	8007eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	7c1b      	ldrb	r3, [r3, #16]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10d      	bne.n	8007cec <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd8:	f107 0208 	add.w	r2, r7, #8
 8007cdc:	4610      	mov	r0, r2
 8007cde:	4798      	blx	r3
 8007ce0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007cea:	e100      	b.n	8007eee <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf4:	f107 0208 	add.w	r2, r7, #8
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	4798      	blx	r3
 8007cfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	3301      	adds	r3, #1
 8007d02:	2202      	movs	r2, #2
 8007d04:	701a      	strb	r2, [r3, #0]
      break;
 8007d06:	e0f2      	b.n	8007eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	885b      	ldrh	r3, [r3, #2]
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b05      	cmp	r3, #5
 8007d10:	f200 80ac 	bhi.w	8007e6c <USBD_GetDescriptor+0x204>
 8007d14:	a201      	add	r2, pc, #4	@ (adr r2, 8007d1c <USBD_GetDescriptor+0xb4>)
 8007d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1a:	bf00      	nop
 8007d1c:	08007d35 	.word	0x08007d35
 8007d20:	08007d69 	.word	0x08007d69
 8007d24:	08007d9d 	.word	0x08007d9d
 8007d28:	08007dd1 	.word	0x08007dd1
 8007d2c:	08007e05 	.word	0x08007e05
 8007d30:	08007e39 	.word	0x08007e39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00b      	beq.n	8007d58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	7c12      	ldrb	r2, [r2, #16]
 8007d4c:	f107 0108 	add.w	r1, r7, #8
 8007d50:	4610      	mov	r0, r2
 8007d52:	4798      	blx	r3
 8007d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d56:	e091      	b.n	8007e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d58:	6839      	ldr	r1, [r7, #0]
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 facb 	bl	80082f6 <USBD_CtlError>
            err++;
 8007d60:	7afb      	ldrb	r3, [r7, #11]
 8007d62:	3301      	adds	r3, #1
 8007d64:	72fb      	strb	r3, [r7, #11]
          break;
 8007d66:	e089      	b.n	8007e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00b      	beq.n	8007d8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	7c12      	ldrb	r2, [r2, #16]
 8007d80:	f107 0108 	add.w	r1, r7, #8
 8007d84:	4610      	mov	r0, r2
 8007d86:	4798      	blx	r3
 8007d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d8a:	e077      	b.n	8007e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fab1 	bl	80082f6 <USBD_CtlError>
            err++;
 8007d94:	7afb      	ldrb	r3, [r7, #11]
 8007d96:	3301      	adds	r3, #1
 8007d98:	72fb      	strb	r3, [r7, #11]
          break;
 8007d9a:	e06f      	b.n	8007e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00b      	beq.n	8007dc0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	7c12      	ldrb	r2, [r2, #16]
 8007db4:	f107 0108 	add.w	r1, r7, #8
 8007db8:	4610      	mov	r0, r2
 8007dba:	4798      	blx	r3
 8007dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dbe:	e05d      	b.n	8007e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fa97 	bl	80082f6 <USBD_CtlError>
            err++;
 8007dc8:	7afb      	ldrb	r3, [r7, #11]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8007dce:	e055      	b.n	8007e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00b      	beq.n	8007df4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	7c12      	ldrb	r2, [r2, #16]
 8007de8:	f107 0108 	add.w	r1, r7, #8
 8007dec:	4610      	mov	r0, r2
 8007dee:	4798      	blx	r3
 8007df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007df2:	e043      	b.n	8007e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007df4:	6839      	ldr	r1, [r7, #0]
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fa7d 	bl	80082f6 <USBD_CtlError>
            err++;
 8007dfc:	7afb      	ldrb	r3, [r7, #11]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	72fb      	strb	r3, [r7, #11]
          break;
 8007e02:	e03b      	b.n	8007e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00b      	beq.n	8007e28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	7c12      	ldrb	r2, [r2, #16]
 8007e1c:	f107 0108 	add.w	r1, r7, #8
 8007e20:	4610      	mov	r0, r2
 8007e22:	4798      	blx	r3
 8007e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e26:	e029      	b.n	8007e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fa63 	bl	80082f6 <USBD_CtlError>
            err++;
 8007e30:	7afb      	ldrb	r3, [r7, #11]
 8007e32:	3301      	adds	r3, #1
 8007e34:	72fb      	strb	r3, [r7, #11]
          break;
 8007e36:	e021      	b.n	8007e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00b      	beq.n	8007e5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	7c12      	ldrb	r2, [r2, #16]
 8007e50:	f107 0108 	add.w	r1, r7, #8
 8007e54:	4610      	mov	r0, r2
 8007e56:	4798      	blx	r3
 8007e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e5a:	e00f      	b.n	8007e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fa49 	bl	80082f6 <USBD_CtlError>
            err++;
 8007e64:	7afb      	ldrb	r3, [r7, #11]
 8007e66:	3301      	adds	r3, #1
 8007e68:	72fb      	strb	r3, [r7, #11]
          break;
 8007e6a:	e007      	b.n	8007e7c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fa41 	bl	80082f6 <USBD_CtlError>
          err++;
 8007e74:	7afb      	ldrb	r3, [r7, #11]
 8007e76:	3301      	adds	r3, #1
 8007e78:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007e7a:	bf00      	nop
      }
      break;
 8007e7c:	e037      	b.n	8007eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	7c1b      	ldrb	r3, [r3, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d109      	bne.n	8007e9a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e8e:	f107 0208 	add.w	r2, r7, #8
 8007e92:	4610      	mov	r0, r2
 8007e94:	4798      	blx	r3
 8007e96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e98:	e029      	b.n	8007eee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fa2a 	bl	80082f6 <USBD_CtlError>
        err++;
 8007ea2:	7afb      	ldrb	r3, [r7, #11]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ea8:	e021      	b.n	8007eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	7c1b      	ldrb	r3, [r3, #16]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10d      	bne.n	8007ece <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eba:	f107 0208 	add.w	r2, r7, #8
 8007ebe:	4610      	mov	r0, r2
 8007ec0:	4798      	blx	r3
 8007ec2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	2207      	movs	r2, #7
 8007eca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ecc:	e00f      	b.n	8007eee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fa10 	bl	80082f6 <USBD_CtlError>
        err++;
 8007ed6:	7afb      	ldrb	r3, [r7, #11]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	72fb      	strb	r3, [r7, #11]
      break;
 8007edc:	e007      	b.n	8007eee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fa08 	bl	80082f6 <USBD_CtlError>
      err++;
 8007ee6:	7afb      	ldrb	r3, [r7, #11]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	72fb      	strb	r3, [r7, #11]
      break;
 8007eec:	bf00      	nop
  }

  if (err != 0U)
 8007eee:	7afb      	ldrb	r3, [r7, #11]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d11e      	bne.n	8007f32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	88db      	ldrh	r3, [r3, #6]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d016      	beq.n	8007f2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007efc:	893b      	ldrh	r3, [r7, #8]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00e      	beq.n	8007f20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	88da      	ldrh	r2, [r3, #6]
 8007f06:	893b      	ldrh	r3, [r7, #8]
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	bf28      	it	cs
 8007f0c:	4613      	movcs	r3, r2
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f12:	893b      	ldrh	r3, [r7, #8]
 8007f14:	461a      	mov	r2, r3
 8007f16:	68f9      	ldr	r1, [r7, #12]
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fa5d 	bl	80083d8 <USBD_CtlSendData>
 8007f1e:	e009      	b.n	8007f34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f9e7 	bl	80082f6 <USBD_CtlError>
 8007f28:	e004      	b.n	8007f34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 faae 	bl	800848c <USBD_CtlSendStatus>
 8007f30:	e000      	b.n	8007f34 <USBD_GetDescriptor+0x2cc>
    return;
 8007f32:	bf00      	nop
  }
}
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop

08007f3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	889b      	ldrh	r3, [r3, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d131      	bne.n	8007fb2 <USBD_SetAddress+0x76>
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	88db      	ldrh	r3, [r3, #6]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d12d      	bne.n	8007fb2 <USBD_SetAddress+0x76>
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	885b      	ldrh	r3, [r3, #2]
 8007f5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f5c:	d829      	bhi.n	8007fb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	885b      	ldrh	r3, [r3, #2]
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b03      	cmp	r3, #3
 8007f74:	d104      	bne.n	8007f80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f9bc 	bl	80082f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f7e:	e01d      	b.n	8007fbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	7bfa      	ldrb	r2, [r7, #15]
 8007f84:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 ff13 	bl	8008db8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fa7a 	bl	800848c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f98:	7bfb      	ldrb	r3, [r7, #15]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d004      	beq.n	8007fa8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa6:	e009      	b.n	8007fbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb0:	e004      	b.n	8007fbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f99e 	bl	80082f6 <USBD_CtlError>
  }
}
 8007fba:	bf00      	nop
 8007fbc:	bf00      	nop
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	885b      	ldrh	r3, [r3, #2]
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	4b4e      	ldr	r3, [pc, #312]	@ (8008114 <USBD_SetConfig+0x150>)
 8007fda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007fdc:	4b4d      	ldr	r3, [pc, #308]	@ (8008114 <USBD_SetConfig+0x150>)
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d905      	bls.n	8007ff0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f985 	bl	80082f6 <USBD_CtlError>
    return USBD_FAIL;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e08c      	b.n	800810a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d002      	beq.n	8008002 <USBD_SetConfig+0x3e>
 8007ffc:	2b03      	cmp	r3, #3
 8007ffe:	d029      	beq.n	8008054 <USBD_SetConfig+0x90>
 8008000:	e075      	b.n	80080ee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008002:	4b44      	ldr	r3, [pc, #272]	@ (8008114 <USBD_SetConfig+0x150>)
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d020      	beq.n	800804c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800800a:	4b42      	ldr	r3, [pc, #264]	@ (8008114 <USBD_SetConfig+0x150>)
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008014:	4b3f      	ldr	r3, [pc, #252]	@ (8008114 <USBD_SetConfig+0x150>)
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f7fe ffe3 	bl	8006fe6 <USBD_SetClassConfig>
 8008020:	4603      	mov	r3, r0
 8008022:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d008      	beq.n	800803c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800802a:	6839      	ldr	r1, [r7, #0]
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f962 	bl	80082f6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2202      	movs	r2, #2
 8008036:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800803a:	e065      	b.n	8008108 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fa25 	bl	800848c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2203      	movs	r2, #3
 8008046:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800804a:	e05d      	b.n	8008108 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fa1d 	bl	800848c <USBD_CtlSendStatus>
      break;
 8008052:	e059      	b.n	8008108 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008054:	4b2f      	ldr	r3, [pc, #188]	@ (8008114 <USBD_SetConfig+0x150>)
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d112      	bne.n	8008082 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2202      	movs	r2, #2
 8008060:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008064:	4b2b      	ldr	r3, [pc, #172]	@ (8008114 <USBD_SetConfig+0x150>)
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	461a      	mov	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800806e:	4b29      	ldr	r3, [pc, #164]	@ (8008114 <USBD_SetConfig+0x150>)
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	4619      	mov	r1, r3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7fe ffd2 	bl	800701e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fa06 	bl	800848c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008080:	e042      	b.n	8008108 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008082:	4b24      	ldr	r3, [pc, #144]	@ (8008114 <USBD_SetConfig+0x150>)
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	429a      	cmp	r2, r3
 800808e:	d02a      	beq.n	80080e6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	b2db      	uxtb	r3, r3
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7fe ffc0 	bl	800701e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800809e:	4b1d      	ldr	r3, [pc, #116]	@ (8008114 <USBD_SetConfig+0x150>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	461a      	mov	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080a8:	4b1a      	ldr	r3, [pc, #104]	@ (8008114 <USBD_SetConfig+0x150>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7fe ff99 	bl	8006fe6 <USBD_SetClassConfig>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00f      	beq.n	80080de <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f918 	bl	80082f6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	4619      	mov	r1, r3
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f7fe ffa5 	bl	800701e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2202      	movs	r2, #2
 80080d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80080dc:	e014      	b.n	8008108 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f9d4 	bl	800848c <USBD_CtlSendStatus>
      break;
 80080e4:	e010      	b.n	8008108 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f9d0 	bl	800848c <USBD_CtlSendStatus>
      break;
 80080ec:	e00c      	b.n	8008108 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f900 	bl	80082f6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080f6:	4b07      	ldr	r3, [pc, #28]	@ (8008114 <USBD_SetConfig+0x150>)
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7fe ff8e 	bl	800701e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008102:	2303      	movs	r3, #3
 8008104:	73fb      	strb	r3, [r7, #15]
      break;
 8008106:	bf00      	nop
  }

  return ret;
 8008108:	7bfb      	ldrb	r3, [r7, #15]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	20000294 	.word	0x20000294

08008118 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	88db      	ldrh	r3, [r3, #6]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d004      	beq.n	8008134 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f8e2 	bl	80082f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008132:	e023      	b.n	800817c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2b02      	cmp	r3, #2
 800813e:	dc02      	bgt.n	8008146 <USBD_GetConfig+0x2e>
 8008140:	2b00      	cmp	r3, #0
 8008142:	dc03      	bgt.n	800814c <USBD_GetConfig+0x34>
 8008144:	e015      	b.n	8008172 <USBD_GetConfig+0x5a>
 8008146:	2b03      	cmp	r3, #3
 8008148:	d00b      	beq.n	8008162 <USBD_GetConfig+0x4a>
 800814a:	e012      	b.n	8008172 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	3308      	adds	r3, #8
 8008156:	2201      	movs	r2, #1
 8008158:	4619      	mov	r1, r3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f93c 	bl	80083d8 <USBD_CtlSendData>
        break;
 8008160:	e00c      	b.n	800817c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	3304      	adds	r3, #4
 8008166:	2201      	movs	r2, #1
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f934 	bl	80083d8 <USBD_CtlSendData>
        break;
 8008170:	e004      	b.n	800817c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f8be 	bl	80082f6 <USBD_CtlError>
        break;
 800817a:	bf00      	nop
}
 800817c:	bf00      	nop
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008194:	b2db      	uxtb	r3, r3
 8008196:	3b01      	subs	r3, #1
 8008198:	2b02      	cmp	r3, #2
 800819a:	d81e      	bhi.n	80081da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	88db      	ldrh	r3, [r3, #6]
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d004      	beq.n	80081ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f8a5 	bl	80082f6 <USBD_CtlError>
        break;
 80081ac:	e01a      	b.n	80081e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2201      	movs	r2, #1
 80081b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d005      	beq.n	80081ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	f043 0202 	orr.w	r2, r3, #2
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	330c      	adds	r3, #12
 80081ce:	2202      	movs	r2, #2
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f900 	bl	80083d8 <USBD_CtlSendData>
      break;
 80081d8:	e004      	b.n	80081e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f88a 	bl	80082f6 <USBD_CtlError>
      break;
 80081e2:	bf00      	nop
  }
}
 80081e4:	bf00      	nop
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	885b      	ldrh	r3, [r3, #2]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d107      	bne.n	800820e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f940 	bl	800848c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800820c:	e013      	b.n	8008236 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	885b      	ldrh	r3, [r3, #2]
 8008212:	2b02      	cmp	r3, #2
 8008214:	d10b      	bne.n	800822e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	889b      	ldrh	r3, [r3, #4]
 800821a:	0a1b      	lsrs	r3, r3, #8
 800821c:	b29b      	uxth	r3, r3
 800821e:	b2da      	uxtb	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f930 	bl	800848c <USBD_CtlSendStatus>
}
 800822c:	e003      	b.n	8008236 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f860 	bl	80082f6 <USBD_CtlError>
}
 8008236:	bf00      	nop
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b082      	sub	sp, #8
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800824e:	b2db      	uxtb	r3, r3
 8008250:	3b01      	subs	r3, #1
 8008252:	2b02      	cmp	r3, #2
 8008254:	d80b      	bhi.n	800826e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	885b      	ldrh	r3, [r3, #2]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d10c      	bne.n	8008278 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f910 	bl	800848c <USBD_CtlSendStatus>
      }
      break;
 800826c:	e004      	b.n	8008278 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f840 	bl	80082f6 <USBD_CtlError>
      break;
 8008276:	e000      	b.n	800827a <USBD_ClrFeature+0x3c>
      break;
 8008278:	bf00      	nop
  }
}
 800827a:	bf00      	nop
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b084      	sub	sp, #16
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	781a      	ldrb	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	3301      	adds	r3, #1
 800829c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	781a      	ldrb	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	3301      	adds	r3, #1
 80082aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f7ff fa40 	bl	8007732 <SWAPBYTE>
 80082b2:	4603      	mov	r3, r0
 80082b4:	461a      	mov	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	3301      	adds	r3, #1
 80082be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	3301      	adds	r3, #1
 80082c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f7ff fa33 	bl	8007732 <SWAPBYTE>
 80082cc:	4603      	mov	r3, r0
 80082ce:	461a      	mov	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	3301      	adds	r3, #1
 80082d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	3301      	adds	r3, #1
 80082de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f7ff fa26 	bl	8007732 <SWAPBYTE>
 80082e6:	4603      	mov	r3, r0
 80082e8:	461a      	mov	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	80da      	strh	r2, [r3, #6]
}
 80082ee:	bf00      	nop
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b082      	sub	sp, #8
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
 80082fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008300:	2180      	movs	r1, #128	@ 0x80
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fcee 	bl	8008ce4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008308:	2100      	movs	r1, #0
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fcea 	bl	8008ce4 <USBD_LL_StallEP>
}
 8008310:	bf00      	nop
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b086      	sub	sp, #24
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008324:	2300      	movs	r3, #0
 8008326:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d036      	beq.n	800839c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008332:	6938      	ldr	r0, [r7, #16]
 8008334:	f000 f836 	bl	80083a4 <USBD_GetLen>
 8008338:	4603      	mov	r3, r0
 800833a:	3301      	adds	r3, #1
 800833c:	b29b      	uxth	r3, r3
 800833e:	005b      	lsls	r3, r3, #1
 8008340:	b29a      	uxth	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008346:	7dfb      	ldrb	r3, [r7, #23]
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	4413      	add	r3, r2
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	7812      	ldrb	r2, [r2, #0]
 8008350:	701a      	strb	r2, [r3, #0]
  idx++;
 8008352:	7dfb      	ldrb	r3, [r7, #23]
 8008354:	3301      	adds	r3, #1
 8008356:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008358:	7dfb      	ldrb	r3, [r7, #23]
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	4413      	add	r3, r2
 800835e:	2203      	movs	r2, #3
 8008360:	701a      	strb	r2, [r3, #0]
  idx++;
 8008362:	7dfb      	ldrb	r3, [r7, #23]
 8008364:	3301      	adds	r3, #1
 8008366:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008368:	e013      	b.n	8008392 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800836a:	7dfb      	ldrb	r3, [r7, #23]
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	4413      	add	r3, r2
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	7812      	ldrb	r2, [r2, #0]
 8008374:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	3301      	adds	r3, #1
 800837a:	613b      	str	r3, [r7, #16]
    idx++;
 800837c:	7dfb      	ldrb	r3, [r7, #23]
 800837e:	3301      	adds	r3, #1
 8008380:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008382:	7dfb      	ldrb	r3, [r7, #23]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	4413      	add	r3, r2
 8008388:	2200      	movs	r2, #0
 800838a:	701a      	strb	r2, [r3, #0]
    idx++;
 800838c:	7dfb      	ldrb	r3, [r7, #23]
 800838e:	3301      	adds	r3, #1
 8008390:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1e7      	bne.n	800836a <USBD_GetString+0x52>
 800839a:	e000      	b.n	800839e <USBD_GetString+0x86>
    return;
 800839c:	bf00      	nop
  }
}
 800839e:	3718      	adds	r7, #24
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083ac:	2300      	movs	r3, #0
 80083ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80083b4:	e005      	b.n	80083c2 <USBD_GetLen+0x1e>
  {
    len++;
 80083b6:	7bfb      	ldrb	r3, [r7, #15]
 80083b8:	3301      	adds	r3, #1
 80083ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	3301      	adds	r3, #1
 80083c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1f5      	bne.n	80083b6 <USBD_GetLen+0x12>
  }

  return len;
 80083ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2202      	movs	r2, #2
 80083e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	2100      	movs	r1, #0
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f000 fcf9 	bl	8008df6 <USBD_LL_Transmit>

  return USBD_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b084      	sub	sp, #16
 8008412:	af00      	add	r7, sp, #0
 8008414:	60f8      	str	r0, [r7, #12]
 8008416:	60b9      	str	r1, [r7, #8]
 8008418:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	2100      	movs	r1, #0
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 fce8 	bl	8008df6 <USBD_LL_Transmit>

  return USBD_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2203      	movs	r2, #3
 8008440:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	2100      	movs	r1, #0
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f000 fcec 	bl	8008e38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	60f8      	str	r0, [r7, #12]
 8008472:	60b9      	str	r1, [r7, #8]
 8008474:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	2100      	movs	r1, #0
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 fcdb 	bl	8008e38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2204      	movs	r2, #4
 8008498:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800849c:	2300      	movs	r3, #0
 800849e:	2200      	movs	r2, #0
 80084a0:	2100      	movs	r1, #0
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fca7 	bl	8008df6 <USBD_LL_Transmit>

  return USBD_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b082      	sub	sp, #8
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2205      	movs	r2, #5
 80084be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084c2:	2300      	movs	r3, #0
 80084c4:	2200      	movs	r2, #0
 80084c6:	2100      	movs	r1, #0
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fcb5 	bl	8008e38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80084dc:	2200      	movs	r2, #0
 80084de:	4912      	ldr	r1, [pc, #72]	@ (8008528 <MX_USB_DEVICE_Init+0x50>)
 80084e0:	4812      	ldr	r0, [pc, #72]	@ (800852c <MX_USB_DEVICE_Init+0x54>)
 80084e2:	f7fe fd03 	bl	8006eec <USBD_Init>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80084ec:	f7f8 fb1e 	bl	8000b2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80084f0:	490f      	ldr	r1, [pc, #60]	@ (8008530 <MX_USB_DEVICE_Init+0x58>)
 80084f2:	480e      	ldr	r0, [pc, #56]	@ (800852c <MX_USB_DEVICE_Init+0x54>)
 80084f4:	f7fe fd2a 	bl	8006f4c <USBD_RegisterClass>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80084fe:	f7f8 fb15 	bl	8000b2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008502:	490c      	ldr	r1, [pc, #48]	@ (8008534 <MX_USB_DEVICE_Init+0x5c>)
 8008504:	4809      	ldr	r0, [pc, #36]	@ (800852c <MX_USB_DEVICE_Init+0x54>)
 8008506:	f7fe fc21 	bl	8006d4c <USBD_CDC_RegisterInterface>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008510:	f7f8 fb0c 	bl	8000b2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008514:	4805      	ldr	r0, [pc, #20]	@ (800852c <MX_USB_DEVICE_Init+0x54>)
 8008516:	f7fe fd4f 	bl	8006fb8 <USBD_Start>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008520:	f7f8 fb04 	bl	8000b2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008524:	bf00      	nop
 8008526:	bd80      	pop	{r7, pc}
 8008528:	200000ac 	.word	0x200000ac
 800852c:	20000298 	.word	0x20000298
 8008530:	20000018 	.word	0x20000018
 8008534:	20000098 	.word	0x20000098

08008538 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800853c:	2200      	movs	r2, #0
 800853e:	4905      	ldr	r1, [pc, #20]	@ (8008554 <CDC_Init_FS+0x1c>)
 8008540:	4805      	ldr	r0, [pc, #20]	@ (8008558 <CDC_Init_FS+0x20>)
 8008542:	f7fe fc1d 	bl	8006d80 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008546:	4905      	ldr	r1, [pc, #20]	@ (800855c <CDC_Init_FS+0x24>)
 8008548:	4803      	ldr	r0, [pc, #12]	@ (8008558 <CDC_Init_FS+0x20>)
 800854a:	f7fe fc3b 	bl	8006dc4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800854e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008550:	4618      	mov	r0, r3
 8008552:	bd80      	pop	{r7, pc}
 8008554:	20000974 	.word	0x20000974
 8008558:	20000298 	.word	0x20000298
 800855c:	20000574 	.word	0x20000574

08008560 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008560:	b480      	push	{r7}
 8008562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008564:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008566:	4618      	mov	r0, r3
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	4603      	mov	r3, r0
 8008578:	6039      	str	r1, [r7, #0]
 800857a:	71fb      	strb	r3, [r7, #7]
 800857c:	4613      	mov	r3, r2
 800857e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008580:	79fb      	ldrb	r3, [r7, #7]
 8008582:	2b23      	cmp	r3, #35	@ 0x23
 8008584:	d84a      	bhi.n	800861c <CDC_Control_FS+0xac>
 8008586:	a201      	add	r2, pc, #4	@ (adr r2, 800858c <CDC_Control_FS+0x1c>)
 8008588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858c:	0800861d 	.word	0x0800861d
 8008590:	0800861d 	.word	0x0800861d
 8008594:	0800861d 	.word	0x0800861d
 8008598:	0800861d 	.word	0x0800861d
 800859c:	0800861d 	.word	0x0800861d
 80085a0:	0800861d 	.word	0x0800861d
 80085a4:	0800861d 	.word	0x0800861d
 80085a8:	0800861d 	.word	0x0800861d
 80085ac:	0800861d 	.word	0x0800861d
 80085b0:	0800861d 	.word	0x0800861d
 80085b4:	0800861d 	.word	0x0800861d
 80085b8:	0800861d 	.word	0x0800861d
 80085bc:	0800861d 	.word	0x0800861d
 80085c0:	0800861d 	.word	0x0800861d
 80085c4:	0800861d 	.word	0x0800861d
 80085c8:	0800861d 	.word	0x0800861d
 80085cc:	0800861d 	.word	0x0800861d
 80085d0:	0800861d 	.word	0x0800861d
 80085d4:	0800861d 	.word	0x0800861d
 80085d8:	0800861d 	.word	0x0800861d
 80085dc:	0800861d 	.word	0x0800861d
 80085e0:	0800861d 	.word	0x0800861d
 80085e4:	0800861d 	.word	0x0800861d
 80085e8:	0800861d 	.word	0x0800861d
 80085ec:	0800861d 	.word	0x0800861d
 80085f0:	0800861d 	.word	0x0800861d
 80085f4:	0800861d 	.word	0x0800861d
 80085f8:	0800861d 	.word	0x0800861d
 80085fc:	0800861d 	.word	0x0800861d
 8008600:	0800861d 	.word	0x0800861d
 8008604:	0800861d 	.word	0x0800861d
 8008608:	0800861d 	.word	0x0800861d
 800860c:	0800861d 	.word	0x0800861d
 8008610:	0800861d 	.word	0x0800861d
 8008614:	0800861d 	.word	0x0800861d
 8008618:	0800861d 	.word	0x0800861d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800861c:	bf00      	nop
  }

  return (USBD_OK);
 800861e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008620:	4618      	mov	r0, r3
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008636:	6879      	ldr	r1, [r7, #4]
 8008638:	480f      	ldr	r0, [pc, #60]	@ (8008678 <CDC_Receive_FS+0x4c>)
 800863a:	f7fe fbc3 	bl	8006dc4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800863e:	480e      	ldr	r0, [pc, #56]	@ (8008678 <CDC_Receive_FS+0x4c>)
 8008640:	f7fe fc1e 	bl	8006e80 <USBD_CDC_ReceivePacket>
  for(uint8_t i=0;i<*Len;i++){
 8008644:	2300      	movs	r3, #0
 8008646:	73fb      	strb	r3, [r7, #15]
 8008648:	e009      	b.n	800865e <CDC_Receive_FS+0x32>
  	cdc_rx_buffer[i]=Buf[i];
 800864a:	7bfb      	ldrb	r3, [r7, #15]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	441a      	add	r2, r3
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	7811      	ldrb	r1, [r2, #0]
 8008654:	4a09      	ldr	r2, [pc, #36]	@ (800867c <CDC_Receive_FS+0x50>)
 8008656:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i=0;i<*Len;i++){
 8008658:	7bfb      	ldrb	r3, [r7, #15]
 800865a:	3301      	adds	r3, #1
 800865c:	73fb      	strb	r3, [r7, #15]
 800865e:	7bfa      	ldrb	r2, [r7, #15]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	429a      	cmp	r2, r3
 8008666:	d3f0      	bcc.n	800864a <CDC_Receive_FS+0x1e>
  }
  cdc_rx_flag = true;
 8008668:	4b05      	ldr	r3, [pc, #20]	@ (8008680 <CDC_Receive_FS+0x54>)
 800866a:	2201      	movs	r2, #1
 800866c:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800866e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	20000298 	.word	0x20000298
 800867c:	20000168 	.word	0x20000168
 8008680:	2000016d 	.word	0x2000016d

08008684 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	460b      	mov	r3, r1
 800868e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008690:	2300      	movs	r3, #0
 8008692:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008694:	4b0d      	ldr	r3, [pc, #52]	@ (80086cc <CDC_Transmit_FS+0x48>)
 8008696:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800869a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e00b      	b.n	80086c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80086aa:	887b      	ldrh	r3, [r7, #2]
 80086ac:	461a      	mov	r2, r3
 80086ae:	6879      	ldr	r1, [r7, #4]
 80086b0:	4806      	ldr	r0, [pc, #24]	@ (80086cc <CDC_Transmit_FS+0x48>)
 80086b2:	f7fe fb65 	bl	8006d80 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80086b6:	4805      	ldr	r0, [pc, #20]	@ (80086cc <CDC_Transmit_FS+0x48>)
 80086b8:	f7fe fba2 	bl	8006e00 <USBD_CDC_TransmitPacket>
 80086bc:	4603      	mov	r3, r0
 80086be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80086c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20000298 	.word	0x20000298

080086d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b087      	sub	sp, #28
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	4613      	mov	r3, r2
 80086dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80086e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	371c      	adds	r7, #28
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
	...

080086f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	4603      	mov	r3, r0
 80086fc:	6039      	str	r1, [r7, #0]
 80086fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	2212      	movs	r2, #18
 8008704:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008706:	4b03      	ldr	r3, [pc, #12]	@ (8008714 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008708:	4618      	mov	r0, r3
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	200000c8 	.word	0x200000c8

08008718 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	4603      	mov	r3, r0
 8008720:	6039      	str	r1, [r7, #0]
 8008722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	2204      	movs	r2, #4
 8008728:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800872a:	4b03      	ldr	r3, [pc, #12]	@ (8008738 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800872c:	4618      	mov	r0, r3
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	200000dc 	.word	0x200000dc

0800873c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	4603      	mov	r3, r0
 8008744:	6039      	str	r1, [r7, #0]
 8008746:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008748:	79fb      	ldrb	r3, [r7, #7]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d105      	bne.n	800875a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	4907      	ldr	r1, [pc, #28]	@ (8008770 <USBD_FS_ProductStrDescriptor+0x34>)
 8008752:	4808      	ldr	r0, [pc, #32]	@ (8008774 <USBD_FS_ProductStrDescriptor+0x38>)
 8008754:	f7ff fde0 	bl	8008318 <USBD_GetString>
 8008758:	e004      	b.n	8008764 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	4904      	ldr	r1, [pc, #16]	@ (8008770 <USBD_FS_ProductStrDescriptor+0x34>)
 800875e:	4805      	ldr	r0, [pc, #20]	@ (8008774 <USBD_FS_ProductStrDescriptor+0x38>)
 8008760:	f7ff fdda 	bl	8008318 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008764:	4b02      	ldr	r3, [pc, #8]	@ (8008770 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008766:	4618      	mov	r0, r3
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	20000d74 	.word	0x20000d74
 8008774:	08009904 	.word	0x08009904

08008778 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	4603      	mov	r3, r0
 8008780:	6039      	str	r1, [r7, #0]
 8008782:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008784:	683a      	ldr	r2, [r7, #0]
 8008786:	4904      	ldr	r1, [pc, #16]	@ (8008798 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008788:	4804      	ldr	r0, [pc, #16]	@ (800879c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800878a:	f7ff fdc5 	bl	8008318 <USBD_GetString>
  return USBD_StrDesc;
 800878e:	4b02      	ldr	r3, [pc, #8]	@ (8008798 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008790:	4618      	mov	r0, r3
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	20000d74 	.word	0x20000d74
 800879c:	0800991c 	.word	0x0800991c

080087a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	4603      	mov	r3, r0
 80087a8:	6039      	str	r1, [r7, #0]
 80087aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	221a      	movs	r2, #26
 80087b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087b2:	f000 f843 	bl	800883c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087b6:	4b02      	ldr	r3, [pc, #8]	@ (80087c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	200000e0 	.word	0x200000e0

080087c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	4603      	mov	r3, r0
 80087cc:	6039      	str	r1, [r7, #0]
 80087ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087d0:	79fb      	ldrb	r3, [r7, #7]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d105      	bne.n	80087e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	4907      	ldr	r1, [pc, #28]	@ (80087f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087da:	4808      	ldr	r0, [pc, #32]	@ (80087fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80087dc:	f7ff fd9c 	bl	8008318 <USBD_GetString>
 80087e0:	e004      	b.n	80087ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087e2:	683a      	ldr	r2, [r7, #0]
 80087e4:	4904      	ldr	r1, [pc, #16]	@ (80087f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087e6:	4805      	ldr	r0, [pc, #20]	@ (80087fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80087e8:	f7ff fd96 	bl	8008318 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087ec:	4b02      	ldr	r3, [pc, #8]	@ (80087f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	20000d74 	.word	0x20000d74
 80087fc:	08009930 	.word	0x08009930

08008800 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	4603      	mov	r3, r0
 8008808:	6039      	str	r1, [r7, #0]
 800880a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800880c:	79fb      	ldrb	r3, [r7, #7]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d105      	bne.n	800881e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008812:	683a      	ldr	r2, [r7, #0]
 8008814:	4907      	ldr	r1, [pc, #28]	@ (8008834 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008816:	4808      	ldr	r0, [pc, #32]	@ (8008838 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008818:	f7ff fd7e 	bl	8008318 <USBD_GetString>
 800881c:	e004      	b.n	8008828 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	4904      	ldr	r1, [pc, #16]	@ (8008834 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008822:	4805      	ldr	r0, [pc, #20]	@ (8008838 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008824:	f7ff fd78 	bl	8008318 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008828:	4b02      	ldr	r3, [pc, #8]	@ (8008834 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800882a:	4618      	mov	r0, r3
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	20000d74 	.word	0x20000d74
 8008838:	0800993c 	.word	0x0800993c

0800883c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008842:	4b0f      	ldr	r3, [pc, #60]	@ (8008880 <Get_SerialNum+0x44>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008848:	4b0e      	ldr	r3, [pc, #56]	@ (8008884 <Get_SerialNum+0x48>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800884e:	4b0e      	ldr	r3, [pc, #56]	@ (8008888 <Get_SerialNum+0x4c>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4413      	add	r3, r2
 800885a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d009      	beq.n	8008876 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008862:	2208      	movs	r2, #8
 8008864:	4909      	ldr	r1, [pc, #36]	@ (800888c <Get_SerialNum+0x50>)
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f000 f814 	bl	8008894 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800886c:	2204      	movs	r2, #4
 800886e:	4908      	ldr	r1, [pc, #32]	@ (8008890 <Get_SerialNum+0x54>)
 8008870:	68b8      	ldr	r0, [r7, #8]
 8008872:	f000 f80f 	bl	8008894 <IntToUnicode>
  }
}
 8008876:	bf00      	nop
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	1fff7a10 	.word	0x1fff7a10
 8008884:	1fff7a14 	.word	0x1fff7a14
 8008888:	1fff7a18 	.word	0x1fff7a18
 800888c:	200000e2 	.word	0x200000e2
 8008890:	200000f2 	.word	0x200000f2

08008894 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008894:	b480      	push	{r7}
 8008896:	b087      	sub	sp, #28
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	4613      	mov	r3, r2
 80088a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088a2:	2300      	movs	r3, #0
 80088a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088a6:	2300      	movs	r3, #0
 80088a8:	75fb      	strb	r3, [r7, #23]
 80088aa:	e027      	b.n	80088fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	0f1b      	lsrs	r3, r3, #28
 80088b0:	2b09      	cmp	r3, #9
 80088b2:	d80b      	bhi.n	80088cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	0f1b      	lsrs	r3, r3, #28
 80088b8:	b2da      	uxtb	r2, r3
 80088ba:	7dfb      	ldrb	r3, [r7, #23]
 80088bc:	005b      	lsls	r3, r3, #1
 80088be:	4619      	mov	r1, r3
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	440b      	add	r3, r1
 80088c4:	3230      	adds	r2, #48	@ 0x30
 80088c6:	b2d2      	uxtb	r2, r2
 80088c8:	701a      	strb	r2, [r3, #0]
 80088ca:	e00a      	b.n	80088e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	0f1b      	lsrs	r3, r3, #28
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	7dfb      	ldrb	r3, [r7, #23]
 80088d4:	005b      	lsls	r3, r3, #1
 80088d6:	4619      	mov	r1, r3
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	440b      	add	r3, r1
 80088dc:	3237      	adds	r2, #55	@ 0x37
 80088de:	b2d2      	uxtb	r2, r2
 80088e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	011b      	lsls	r3, r3, #4
 80088e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
 80088ea:	005b      	lsls	r3, r3, #1
 80088ec:	3301      	adds	r3, #1
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	4413      	add	r3, r2
 80088f2:	2200      	movs	r2, #0
 80088f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80088f6:	7dfb      	ldrb	r3, [r7, #23]
 80088f8:	3301      	adds	r3, #1
 80088fa:	75fb      	strb	r3, [r7, #23]
 80088fc:	7dfa      	ldrb	r2, [r7, #23]
 80088fe:	79fb      	ldrb	r3, [r7, #7]
 8008900:	429a      	cmp	r2, r3
 8008902:	d3d3      	bcc.n	80088ac <IntToUnicode+0x18>
  }
}
 8008904:	bf00      	nop
 8008906:	bf00      	nop
 8008908:	371c      	adds	r7, #28
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
	...

08008914 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b08a      	sub	sp, #40	@ 0x28
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800891c:	f107 0314 	add.w	r3, r7, #20
 8008920:	2200      	movs	r2, #0
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	605a      	str	r2, [r3, #4]
 8008926:	609a      	str	r2, [r3, #8]
 8008928:	60da      	str	r2, [r3, #12]
 800892a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008934:	d13a      	bne.n	80089ac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008936:	2300      	movs	r3, #0
 8008938:	613b      	str	r3, [r7, #16]
 800893a:	4b1e      	ldr	r3, [pc, #120]	@ (80089b4 <HAL_PCD_MspInit+0xa0>)
 800893c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800893e:	4a1d      	ldr	r2, [pc, #116]	@ (80089b4 <HAL_PCD_MspInit+0xa0>)
 8008940:	f043 0301 	orr.w	r3, r3, #1
 8008944:	6313      	str	r3, [r2, #48]	@ 0x30
 8008946:	4b1b      	ldr	r3, [pc, #108]	@ (80089b4 <HAL_PCD_MspInit+0xa0>)
 8008948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800894a:	f003 0301 	and.w	r3, r3, #1
 800894e:	613b      	str	r3, [r7, #16]
 8008950:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008952:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008958:	2302      	movs	r3, #2
 800895a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800895c:	2300      	movs	r3, #0
 800895e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008960:	2303      	movs	r3, #3
 8008962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008964:	230a      	movs	r3, #10
 8008966:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008968:	f107 0314 	add.w	r3, r7, #20
 800896c:	4619      	mov	r1, r3
 800896e:	4812      	ldr	r0, [pc, #72]	@ (80089b8 <HAL_PCD_MspInit+0xa4>)
 8008970:	f7f8 fffe 	bl	8001970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008974:	4b0f      	ldr	r3, [pc, #60]	@ (80089b4 <HAL_PCD_MspInit+0xa0>)
 8008976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008978:	4a0e      	ldr	r2, [pc, #56]	@ (80089b4 <HAL_PCD_MspInit+0xa0>)
 800897a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800897e:	6353      	str	r3, [r2, #52]	@ 0x34
 8008980:	2300      	movs	r3, #0
 8008982:	60fb      	str	r3, [r7, #12]
 8008984:	4b0b      	ldr	r3, [pc, #44]	@ (80089b4 <HAL_PCD_MspInit+0xa0>)
 8008986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008988:	4a0a      	ldr	r2, [pc, #40]	@ (80089b4 <HAL_PCD_MspInit+0xa0>)
 800898a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800898e:	6453      	str	r3, [r2, #68]	@ 0x44
 8008990:	4b08      	ldr	r3, [pc, #32]	@ (80089b4 <HAL_PCD_MspInit+0xa0>)
 8008992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008998:	60fb      	str	r3, [r7, #12]
 800899a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800899c:	2200      	movs	r2, #0
 800899e:	2100      	movs	r1, #0
 80089a0:	2043      	movs	r0, #67	@ 0x43
 80089a2:	f7f8 fc3e 	bl	8001222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80089a6:	2043      	movs	r0, #67	@ 0x43
 80089a8:	f7f8 fc57 	bl	800125a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089ac:	bf00      	nop
 80089ae:	3728      	adds	r7, #40	@ 0x28
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	40023800 	.word	0x40023800
 80089b8:	40020000 	.word	0x40020000

080089bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80089d0:	4619      	mov	r1, r3
 80089d2:	4610      	mov	r0, r2
 80089d4:	f7fe fb3d 	bl	8007052 <USBD_LL_SetupStage>
}
 80089d8:	bf00      	nop
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	460b      	mov	r3, r1
 80089ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80089f2:	78fa      	ldrb	r2, [r7, #3]
 80089f4:	6879      	ldr	r1, [r7, #4]
 80089f6:	4613      	mov	r3, r2
 80089f8:	00db      	lsls	r3, r3, #3
 80089fa:	4413      	add	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	440b      	add	r3, r1
 8008a00:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	78fb      	ldrb	r3, [r7, #3]
 8008a08:	4619      	mov	r1, r3
 8008a0a:	f7fe fb77 	bl	80070fc <USBD_LL_DataOutStage>
}
 8008a0e:	bf00      	nop
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b082      	sub	sp, #8
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	460b      	mov	r3, r1
 8008a20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008a28:	78fa      	ldrb	r2, [r7, #3]
 8008a2a:	6879      	ldr	r1, [r7, #4]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	00db      	lsls	r3, r3, #3
 8008a30:	4413      	add	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	440b      	add	r3, r1
 8008a36:	3320      	adds	r3, #32
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	78fb      	ldrb	r3, [r7, #3]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	f7fe fc10 	bl	8007262 <USBD_LL_DataInStage>
}
 8008a42:	bf00      	nop
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b082      	sub	sp, #8
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7fe fd4a 	bl	80074f2 <USBD_LL_SOF>
}
 8008a5e:	bf00      	nop
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b084      	sub	sp, #16
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	79db      	ldrb	r3, [r3, #7]
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d001      	beq.n	8008a7e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a7a:	f7f8 f857 	bl	8000b2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a84:	7bfa      	ldrb	r2, [r7, #15]
 8008a86:	4611      	mov	r1, r2
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7fe fcee 	bl	800746a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fe fc96 	bl	80073c6 <USBD_LL_Reset>
}
 8008a9a:	bf00      	nop
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
	...

08008aa4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7fe fce9 	bl	800748a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	6812      	ldr	r2, [r2, #0]
 8008ac6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008aca:	f043 0301 	orr.w	r3, r3, #1
 8008ace:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	7adb      	ldrb	r3, [r3, #11]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d005      	beq.n	8008ae4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ad8:	4b04      	ldr	r3, [pc, #16]	@ (8008aec <HAL_PCD_SuspendCallback+0x48>)
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	4a03      	ldr	r2, [pc, #12]	@ (8008aec <HAL_PCD_SuspendCallback+0x48>)
 8008ade:	f043 0306 	orr.w	r3, r3, #6
 8008ae2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ae4:	bf00      	nop
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	e000ed00 	.word	0xe000ed00

08008af0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7fe fcdf 	bl	80074c2 <USBD_LL_Resume>
}
 8008b04:	bf00      	nop
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b1e:	78fa      	ldrb	r2, [r7, #3]
 8008b20:	4611      	mov	r1, r2
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fe fd37 	bl	8007596 <USBD_LL_IsoOUTIncomplete>
}
 8008b28:	bf00      	nop
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b42:	78fa      	ldrb	r2, [r7, #3]
 8008b44:	4611      	mov	r1, r2
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fe fcf3 	bl	8007532 <USBD_LL_IsoINIncomplete>
}
 8008b4c:	bf00      	nop
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fe fd49 	bl	80075fa <USBD_LL_DevConnected>
}
 8008b68:	bf00      	nop
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fe fd46 	bl	8007610 <USBD_LL_DevDisconnected>
}
 8008b84:	bf00      	nop
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d13c      	bne.n	8008c16 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008b9c:	4a20      	ldr	r2, [pc, #128]	@ (8008c20 <USBD_LL_Init+0x94>)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a1e      	ldr	r2, [pc, #120]	@ (8008c20 <USBD_LL_Init+0x94>)
 8008ba8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008bac:	4b1c      	ldr	r3, [pc, #112]	@ (8008c20 <USBD_LL_Init+0x94>)
 8008bae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008bb2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8008c20 <USBD_LL_Init+0x94>)
 8008bb6:	2204      	movs	r2, #4
 8008bb8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008bba:	4b19      	ldr	r3, [pc, #100]	@ (8008c20 <USBD_LL_Init+0x94>)
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008bc0:	4b17      	ldr	r3, [pc, #92]	@ (8008c20 <USBD_LL_Init+0x94>)
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008bc6:	4b16      	ldr	r3, [pc, #88]	@ (8008c20 <USBD_LL_Init+0x94>)
 8008bc8:	2202      	movs	r2, #2
 8008bca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008bcc:	4b14      	ldr	r3, [pc, #80]	@ (8008c20 <USBD_LL_Init+0x94>)
 8008bce:	2200      	movs	r2, #0
 8008bd0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008bd2:	4b13      	ldr	r3, [pc, #76]	@ (8008c20 <USBD_LL_Init+0x94>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008bd8:	4b11      	ldr	r3, [pc, #68]	@ (8008c20 <USBD_LL_Init+0x94>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008bde:	4b10      	ldr	r3, [pc, #64]	@ (8008c20 <USBD_LL_Init+0x94>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008be4:	4b0e      	ldr	r3, [pc, #56]	@ (8008c20 <USBD_LL_Init+0x94>)
 8008be6:	2200      	movs	r2, #0
 8008be8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008bea:	480d      	ldr	r0, [pc, #52]	@ (8008c20 <USBD_LL_Init+0x94>)
 8008bec:	f7f9 f877 	bl	8001cde <HAL_PCD_Init>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008bf6:	f7f7 ff99 	bl	8000b2c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008bfa:	2180      	movs	r1, #128	@ 0x80
 8008bfc:	4808      	ldr	r0, [pc, #32]	@ (8008c20 <USBD_LL_Init+0x94>)
 8008bfe:	f7fa faa2 	bl	8003146 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c02:	2240      	movs	r2, #64	@ 0x40
 8008c04:	2100      	movs	r1, #0
 8008c06:	4806      	ldr	r0, [pc, #24]	@ (8008c20 <USBD_LL_Init+0x94>)
 8008c08:	f7fa fa56 	bl	80030b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c0c:	2280      	movs	r2, #128	@ 0x80
 8008c0e:	2101      	movs	r1, #1
 8008c10:	4803      	ldr	r0, [pc, #12]	@ (8008c20 <USBD_LL_Init+0x94>)
 8008c12:	f7fa fa51 	bl	80030b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	20000f74 	.word	0x20000f74

08008c24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c30:	2300      	movs	r3, #0
 8008c32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7f9 f95e 	bl	8001efc <HAL_PCD_Start>
 8008c40:	4603      	mov	r3, r0
 8008c42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 f942 	bl	8008ed0 <USBD_Get_USB_Status>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b084      	sub	sp, #16
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	4608      	mov	r0, r1
 8008c64:	4611      	mov	r1, r2
 8008c66:	461a      	mov	r2, r3
 8008c68:	4603      	mov	r3, r0
 8008c6a:	70fb      	strb	r3, [r7, #3]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	70bb      	strb	r3, [r7, #2]
 8008c70:	4613      	mov	r3, r2
 8008c72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008c82:	78bb      	ldrb	r3, [r7, #2]
 8008c84:	883a      	ldrh	r2, [r7, #0]
 8008c86:	78f9      	ldrb	r1, [r7, #3]
 8008c88:	f7f9 fe32 	bl	80028f0 <HAL_PCD_EP_Open>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f000 f91c 	bl	8008ed0 <USBD_Get_USB_Status>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b084      	sub	sp, #16
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	460b      	mov	r3, r1
 8008cb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008cc0:	78fa      	ldrb	r2, [r7, #3]
 8008cc2:	4611      	mov	r1, r2
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7f9 fe7b 	bl	80029c0 <HAL_PCD_EP_Close>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cce:	7bfb      	ldrb	r3, [r7, #15]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f000 f8fd 	bl	8008ed0 <USBD_Get_USB_Status>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cda:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	460b      	mov	r3, r1
 8008cee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008cfe:	78fa      	ldrb	r2, [r7, #3]
 8008d00:	4611      	mov	r1, r2
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7f9 ff33 	bl	8002b6e <HAL_PCD_EP_SetStall>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d0c:	7bfb      	ldrb	r3, [r7, #15]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 f8de 	bl	8008ed0 <USBD_Get_USB_Status>
 8008d14:	4603      	mov	r3, r0
 8008d16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b084      	sub	sp, #16
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d3c:	78fa      	ldrb	r2, [r7, #3]
 8008d3e:	4611      	mov	r1, r2
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7f9 ff77 	bl	8002c34 <HAL_PCD_EP_ClrStall>
 8008d46:	4603      	mov	r3, r0
 8008d48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f000 f8bf 	bl	8008ed0 <USBD_Get_USB_Status>
 8008d52:	4603      	mov	r3, r0
 8008d54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d56:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	460b      	mov	r3, r1
 8008d6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	da0b      	bge.n	8008d94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d7c:	78fb      	ldrb	r3, [r7, #3]
 8008d7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d82:	68f9      	ldr	r1, [r7, #12]
 8008d84:	4613      	mov	r3, r2
 8008d86:	00db      	lsls	r3, r3, #3
 8008d88:	4413      	add	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	440b      	add	r3, r1
 8008d8e:	3316      	adds	r3, #22
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	e00b      	b.n	8008dac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d94:	78fb      	ldrb	r3, [r7, #3]
 8008d96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d9a:	68f9      	ldr	r1, [r7, #12]
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	00db      	lsls	r3, r3, #3
 8008da0:	4413      	add	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	440b      	add	r3, r1
 8008da6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008daa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3714      	adds	r7, #20
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008dd2:	78fa      	ldrb	r2, [r7, #3]
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7f9 fd66 	bl	80028a8 <HAL_PCD_SetAddress>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 f874 	bl	8008ed0 <USBD_Get_USB_Status>
 8008de8:	4603      	mov	r3, r0
 8008dea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dec:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b086      	sub	sp, #24
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	60f8      	str	r0, [r7, #12]
 8008dfe:	607a      	str	r2, [r7, #4]
 8008e00:	603b      	str	r3, [r7, #0]
 8008e02:	460b      	mov	r3, r1
 8008e04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e06:	2300      	movs	r3, #0
 8008e08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008e14:	7af9      	ldrb	r1, [r7, #11]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	f7f9 fe6e 	bl	8002afa <HAL_PCD_EP_Transmit>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e22:	7dfb      	ldrb	r3, [r7, #23]
 8008e24:	4618      	mov	r0, r3
 8008e26:	f000 f853 	bl	8008ed0 <USBD_Get_USB_Status>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e2e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3718      	adds	r7, #24
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b086      	sub	sp, #24
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	607a      	str	r2, [r7, #4]
 8008e42:	603b      	str	r3, [r7, #0]
 8008e44:	460b      	mov	r3, r1
 8008e46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008e56:	7af9      	ldrb	r1, [r7, #11]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	f7f9 fdfa 	bl	8002a54 <HAL_PCD_EP_Receive>
 8008e60:	4603      	mov	r3, r0
 8008e62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e64:	7dfb      	ldrb	r3, [r7, #23]
 8008e66:	4618      	mov	r0, r3
 8008e68:	f000 f832 	bl	8008ed0 <USBD_Get_USB_Status>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e70:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3718      	adds	r7, #24
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b082      	sub	sp, #8
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
 8008e82:	460b      	mov	r3, r1
 8008e84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e8c:	78fa      	ldrb	r2, [r7, #3]
 8008e8e:	4611      	mov	r1, r2
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7f9 fe1a 	bl	8002aca <HAL_PCD_EP_GetRxCount>
 8008e96:	4603      	mov	r3, r0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008ea8:	4b03      	ldr	r3, [pc, #12]	@ (8008eb8 <USBD_static_malloc+0x18>)
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	370c      	adds	r7, #12
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	20001458 	.word	0x20001458

08008ebc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]

}
 8008ec4:	bf00      	nop
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eda:	2300      	movs	r3, #0
 8008edc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ede:	79fb      	ldrb	r3, [r7, #7]
 8008ee0:	2b03      	cmp	r3, #3
 8008ee2:	d817      	bhi.n	8008f14 <USBD_Get_USB_Status+0x44>
 8008ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8008eec <USBD_Get_USB_Status+0x1c>)
 8008ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eea:	bf00      	nop
 8008eec:	08008efd 	.word	0x08008efd
 8008ef0:	08008f03 	.word	0x08008f03
 8008ef4:	08008f09 	.word	0x08008f09
 8008ef8:	08008f0f 	.word	0x08008f0f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	73fb      	strb	r3, [r7, #15]
    break;
 8008f00:	e00b      	b.n	8008f1a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f02:	2303      	movs	r3, #3
 8008f04:	73fb      	strb	r3, [r7, #15]
    break;
 8008f06:	e008      	b.n	8008f1a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f0c:	e005      	b.n	8008f1a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	73fb      	strb	r3, [r7, #15]
    break;
 8008f12:	e002      	b.n	8008f1a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f14:	2303      	movs	r3, #3
 8008f16:	73fb      	strb	r3, [r7, #15]
    break;
 8008f18:	bf00      	nop
  }
  return usb_status;
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3714      	adds	r7, #20
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <_vsniprintf_r>:
 8008f28:	b530      	push	{r4, r5, lr}
 8008f2a:	4614      	mov	r4, r2
 8008f2c:	2c00      	cmp	r4, #0
 8008f2e:	b09b      	sub	sp, #108	@ 0x6c
 8008f30:	4605      	mov	r5, r0
 8008f32:	461a      	mov	r2, r3
 8008f34:	da05      	bge.n	8008f42 <_vsniprintf_r+0x1a>
 8008f36:	238b      	movs	r3, #139	@ 0x8b
 8008f38:	6003      	str	r3, [r0, #0]
 8008f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3e:	b01b      	add	sp, #108	@ 0x6c
 8008f40:	bd30      	pop	{r4, r5, pc}
 8008f42:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008f46:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008f4a:	bf14      	ite	ne
 8008f4c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008f50:	4623      	moveq	r3, r4
 8008f52:	9302      	str	r3, [sp, #8]
 8008f54:	9305      	str	r3, [sp, #20]
 8008f56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008f5a:	9100      	str	r1, [sp, #0]
 8008f5c:	9104      	str	r1, [sp, #16]
 8008f5e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008f62:	4669      	mov	r1, sp
 8008f64:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008f66:	f000 f9a1 	bl	80092ac <_svfiprintf_r>
 8008f6a:	1c43      	adds	r3, r0, #1
 8008f6c:	bfbc      	itt	lt
 8008f6e:	238b      	movlt	r3, #139	@ 0x8b
 8008f70:	602b      	strlt	r3, [r5, #0]
 8008f72:	2c00      	cmp	r4, #0
 8008f74:	d0e3      	beq.n	8008f3e <_vsniprintf_r+0x16>
 8008f76:	9b00      	ldr	r3, [sp, #0]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	701a      	strb	r2, [r3, #0]
 8008f7c:	e7df      	b.n	8008f3e <_vsniprintf_r+0x16>
	...

08008f80 <vsniprintf>:
 8008f80:	b507      	push	{r0, r1, r2, lr}
 8008f82:	9300      	str	r3, [sp, #0]
 8008f84:	4613      	mov	r3, r2
 8008f86:	460a      	mov	r2, r1
 8008f88:	4601      	mov	r1, r0
 8008f8a:	4803      	ldr	r0, [pc, #12]	@ (8008f98 <vsniprintf+0x18>)
 8008f8c:	6800      	ldr	r0, [r0, #0]
 8008f8e:	f7ff ffcb 	bl	8008f28 <_vsniprintf_r>
 8008f92:	b003      	add	sp, #12
 8008f94:	f85d fb04 	ldr.w	pc, [sp], #4
 8008f98:	200000fc 	.word	0x200000fc

08008f9c <memset>:
 8008f9c:	4402      	add	r2, r0
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d100      	bne.n	8008fa6 <memset+0xa>
 8008fa4:	4770      	bx	lr
 8008fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8008faa:	e7f9      	b.n	8008fa0 <memset+0x4>

08008fac <__errno>:
 8008fac:	4b01      	ldr	r3, [pc, #4]	@ (8008fb4 <__errno+0x8>)
 8008fae:	6818      	ldr	r0, [r3, #0]
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	200000fc 	.word	0x200000fc

08008fb8 <__libc_init_array>:
 8008fb8:	b570      	push	{r4, r5, r6, lr}
 8008fba:	4d0d      	ldr	r5, [pc, #52]	@ (8008ff0 <__libc_init_array+0x38>)
 8008fbc:	4c0d      	ldr	r4, [pc, #52]	@ (8008ff4 <__libc_init_array+0x3c>)
 8008fbe:	1b64      	subs	r4, r4, r5
 8008fc0:	10a4      	asrs	r4, r4, #2
 8008fc2:	2600      	movs	r6, #0
 8008fc4:	42a6      	cmp	r6, r4
 8008fc6:	d109      	bne.n	8008fdc <__libc_init_array+0x24>
 8008fc8:	4d0b      	ldr	r5, [pc, #44]	@ (8008ff8 <__libc_init_array+0x40>)
 8008fca:	4c0c      	ldr	r4, [pc, #48]	@ (8008ffc <__libc_init_array+0x44>)
 8008fcc:	f000 fc66 	bl	800989c <_init>
 8008fd0:	1b64      	subs	r4, r4, r5
 8008fd2:	10a4      	asrs	r4, r4, #2
 8008fd4:	2600      	movs	r6, #0
 8008fd6:	42a6      	cmp	r6, r4
 8008fd8:	d105      	bne.n	8008fe6 <__libc_init_array+0x2e>
 8008fda:	bd70      	pop	{r4, r5, r6, pc}
 8008fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fe0:	4798      	blx	r3
 8008fe2:	3601      	adds	r6, #1
 8008fe4:	e7ee      	b.n	8008fc4 <__libc_init_array+0xc>
 8008fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fea:	4798      	blx	r3
 8008fec:	3601      	adds	r6, #1
 8008fee:	e7f2      	b.n	8008fd6 <__libc_init_array+0x1e>
 8008ff0:	080099a8 	.word	0x080099a8
 8008ff4:	080099a8 	.word	0x080099a8
 8008ff8:	080099a8 	.word	0x080099a8
 8008ffc:	080099ac 	.word	0x080099ac

08009000 <__retarget_lock_acquire_recursive>:
 8009000:	4770      	bx	lr

08009002 <__retarget_lock_release_recursive>:
 8009002:	4770      	bx	lr

08009004 <_free_r>:
 8009004:	b538      	push	{r3, r4, r5, lr}
 8009006:	4605      	mov	r5, r0
 8009008:	2900      	cmp	r1, #0
 800900a:	d041      	beq.n	8009090 <_free_r+0x8c>
 800900c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009010:	1f0c      	subs	r4, r1, #4
 8009012:	2b00      	cmp	r3, #0
 8009014:	bfb8      	it	lt
 8009016:	18e4      	addlt	r4, r4, r3
 8009018:	f000 f8e0 	bl	80091dc <__malloc_lock>
 800901c:	4a1d      	ldr	r2, [pc, #116]	@ (8009094 <_free_r+0x90>)
 800901e:	6813      	ldr	r3, [r2, #0]
 8009020:	b933      	cbnz	r3, 8009030 <_free_r+0x2c>
 8009022:	6063      	str	r3, [r4, #4]
 8009024:	6014      	str	r4, [r2, #0]
 8009026:	4628      	mov	r0, r5
 8009028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800902c:	f000 b8dc 	b.w	80091e8 <__malloc_unlock>
 8009030:	42a3      	cmp	r3, r4
 8009032:	d908      	bls.n	8009046 <_free_r+0x42>
 8009034:	6820      	ldr	r0, [r4, #0]
 8009036:	1821      	adds	r1, r4, r0
 8009038:	428b      	cmp	r3, r1
 800903a:	bf01      	itttt	eq
 800903c:	6819      	ldreq	r1, [r3, #0]
 800903e:	685b      	ldreq	r3, [r3, #4]
 8009040:	1809      	addeq	r1, r1, r0
 8009042:	6021      	streq	r1, [r4, #0]
 8009044:	e7ed      	b.n	8009022 <_free_r+0x1e>
 8009046:	461a      	mov	r2, r3
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	b10b      	cbz	r3, 8009050 <_free_r+0x4c>
 800904c:	42a3      	cmp	r3, r4
 800904e:	d9fa      	bls.n	8009046 <_free_r+0x42>
 8009050:	6811      	ldr	r1, [r2, #0]
 8009052:	1850      	adds	r0, r2, r1
 8009054:	42a0      	cmp	r0, r4
 8009056:	d10b      	bne.n	8009070 <_free_r+0x6c>
 8009058:	6820      	ldr	r0, [r4, #0]
 800905a:	4401      	add	r1, r0
 800905c:	1850      	adds	r0, r2, r1
 800905e:	4283      	cmp	r3, r0
 8009060:	6011      	str	r1, [r2, #0]
 8009062:	d1e0      	bne.n	8009026 <_free_r+0x22>
 8009064:	6818      	ldr	r0, [r3, #0]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	6053      	str	r3, [r2, #4]
 800906a:	4408      	add	r0, r1
 800906c:	6010      	str	r0, [r2, #0]
 800906e:	e7da      	b.n	8009026 <_free_r+0x22>
 8009070:	d902      	bls.n	8009078 <_free_r+0x74>
 8009072:	230c      	movs	r3, #12
 8009074:	602b      	str	r3, [r5, #0]
 8009076:	e7d6      	b.n	8009026 <_free_r+0x22>
 8009078:	6820      	ldr	r0, [r4, #0]
 800907a:	1821      	adds	r1, r4, r0
 800907c:	428b      	cmp	r3, r1
 800907e:	bf04      	itt	eq
 8009080:	6819      	ldreq	r1, [r3, #0]
 8009082:	685b      	ldreq	r3, [r3, #4]
 8009084:	6063      	str	r3, [r4, #4]
 8009086:	bf04      	itt	eq
 8009088:	1809      	addeq	r1, r1, r0
 800908a:	6021      	streq	r1, [r4, #0]
 800908c:	6054      	str	r4, [r2, #4]
 800908e:	e7ca      	b.n	8009026 <_free_r+0x22>
 8009090:	bd38      	pop	{r3, r4, r5, pc}
 8009092:	bf00      	nop
 8009094:	200017bc 	.word	0x200017bc

08009098 <sbrk_aligned>:
 8009098:	b570      	push	{r4, r5, r6, lr}
 800909a:	4e0f      	ldr	r6, [pc, #60]	@ (80090d8 <sbrk_aligned+0x40>)
 800909c:	460c      	mov	r4, r1
 800909e:	6831      	ldr	r1, [r6, #0]
 80090a0:	4605      	mov	r5, r0
 80090a2:	b911      	cbnz	r1, 80090aa <sbrk_aligned+0x12>
 80090a4:	f000 fba6 	bl	80097f4 <_sbrk_r>
 80090a8:	6030      	str	r0, [r6, #0]
 80090aa:	4621      	mov	r1, r4
 80090ac:	4628      	mov	r0, r5
 80090ae:	f000 fba1 	bl	80097f4 <_sbrk_r>
 80090b2:	1c43      	adds	r3, r0, #1
 80090b4:	d103      	bne.n	80090be <sbrk_aligned+0x26>
 80090b6:	f04f 34ff 	mov.w	r4, #4294967295
 80090ba:	4620      	mov	r0, r4
 80090bc:	bd70      	pop	{r4, r5, r6, pc}
 80090be:	1cc4      	adds	r4, r0, #3
 80090c0:	f024 0403 	bic.w	r4, r4, #3
 80090c4:	42a0      	cmp	r0, r4
 80090c6:	d0f8      	beq.n	80090ba <sbrk_aligned+0x22>
 80090c8:	1a21      	subs	r1, r4, r0
 80090ca:	4628      	mov	r0, r5
 80090cc:	f000 fb92 	bl	80097f4 <_sbrk_r>
 80090d0:	3001      	adds	r0, #1
 80090d2:	d1f2      	bne.n	80090ba <sbrk_aligned+0x22>
 80090d4:	e7ef      	b.n	80090b6 <sbrk_aligned+0x1e>
 80090d6:	bf00      	nop
 80090d8:	200017b8 	.word	0x200017b8

080090dc <_malloc_r>:
 80090dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090e0:	1ccd      	adds	r5, r1, #3
 80090e2:	f025 0503 	bic.w	r5, r5, #3
 80090e6:	3508      	adds	r5, #8
 80090e8:	2d0c      	cmp	r5, #12
 80090ea:	bf38      	it	cc
 80090ec:	250c      	movcc	r5, #12
 80090ee:	2d00      	cmp	r5, #0
 80090f0:	4606      	mov	r6, r0
 80090f2:	db01      	blt.n	80090f8 <_malloc_r+0x1c>
 80090f4:	42a9      	cmp	r1, r5
 80090f6:	d904      	bls.n	8009102 <_malloc_r+0x26>
 80090f8:	230c      	movs	r3, #12
 80090fa:	6033      	str	r3, [r6, #0]
 80090fc:	2000      	movs	r0, #0
 80090fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009102:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80091d8 <_malloc_r+0xfc>
 8009106:	f000 f869 	bl	80091dc <__malloc_lock>
 800910a:	f8d8 3000 	ldr.w	r3, [r8]
 800910e:	461c      	mov	r4, r3
 8009110:	bb44      	cbnz	r4, 8009164 <_malloc_r+0x88>
 8009112:	4629      	mov	r1, r5
 8009114:	4630      	mov	r0, r6
 8009116:	f7ff ffbf 	bl	8009098 <sbrk_aligned>
 800911a:	1c43      	adds	r3, r0, #1
 800911c:	4604      	mov	r4, r0
 800911e:	d158      	bne.n	80091d2 <_malloc_r+0xf6>
 8009120:	f8d8 4000 	ldr.w	r4, [r8]
 8009124:	4627      	mov	r7, r4
 8009126:	2f00      	cmp	r7, #0
 8009128:	d143      	bne.n	80091b2 <_malloc_r+0xd6>
 800912a:	2c00      	cmp	r4, #0
 800912c:	d04b      	beq.n	80091c6 <_malloc_r+0xea>
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	4639      	mov	r1, r7
 8009132:	4630      	mov	r0, r6
 8009134:	eb04 0903 	add.w	r9, r4, r3
 8009138:	f000 fb5c 	bl	80097f4 <_sbrk_r>
 800913c:	4581      	cmp	r9, r0
 800913e:	d142      	bne.n	80091c6 <_malloc_r+0xea>
 8009140:	6821      	ldr	r1, [r4, #0]
 8009142:	1a6d      	subs	r5, r5, r1
 8009144:	4629      	mov	r1, r5
 8009146:	4630      	mov	r0, r6
 8009148:	f7ff ffa6 	bl	8009098 <sbrk_aligned>
 800914c:	3001      	adds	r0, #1
 800914e:	d03a      	beq.n	80091c6 <_malloc_r+0xea>
 8009150:	6823      	ldr	r3, [r4, #0]
 8009152:	442b      	add	r3, r5
 8009154:	6023      	str	r3, [r4, #0]
 8009156:	f8d8 3000 	ldr.w	r3, [r8]
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	bb62      	cbnz	r2, 80091b8 <_malloc_r+0xdc>
 800915e:	f8c8 7000 	str.w	r7, [r8]
 8009162:	e00f      	b.n	8009184 <_malloc_r+0xa8>
 8009164:	6822      	ldr	r2, [r4, #0]
 8009166:	1b52      	subs	r2, r2, r5
 8009168:	d420      	bmi.n	80091ac <_malloc_r+0xd0>
 800916a:	2a0b      	cmp	r2, #11
 800916c:	d917      	bls.n	800919e <_malloc_r+0xc2>
 800916e:	1961      	adds	r1, r4, r5
 8009170:	42a3      	cmp	r3, r4
 8009172:	6025      	str	r5, [r4, #0]
 8009174:	bf18      	it	ne
 8009176:	6059      	strne	r1, [r3, #4]
 8009178:	6863      	ldr	r3, [r4, #4]
 800917a:	bf08      	it	eq
 800917c:	f8c8 1000 	streq.w	r1, [r8]
 8009180:	5162      	str	r2, [r4, r5]
 8009182:	604b      	str	r3, [r1, #4]
 8009184:	4630      	mov	r0, r6
 8009186:	f000 f82f 	bl	80091e8 <__malloc_unlock>
 800918a:	f104 000b 	add.w	r0, r4, #11
 800918e:	1d23      	adds	r3, r4, #4
 8009190:	f020 0007 	bic.w	r0, r0, #7
 8009194:	1ac2      	subs	r2, r0, r3
 8009196:	bf1c      	itt	ne
 8009198:	1a1b      	subne	r3, r3, r0
 800919a:	50a3      	strne	r3, [r4, r2]
 800919c:	e7af      	b.n	80090fe <_malloc_r+0x22>
 800919e:	6862      	ldr	r2, [r4, #4]
 80091a0:	42a3      	cmp	r3, r4
 80091a2:	bf0c      	ite	eq
 80091a4:	f8c8 2000 	streq.w	r2, [r8]
 80091a8:	605a      	strne	r2, [r3, #4]
 80091aa:	e7eb      	b.n	8009184 <_malloc_r+0xa8>
 80091ac:	4623      	mov	r3, r4
 80091ae:	6864      	ldr	r4, [r4, #4]
 80091b0:	e7ae      	b.n	8009110 <_malloc_r+0x34>
 80091b2:	463c      	mov	r4, r7
 80091b4:	687f      	ldr	r7, [r7, #4]
 80091b6:	e7b6      	b.n	8009126 <_malloc_r+0x4a>
 80091b8:	461a      	mov	r2, r3
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	42a3      	cmp	r3, r4
 80091be:	d1fb      	bne.n	80091b8 <_malloc_r+0xdc>
 80091c0:	2300      	movs	r3, #0
 80091c2:	6053      	str	r3, [r2, #4]
 80091c4:	e7de      	b.n	8009184 <_malloc_r+0xa8>
 80091c6:	230c      	movs	r3, #12
 80091c8:	6033      	str	r3, [r6, #0]
 80091ca:	4630      	mov	r0, r6
 80091cc:	f000 f80c 	bl	80091e8 <__malloc_unlock>
 80091d0:	e794      	b.n	80090fc <_malloc_r+0x20>
 80091d2:	6005      	str	r5, [r0, #0]
 80091d4:	e7d6      	b.n	8009184 <_malloc_r+0xa8>
 80091d6:	bf00      	nop
 80091d8:	200017bc 	.word	0x200017bc

080091dc <__malloc_lock>:
 80091dc:	4801      	ldr	r0, [pc, #4]	@ (80091e4 <__malloc_lock+0x8>)
 80091de:	f7ff bf0f 	b.w	8009000 <__retarget_lock_acquire_recursive>
 80091e2:	bf00      	nop
 80091e4:	200017b4 	.word	0x200017b4

080091e8 <__malloc_unlock>:
 80091e8:	4801      	ldr	r0, [pc, #4]	@ (80091f0 <__malloc_unlock+0x8>)
 80091ea:	f7ff bf0a 	b.w	8009002 <__retarget_lock_release_recursive>
 80091ee:	bf00      	nop
 80091f0:	200017b4 	.word	0x200017b4

080091f4 <__ssputs_r>:
 80091f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091f8:	688e      	ldr	r6, [r1, #8]
 80091fa:	461f      	mov	r7, r3
 80091fc:	42be      	cmp	r6, r7
 80091fe:	680b      	ldr	r3, [r1, #0]
 8009200:	4682      	mov	sl, r0
 8009202:	460c      	mov	r4, r1
 8009204:	4690      	mov	r8, r2
 8009206:	d82d      	bhi.n	8009264 <__ssputs_r+0x70>
 8009208:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800920c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009210:	d026      	beq.n	8009260 <__ssputs_r+0x6c>
 8009212:	6965      	ldr	r5, [r4, #20]
 8009214:	6909      	ldr	r1, [r1, #16]
 8009216:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800921a:	eba3 0901 	sub.w	r9, r3, r1
 800921e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009222:	1c7b      	adds	r3, r7, #1
 8009224:	444b      	add	r3, r9
 8009226:	106d      	asrs	r5, r5, #1
 8009228:	429d      	cmp	r5, r3
 800922a:	bf38      	it	cc
 800922c:	461d      	movcc	r5, r3
 800922e:	0553      	lsls	r3, r2, #21
 8009230:	d527      	bpl.n	8009282 <__ssputs_r+0x8e>
 8009232:	4629      	mov	r1, r5
 8009234:	f7ff ff52 	bl	80090dc <_malloc_r>
 8009238:	4606      	mov	r6, r0
 800923a:	b360      	cbz	r0, 8009296 <__ssputs_r+0xa2>
 800923c:	6921      	ldr	r1, [r4, #16]
 800923e:	464a      	mov	r2, r9
 8009240:	f000 fae8 	bl	8009814 <memcpy>
 8009244:	89a3      	ldrh	r3, [r4, #12]
 8009246:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800924a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800924e:	81a3      	strh	r3, [r4, #12]
 8009250:	6126      	str	r6, [r4, #16]
 8009252:	6165      	str	r5, [r4, #20]
 8009254:	444e      	add	r6, r9
 8009256:	eba5 0509 	sub.w	r5, r5, r9
 800925a:	6026      	str	r6, [r4, #0]
 800925c:	60a5      	str	r5, [r4, #8]
 800925e:	463e      	mov	r6, r7
 8009260:	42be      	cmp	r6, r7
 8009262:	d900      	bls.n	8009266 <__ssputs_r+0x72>
 8009264:	463e      	mov	r6, r7
 8009266:	6820      	ldr	r0, [r4, #0]
 8009268:	4632      	mov	r2, r6
 800926a:	4641      	mov	r1, r8
 800926c:	f000 faa8 	bl	80097c0 <memmove>
 8009270:	68a3      	ldr	r3, [r4, #8]
 8009272:	1b9b      	subs	r3, r3, r6
 8009274:	60a3      	str	r3, [r4, #8]
 8009276:	6823      	ldr	r3, [r4, #0]
 8009278:	4433      	add	r3, r6
 800927a:	6023      	str	r3, [r4, #0]
 800927c:	2000      	movs	r0, #0
 800927e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009282:	462a      	mov	r2, r5
 8009284:	f000 fad4 	bl	8009830 <_realloc_r>
 8009288:	4606      	mov	r6, r0
 800928a:	2800      	cmp	r0, #0
 800928c:	d1e0      	bne.n	8009250 <__ssputs_r+0x5c>
 800928e:	6921      	ldr	r1, [r4, #16]
 8009290:	4650      	mov	r0, sl
 8009292:	f7ff feb7 	bl	8009004 <_free_r>
 8009296:	230c      	movs	r3, #12
 8009298:	f8ca 3000 	str.w	r3, [sl]
 800929c:	89a3      	ldrh	r3, [r4, #12]
 800929e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092a2:	81a3      	strh	r3, [r4, #12]
 80092a4:	f04f 30ff 	mov.w	r0, #4294967295
 80092a8:	e7e9      	b.n	800927e <__ssputs_r+0x8a>
	...

080092ac <_svfiprintf_r>:
 80092ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b0:	4698      	mov	r8, r3
 80092b2:	898b      	ldrh	r3, [r1, #12]
 80092b4:	061b      	lsls	r3, r3, #24
 80092b6:	b09d      	sub	sp, #116	@ 0x74
 80092b8:	4607      	mov	r7, r0
 80092ba:	460d      	mov	r5, r1
 80092bc:	4614      	mov	r4, r2
 80092be:	d510      	bpl.n	80092e2 <_svfiprintf_r+0x36>
 80092c0:	690b      	ldr	r3, [r1, #16]
 80092c2:	b973      	cbnz	r3, 80092e2 <_svfiprintf_r+0x36>
 80092c4:	2140      	movs	r1, #64	@ 0x40
 80092c6:	f7ff ff09 	bl	80090dc <_malloc_r>
 80092ca:	6028      	str	r0, [r5, #0]
 80092cc:	6128      	str	r0, [r5, #16]
 80092ce:	b930      	cbnz	r0, 80092de <_svfiprintf_r+0x32>
 80092d0:	230c      	movs	r3, #12
 80092d2:	603b      	str	r3, [r7, #0]
 80092d4:	f04f 30ff 	mov.w	r0, #4294967295
 80092d8:	b01d      	add	sp, #116	@ 0x74
 80092da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092de:	2340      	movs	r3, #64	@ 0x40
 80092e0:	616b      	str	r3, [r5, #20]
 80092e2:	2300      	movs	r3, #0
 80092e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80092e6:	2320      	movs	r3, #32
 80092e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80092f0:	2330      	movs	r3, #48	@ 0x30
 80092f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009490 <_svfiprintf_r+0x1e4>
 80092f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092fa:	f04f 0901 	mov.w	r9, #1
 80092fe:	4623      	mov	r3, r4
 8009300:	469a      	mov	sl, r3
 8009302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009306:	b10a      	cbz	r2, 800930c <_svfiprintf_r+0x60>
 8009308:	2a25      	cmp	r2, #37	@ 0x25
 800930a:	d1f9      	bne.n	8009300 <_svfiprintf_r+0x54>
 800930c:	ebba 0b04 	subs.w	fp, sl, r4
 8009310:	d00b      	beq.n	800932a <_svfiprintf_r+0x7e>
 8009312:	465b      	mov	r3, fp
 8009314:	4622      	mov	r2, r4
 8009316:	4629      	mov	r1, r5
 8009318:	4638      	mov	r0, r7
 800931a:	f7ff ff6b 	bl	80091f4 <__ssputs_r>
 800931e:	3001      	adds	r0, #1
 8009320:	f000 80a7 	beq.w	8009472 <_svfiprintf_r+0x1c6>
 8009324:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009326:	445a      	add	r2, fp
 8009328:	9209      	str	r2, [sp, #36]	@ 0x24
 800932a:	f89a 3000 	ldrb.w	r3, [sl]
 800932e:	2b00      	cmp	r3, #0
 8009330:	f000 809f 	beq.w	8009472 <_svfiprintf_r+0x1c6>
 8009334:	2300      	movs	r3, #0
 8009336:	f04f 32ff 	mov.w	r2, #4294967295
 800933a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800933e:	f10a 0a01 	add.w	sl, sl, #1
 8009342:	9304      	str	r3, [sp, #16]
 8009344:	9307      	str	r3, [sp, #28]
 8009346:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800934a:	931a      	str	r3, [sp, #104]	@ 0x68
 800934c:	4654      	mov	r4, sl
 800934e:	2205      	movs	r2, #5
 8009350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009354:	484e      	ldr	r0, [pc, #312]	@ (8009490 <_svfiprintf_r+0x1e4>)
 8009356:	f7f6 ff43 	bl	80001e0 <memchr>
 800935a:	9a04      	ldr	r2, [sp, #16]
 800935c:	b9d8      	cbnz	r0, 8009396 <_svfiprintf_r+0xea>
 800935e:	06d0      	lsls	r0, r2, #27
 8009360:	bf44      	itt	mi
 8009362:	2320      	movmi	r3, #32
 8009364:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009368:	0711      	lsls	r1, r2, #28
 800936a:	bf44      	itt	mi
 800936c:	232b      	movmi	r3, #43	@ 0x2b
 800936e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009372:	f89a 3000 	ldrb.w	r3, [sl]
 8009376:	2b2a      	cmp	r3, #42	@ 0x2a
 8009378:	d015      	beq.n	80093a6 <_svfiprintf_r+0xfa>
 800937a:	9a07      	ldr	r2, [sp, #28]
 800937c:	4654      	mov	r4, sl
 800937e:	2000      	movs	r0, #0
 8009380:	f04f 0c0a 	mov.w	ip, #10
 8009384:	4621      	mov	r1, r4
 8009386:	f811 3b01 	ldrb.w	r3, [r1], #1
 800938a:	3b30      	subs	r3, #48	@ 0x30
 800938c:	2b09      	cmp	r3, #9
 800938e:	d94b      	bls.n	8009428 <_svfiprintf_r+0x17c>
 8009390:	b1b0      	cbz	r0, 80093c0 <_svfiprintf_r+0x114>
 8009392:	9207      	str	r2, [sp, #28]
 8009394:	e014      	b.n	80093c0 <_svfiprintf_r+0x114>
 8009396:	eba0 0308 	sub.w	r3, r0, r8
 800939a:	fa09 f303 	lsl.w	r3, r9, r3
 800939e:	4313      	orrs	r3, r2
 80093a0:	9304      	str	r3, [sp, #16]
 80093a2:	46a2      	mov	sl, r4
 80093a4:	e7d2      	b.n	800934c <_svfiprintf_r+0xa0>
 80093a6:	9b03      	ldr	r3, [sp, #12]
 80093a8:	1d19      	adds	r1, r3, #4
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	9103      	str	r1, [sp, #12]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	bfbb      	ittet	lt
 80093b2:	425b      	neglt	r3, r3
 80093b4:	f042 0202 	orrlt.w	r2, r2, #2
 80093b8:	9307      	strge	r3, [sp, #28]
 80093ba:	9307      	strlt	r3, [sp, #28]
 80093bc:	bfb8      	it	lt
 80093be:	9204      	strlt	r2, [sp, #16]
 80093c0:	7823      	ldrb	r3, [r4, #0]
 80093c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80093c4:	d10a      	bne.n	80093dc <_svfiprintf_r+0x130>
 80093c6:	7863      	ldrb	r3, [r4, #1]
 80093c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80093ca:	d132      	bne.n	8009432 <_svfiprintf_r+0x186>
 80093cc:	9b03      	ldr	r3, [sp, #12]
 80093ce:	1d1a      	adds	r2, r3, #4
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	9203      	str	r2, [sp, #12]
 80093d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093d8:	3402      	adds	r4, #2
 80093da:	9305      	str	r3, [sp, #20]
 80093dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80094a0 <_svfiprintf_r+0x1f4>
 80093e0:	7821      	ldrb	r1, [r4, #0]
 80093e2:	2203      	movs	r2, #3
 80093e4:	4650      	mov	r0, sl
 80093e6:	f7f6 fefb 	bl	80001e0 <memchr>
 80093ea:	b138      	cbz	r0, 80093fc <_svfiprintf_r+0x150>
 80093ec:	9b04      	ldr	r3, [sp, #16]
 80093ee:	eba0 000a 	sub.w	r0, r0, sl
 80093f2:	2240      	movs	r2, #64	@ 0x40
 80093f4:	4082      	lsls	r2, r0
 80093f6:	4313      	orrs	r3, r2
 80093f8:	3401      	adds	r4, #1
 80093fa:	9304      	str	r3, [sp, #16]
 80093fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009400:	4824      	ldr	r0, [pc, #144]	@ (8009494 <_svfiprintf_r+0x1e8>)
 8009402:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009406:	2206      	movs	r2, #6
 8009408:	f7f6 feea 	bl	80001e0 <memchr>
 800940c:	2800      	cmp	r0, #0
 800940e:	d036      	beq.n	800947e <_svfiprintf_r+0x1d2>
 8009410:	4b21      	ldr	r3, [pc, #132]	@ (8009498 <_svfiprintf_r+0x1ec>)
 8009412:	bb1b      	cbnz	r3, 800945c <_svfiprintf_r+0x1b0>
 8009414:	9b03      	ldr	r3, [sp, #12]
 8009416:	3307      	adds	r3, #7
 8009418:	f023 0307 	bic.w	r3, r3, #7
 800941c:	3308      	adds	r3, #8
 800941e:	9303      	str	r3, [sp, #12]
 8009420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009422:	4433      	add	r3, r6
 8009424:	9309      	str	r3, [sp, #36]	@ 0x24
 8009426:	e76a      	b.n	80092fe <_svfiprintf_r+0x52>
 8009428:	fb0c 3202 	mla	r2, ip, r2, r3
 800942c:	460c      	mov	r4, r1
 800942e:	2001      	movs	r0, #1
 8009430:	e7a8      	b.n	8009384 <_svfiprintf_r+0xd8>
 8009432:	2300      	movs	r3, #0
 8009434:	3401      	adds	r4, #1
 8009436:	9305      	str	r3, [sp, #20]
 8009438:	4619      	mov	r1, r3
 800943a:	f04f 0c0a 	mov.w	ip, #10
 800943e:	4620      	mov	r0, r4
 8009440:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009444:	3a30      	subs	r2, #48	@ 0x30
 8009446:	2a09      	cmp	r2, #9
 8009448:	d903      	bls.n	8009452 <_svfiprintf_r+0x1a6>
 800944a:	2b00      	cmp	r3, #0
 800944c:	d0c6      	beq.n	80093dc <_svfiprintf_r+0x130>
 800944e:	9105      	str	r1, [sp, #20]
 8009450:	e7c4      	b.n	80093dc <_svfiprintf_r+0x130>
 8009452:	fb0c 2101 	mla	r1, ip, r1, r2
 8009456:	4604      	mov	r4, r0
 8009458:	2301      	movs	r3, #1
 800945a:	e7f0      	b.n	800943e <_svfiprintf_r+0x192>
 800945c:	ab03      	add	r3, sp, #12
 800945e:	9300      	str	r3, [sp, #0]
 8009460:	462a      	mov	r2, r5
 8009462:	4b0e      	ldr	r3, [pc, #56]	@ (800949c <_svfiprintf_r+0x1f0>)
 8009464:	a904      	add	r1, sp, #16
 8009466:	4638      	mov	r0, r7
 8009468:	f3af 8000 	nop.w
 800946c:	1c42      	adds	r2, r0, #1
 800946e:	4606      	mov	r6, r0
 8009470:	d1d6      	bne.n	8009420 <_svfiprintf_r+0x174>
 8009472:	89ab      	ldrh	r3, [r5, #12]
 8009474:	065b      	lsls	r3, r3, #25
 8009476:	f53f af2d 	bmi.w	80092d4 <_svfiprintf_r+0x28>
 800947a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800947c:	e72c      	b.n	80092d8 <_svfiprintf_r+0x2c>
 800947e:	ab03      	add	r3, sp, #12
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	462a      	mov	r2, r5
 8009484:	4b05      	ldr	r3, [pc, #20]	@ (800949c <_svfiprintf_r+0x1f0>)
 8009486:	a904      	add	r1, sp, #16
 8009488:	4638      	mov	r0, r7
 800948a:	f000 f879 	bl	8009580 <_printf_i>
 800948e:	e7ed      	b.n	800946c <_svfiprintf_r+0x1c0>
 8009490:	0800996c 	.word	0x0800996c
 8009494:	08009976 	.word	0x08009976
 8009498:	00000000 	.word	0x00000000
 800949c:	080091f5 	.word	0x080091f5
 80094a0:	08009972 	.word	0x08009972

080094a4 <_printf_common>:
 80094a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a8:	4616      	mov	r6, r2
 80094aa:	4698      	mov	r8, r3
 80094ac:	688a      	ldr	r2, [r1, #8]
 80094ae:	690b      	ldr	r3, [r1, #16]
 80094b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80094b4:	4293      	cmp	r3, r2
 80094b6:	bfb8      	it	lt
 80094b8:	4613      	movlt	r3, r2
 80094ba:	6033      	str	r3, [r6, #0]
 80094bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80094c0:	4607      	mov	r7, r0
 80094c2:	460c      	mov	r4, r1
 80094c4:	b10a      	cbz	r2, 80094ca <_printf_common+0x26>
 80094c6:	3301      	adds	r3, #1
 80094c8:	6033      	str	r3, [r6, #0]
 80094ca:	6823      	ldr	r3, [r4, #0]
 80094cc:	0699      	lsls	r1, r3, #26
 80094ce:	bf42      	ittt	mi
 80094d0:	6833      	ldrmi	r3, [r6, #0]
 80094d2:	3302      	addmi	r3, #2
 80094d4:	6033      	strmi	r3, [r6, #0]
 80094d6:	6825      	ldr	r5, [r4, #0]
 80094d8:	f015 0506 	ands.w	r5, r5, #6
 80094dc:	d106      	bne.n	80094ec <_printf_common+0x48>
 80094de:	f104 0a19 	add.w	sl, r4, #25
 80094e2:	68e3      	ldr	r3, [r4, #12]
 80094e4:	6832      	ldr	r2, [r6, #0]
 80094e6:	1a9b      	subs	r3, r3, r2
 80094e8:	42ab      	cmp	r3, r5
 80094ea:	dc26      	bgt.n	800953a <_printf_common+0x96>
 80094ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80094f0:	6822      	ldr	r2, [r4, #0]
 80094f2:	3b00      	subs	r3, #0
 80094f4:	bf18      	it	ne
 80094f6:	2301      	movne	r3, #1
 80094f8:	0692      	lsls	r2, r2, #26
 80094fa:	d42b      	bmi.n	8009554 <_printf_common+0xb0>
 80094fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009500:	4641      	mov	r1, r8
 8009502:	4638      	mov	r0, r7
 8009504:	47c8      	blx	r9
 8009506:	3001      	adds	r0, #1
 8009508:	d01e      	beq.n	8009548 <_printf_common+0xa4>
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	6922      	ldr	r2, [r4, #16]
 800950e:	f003 0306 	and.w	r3, r3, #6
 8009512:	2b04      	cmp	r3, #4
 8009514:	bf02      	ittt	eq
 8009516:	68e5      	ldreq	r5, [r4, #12]
 8009518:	6833      	ldreq	r3, [r6, #0]
 800951a:	1aed      	subeq	r5, r5, r3
 800951c:	68a3      	ldr	r3, [r4, #8]
 800951e:	bf0c      	ite	eq
 8009520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009524:	2500      	movne	r5, #0
 8009526:	4293      	cmp	r3, r2
 8009528:	bfc4      	itt	gt
 800952a:	1a9b      	subgt	r3, r3, r2
 800952c:	18ed      	addgt	r5, r5, r3
 800952e:	2600      	movs	r6, #0
 8009530:	341a      	adds	r4, #26
 8009532:	42b5      	cmp	r5, r6
 8009534:	d11a      	bne.n	800956c <_printf_common+0xc8>
 8009536:	2000      	movs	r0, #0
 8009538:	e008      	b.n	800954c <_printf_common+0xa8>
 800953a:	2301      	movs	r3, #1
 800953c:	4652      	mov	r2, sl
 800953e:	4641      	mov	r1, r8
 8009540:	4638      	mov	r0, r7
 8009542:	47c8      	blx	r9
 8009544:	3001      	adds	r0, #1
 8009546:	d103      	bne.n	8009550 <_printf_common+0xac>
 8009548:	f04f 30ff 	mov.w	r0, #4294967295
 800954c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009550:	3501      	adds	r5, #1
 8009552:	e7c6      	b.n	80094e2 <_printf_common+0x3e>
 8009554:	18e1      	adds	r1, r4, r3
 8009556:	1c5a      	adds	r2, r3, #1
 8009558:	2030      	movs	r0, #48	@ 0x30
 800955a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800955e:	4422      	add	r2, r4
 8009560:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009564:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009568:	3302      	adds	r3, #2
 800956a:	e7c7      	b.n	80094fc <_printf_common+0x58>
 800956c:	2301      	movs	r3, #1
 800956e:	4622      	mov	r2, r4
 8009570:	4641      	mov	r1, r8
 8009572:	4638      	mov	r0, r7
 8009574:	47c8      	blx	r9
 8009576:	3001      	adds	r0, #1
 8009578:	d0e6      	beq.n	8009548 <_printf_common+0xa4>
 800957a:	3601      	adds	r6, #1
 800957c:	e7d9      	b.n	8009532 <_printf_common+0x8e>
	...

08009580 <_printf_i>:
 8009580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009584:	7e0f      	ldrb	r7, [r1, #24]
 8009586:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009588:	2f78      	cmp	r7, #120	@ 0x78
 800958a:	4691      	mov	r9, r2
 800958c:	4680      	mov	r8, r0
 800958e:	460c      	mov	r4, r1
 8009590:	469a      	mov	sl, r3
 8009592:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009596:	d807      	bhi.n	80095a8 <_printf_i+0x28>
 8009598:	2f62      	cmp	r7, #98	@ 0x62
 800959a:	d80a      	bhi.n	80095b2 <_printf_i+0x32>
 800959c:	2f00      	cmp	r7, #0
 800959e:	f000 80d2 	beq.w	8009746 <_printf_i+0x1c6>
 80095a2:	2f58      	cmp	r7, #88	@ 0x58
 80095a4:	f000 80b9 	beq.w	800971a <_printf_i+0x19a>
 80095a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80095b0:	e03a      	b.n	8009628 <_printf_i+0xa8>
 80095b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80095b6:	2b15      	cmp	r3, #21
 80095b8:	d8f6      	bhi.n	80095a8 <_printf_i+0x28>
 80095ba:	a101      	add	r1, pc, #4	@ (adr r1, 80095c0 <_printf_i+0x40>)
 80095bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095c0:	08009619 	.word	0x08009619
 80095c4:	0800962d 	.word	0x0800962d
 80095c8:	080095a9 	.word	0x080095a9
 80095cc:	080095a9 	.word	0x080095a9
 80095d0:	080095a9 	.word	0x080095a9
 80095d4:	080095a9 	.word	0x080095a9
 80095d8:	0800962d 	.word	0x0800962d
 80095dc:	080095a9 	.word	0x080095a9
 80095e0:	080095a9 	.word	0x080095a9
 80095e4:	080095a9 	.word	0x080095a9
 80095e8:	080095a9 	.word	0x080095a9
 80095ec:	0800972d 	.word	0x0800972d
 80095f0:	08009657 	.word	0x08009657
 80095f4:	080096e7 	.word	0x080096e7
 80095f8:	080095a9 	.word	0x080095a9
 80095fc:	080095a9 	.word	0x080095a9
 8009600:	0800974f 	.word	0x0800974f
 8009604:	080095a9 	.word	0x080095a9
 8009608:	08009657 	.word	0x08009657
 800960c:	080095a9 	.word	0x080095a9
 8009610:	080095a9 	.word	0x080095a9
 8009614:	080096ef 	.word	0x080096ef
 8009618:	6833      	ldr	r3, [r6, #0]
 800961a:	1d1a      	adds	r2, r3, #4
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	6032      	str	r2, [r6, #0]
 8009620:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009624:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009628:	2301      	movs	r3, #1
 800962a:	e09d      	b.n	8009768 <_printf_i+0x1e8>
 800962c:	6833      	ldr	r3, [r6, #0]
 800962e:	6820      	ldr	r0, [r4, #0]
 8009630:	1d19      	adds	r1, r3, #4
 8009632:	6031      	str	r1, [r6, #0]
 8009634:	0606      	lsls	r6, r0, #24
 8009636:	d501      	bpl.n	800963c <_printf_i+0xbc>
 8009638:	681d      	ldr	r5, [r3, #0]
 800963a:	e003      	b.n	8009644 <_printf_i+0xc4>
 800963c:	0645      	lsls	r5, r0, #25
 800963e:	d5fb      	bpl.n	8009638 <_printf_i+0xb8>
 8009640:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009644:	2d00      	cmp	r5, #0
 8009646:	da03      	bge.n	8009650 <_printf_i+0xd0>
 8009648:	232d      	movs	r3, #45	@ 0x2d
 800964a:	426d      	negs	r5, r5
 800964c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009650:	4859      	ldr	r0, [pc, #356]	@ (80097b8 <_printf_i+0x238>)
 8009652:	230a      	movs	r3, #10
 8009654:	e011      	b.n	800967a <_printf_i+0xfa>
 8009656:	6821      	ldr	r1, [r4, #0]
 8009658:	6833      	ldr	r3, [r6, #0]
 800965a:	0608      	lsls	r0, r1, #24
 800965c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009660:	d402      	bmi.n	8009668 <_printf_i+0xe8>
 8009662:	0649      	lsls	r1, r1, #25
 8009664:	bf48      	it	mi
 8009666:	b2ad      	uxthmi	r5, r5
 8009668:	2f6f      	cmp	r7, #111	@ 0x6f
 800966a:	4853      	ldr	r0, [pc, #332]	@ (80097b8 <_printf_i+0x238>)
 800966c:	6033      	str	r3, [r6, #0]
 800966e:	bf14      	ite	ne
 8009670:	230a      	movne	r3, #10
 8009672:	2308      	moveq	r3, #8
 8009674:	2100      	movs	r1, #0
 8009676:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800967a:	6866      	ldr	r6, [r4, #4]
 800967c:	60a6      	str	r6, [r4, #8]
 800967e:	2e00      	cmp	r6, #0
 8009680:	bfa2      	ittt	ge
 8009682:	6821      	ldrge	r1, [r4, #0]
 8009684:	f021 0104 	bicge.w	r1, r1, #4
 8009688:	6021      	strge	r1, [r4, #0]
 800968a:	b90d      	cbnz	r5, 8009690 <_printf_i+0x110>
 800968c:	2e00      	cmp	r6, #0
 800968e:	d04b      	beq.n	8009728 <_printf_i+0x1a8>
 8009690:	4616      	mov	r6, r2
 8009692:	fbb5 f1f3 	udiv	r1, r5, r3
 8009696:	fb03 5711 	mls	r7, r3, r1, r5
 800969a:	5dc7      	ldrb	r7, [r0, r7]
 800969c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096a0:	462f      	mov	r7, r5
 80096a2:	42bb      	cmp	r3, r7
 80096a4:	460d      	mov	r5, r1
 80096a6:	d9f4      	bls.n	8009692 <_printf_i+0x112>
 80096a8:	2b08      	cmp	r3, #8
 80096aa:	d10b      	bne.n	80096c4 <_printf_i+0x144>
 80096ac:	6823      	ldr	r3, [r4, #0]
 80096ae:	07df      	lsls	r7, r3, #31
 80096b0:	d508      	bpl.n	80096c4 <_printf_i+0x144>
 80096b2:	6923      	ldr	r3, [r4, #16]
 80096b4:	6861      	ldr	r1, [r4, #4]
 80096b6:	4299      	cmp	r1, r3
 80096b8:	bfde      	ittt	le
 80096ba:	2330      	movle	r3, #48	@ 0x30
 80096bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096c4:	1b92      	subs	r2, r2, r6
 80096c6:	6122      	str	r2, [r4, #16]
 80096c8:	f8cd a000 	str.w	sl, [sp]
 80096cc:	464b      	mov	r3, r9
 80096ce:	aa03      	add	r2, sp, #12
 80096d0:	4621      	mov	r1, r4
 80096d2:	4640      	mov	r0, r8
 80096d4:	f7ff fee6 	bl	80094a4 <_printf_common>
 80096d8:	3001      	adds	r0, #1
 80096da:	d14a      	bne.n	8009772 <_printf_i+0x1f2>
 80096dc:	f04f 30ff 	mov.w	r0, #4294967295
 80096e0:	b004      	add	sp, #16
 80096e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e6:	6823      	ldr	r3, [r4, #0]
 80096e8:	f043 0320 	orr.w	r3, r3, #32
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	4833      	ldr	r0, [pc, #204]	@ (80097bc <_printf_i+0x23c>)
 80096f0:	2778      	movs	r7, #120	@ 0x78
 80096f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80096f6:	6823      	ldr	r3, [r4, #0]
 80096f8:	6831      	ldr	r1, [r6, #0]
 80096fa:	061f      	lsls	r7, r3, #24
 80096fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8009700:	d402      	bmi.n	8009708 <_printf_i+0x188>
 8009702:	065f      	lsls	r7, r3, #25
 8009704:	bf48      	it	mi
 8009706:	b2ad      	uxthmi	r5, r5
 8009708:	6031      	str	r1, [r6, #0]
 800970a:	07d9      	lsls	r1, r3, #31
 800970c:	bf44      	itt	mi
 800970e:	f043 0320 	orrmi.w	r3, r3, #32
 8009712:	6023      	strmi	r3, [r4, #0]
 8009714:	b11d      	cbz	r5, 800971e <_printf_i+0x19e>
 8009716:	2310      	movs	r3, #16
 8009718:	e7ac      	b.n	8009674 <_printf_i+0xf4>
 800971a:	4827      	ldr	r0, [pc, #156]	@ (80097b8 <_printf_i+0x238>)
 800971c:	e7e9      	b.n	80096f2 <_printf_i+0x172>
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	f023 0320 	bic.w	r3, r3, #32
 8009724:	6023      	str	r3, [r4, #0]
 8009726:	e7f6      	b.n	8009716 <_printf_i+0x196>
 8009728:	4616      	mov	r6, r2
 800972a:	e7bd      	b.n	80096a8 <_printf_i+0x128>
 800972c:	6833      	ldr	r3, [r6, #0]
 800972e:	6825      	ldr	r5, [r4, #0]
 8009730:	6961      	ldr	r1, [r4, #20]
 8009732:	1d18      	adds	r0, r3, #4
 8009734:	6030      	str	r0, [r6, #0]
 8009736:	062e      	lsls	r6, r5, #24
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	d501      	bpl.n	8009740 <_printf_i+0x1c0>
 800973c:	6019      	str	r1, [r3, #0]
 800973e:	e002      	b.n	8009746 <_printf_i+0x1c6>
 8009740:	0668      	lsls	r0, r5, #25
 8009742:	d5fb      	bpl.n	800973c <_printf_i+0x1bc>
 8009744:	8019      	strh	r1, [r3, #0]
 8009746:	2300      	movs	r3, #0
 8009748:	6123      	str	r3, [r4, #16]
 800974a:	4616      	mov	r6, r2
 800974c:	e7bc      	b.n	80096c8 <_printf_i+0x148>
 800974e:	6833      	ldr	r3, [r6, #0]
 8009750:	1d1a      	adds	r2, r3, #4
 8009752:	6032      	str	r2, [r6, #0]
 8009754:	681e      	ldr	r6, [r3, #0]
 8009756:	6862      	ldr	r2, [r4, #4]
 8009758:	2100      	movs	r1, #0
 800975a:	4630      	mov	r0, r6
 800975c:	f7f6 fd40 	bl	80001e0 <memchr>
 8009760:	b108      	cbz	r0, 8009766 <_printf_i+0x1e6>
 8009762:	1b80      	subs	r0, r0, r6
 8009764:	6060      	str	r0, [r4, #4]
 8009766:	6863      	ldr	r3, [r4, #4]
 8009768:	6123      	str	r3, [r4, #16]
 800976a:	2300      	movs	r3, #0
 800976c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009770:	e7aa      	b.n	80096c8 <_printf_i+0x148>
 8009772:	6923      	ldr	r3, [r4, #16]
 8009774:	4632      	mov	r2, r6
 8009776:	4649      	mov	r1, r9
 8009778:	4640      	mov	r0, r8
 800977a:	47d0      	blx	sl
 800977c:	3001      	adds	r0, #1
 800977e:	d0ad      	beq.n	80096dc <_printf_i+0x15c>
 8009780:	6823      	ldr	r3, [r4, #0]
 8009782:	079b      	lsls	r3, r3, #30
 8009784:	d413      	bmi.n	80097ae <_printf_i+0x22e>
 8009786:	68e0      	ldr	r0, [r4, #12]
 8009788:	9b03      	ldr	r3, [sp, #12]
 800978a:	4298      	cmp	r0, r3
 800978c:	bfb8      	it	lt
 800978e:	4618      	movlt	r0, r3
 8009790:	e7a6      	b.n	80096e0 <_printf_i+0x160>
 8009792:	2301      	movs	r3, #1
 8009794:	4632      	mov	r2, r6
 8009796:	4649      	mov	r1, r9
 8009798:	4640      	mov	r0, r8
 800979a:	47d0      	blx	sl
 800979c:	3001      	adds	r0, #1
 800979e:	d09d      	beq.n	80096dc <_printf_i+0x15c>
 80097a0:	3501      	adds	r5, #1
 80097a2:	68e3      	ldr	r3, [r4, #12]
 80097a4:	9903      	ldr	r1, [sp, #12]
 80097a6:	1a5b      	subs	r3, r3, r1
 80097a8:	42ab      	cmp	r3, r5
 80097aa:	dcf2      	bgt.n	8009792 <_printf_i+0x212>
 80097ac:	e7eb      	b.n	8009786 <_printf_i+0x206>
 80097ae:	2500      	movs	r5, #0
 80097b0:	f104 0619 	add.w	r6, r4, #25
 80097b4:	e7f5      	b.n	80097a2 <_printf_i+0x222>
 80097b6:	bf00      	nop
 80097b8:	0800997d 	.word	0x0800997d
 80097bc:	0800998e 	.word	0x0800998e

080097c0 <memmove>:
 80097c0:	4288      	cmp	r0, r1
 80097c2:	b510      	push	{r4, lr}
 80097c4:	eb01 0402 	add.w	r4, r1, r2
 80097c8:	d902      	bls.n	80097d0 <memmove+0x10>
 80097ca:	4284      	cmp	r4, r0
 80097cc:	4623      	mov	r3, r4
 80097ce:	d807      	bhi.n	80097e0 <memmove+0x20>
 80097d0:	1e43      	subs	r3, r0, #1
 80097d2:	42a1      	cmp	r1, r4
 80097d4:	d008      	beq.n	80097e8 <memmove+0x28>
 80097d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097de:	e7f8      	b.n	80097d2 <memmove+0x12>
 80097e0:	4402      	add	r2, r0
 80097e2:	4601      	mov	r1, r0
 80097e4:	428a      	cmp	r2, r1
 80097e6:	d100      	bne.n	80097ea <memmove+0x2a>
 80097e8:	bd10      	pop	{r4, pc}
 80097ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097f2:	e7f7      	b.n	80097e4 <memmove+0x24>

080097f4 <_sbrk_r>:
 80097f4:	b538      	push	{r3, r4, r5, lr}
 80097f6:	4d06      	ldr	r5, [pc, #24]	@ (8009810 <_sbrk_r+0x1c>)
 80097f8:	2300      	movs	r3, #0
 80097fa:	4604      	mov	r4, r0
 80097fc:	4608      	mov	r0, r1
 80097fe:	602b      	str	r3, [r5, #0]
 8009800:	f7f7 fa10 	bl	8000c24 <_sbrk>
 8009804:	1c43      	adds	r3, r0, #1
 8009806:	d102      	bne.n	800980e <_sbrk_r+0x1a>
 8009808:	682b      	ldr	r3, [r5, #0]
 800980a:	b103      	cbz	r3, 800980e <_sbrk_r+0x1a>
 800980c:	6023      	str	r3, [r4, #0]
 800980e:	bd38      	pop	{r3, r4, r5, pc}
 8009810:	200017b0 	.word	0x200017b0

08009814 <memcpy>:
 8009814:	440a      	add	r2, r1
 8009816:	4291      	cmp	r1, r2
 8009818:	f100 33ff 	add.w	r3, r0, #4294967295
 800981c:	d100      	bne.n	8009820 <memcpy+0xc>
 800981e:	4770      	bx	lr
 8009820:	b510      	push	{r4, lr}
 8009822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009826:	f803 4f01 	strb.w	r4, [r3, #1]!
 800982a:	4291      	cmp	r1, r2
 800982c:	d1f9      	bne.n	8009822 <memcpy+0xe>
 800982e:	bd10      	pop	{r4, pc}

08009830 <_realloc_r>:
 8009830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009834:	4680      	mov	r8, r0
 8009836:	4615      	mov	r5, r2
 8009838:	460c      	mov	r4, r1
 800983a:	b921      	cbnz	r1, 8009846 <_realloc_r+0x16>
 800983c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009840:	4611      	mov	r1, r2
 8009842:	f7ff bc4b 	b.w	80090dc <_malloc_r>
 8009846:	b92a      	cbnz	r2, 8009854 <_realloc_r+0x24>
 8009848:	f7ff fbdc 	bl	8009004 <_free_r>
 800984c:	2400      	movs	r4, #0
 800984e:	4620      	mov	r0, r4
 8009850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009854:	f000 f81a 	bl	800988c <_malloc_usable_size_r>
 8009858:	4285      	cmp	r5, r0
 800985a:	4606      	mov	r6, r0
 800985c:	d802      	bhi.n	8009864 <_realloc_r+0x34>
 800985e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009862:	d8f4      	bhi.n	800984e <_realloc_r+0x1e>
 8009864:	4629      	mov	r1, r5
 8009866:	4640      	mov	r0, r8
 8009868:	f7ff fc38 	bl	80090dc <_malloc_r>
 800986c:	4607      	mov	r7, r0
 800986e:	2800      	cmp	r0, #0
 8009870:	d0ec      	beq.n	800984c <_realloc_r+0x1c>
 8009872:	42b5      	cmp	r5, r6
 8009874:	462a      	mov	r2, r5
 8009876:	4621      	mov	r1, r4
 8009878:	bf28      	it	cs
 800987a:	4632      	movcs	r2, r6
 800987c:	f7ff ffca 	bl	8009814 <memcpy>
 8009880:	4621      	mov	r1, r4
 8009882:	4640      	mov	r0, r8
 8009884:	f7ff fbbe 	bl	8009004 <_free_r>
 8009888:	463c      	mov	r4, r7
 800988a:	e7e0      	b.n	800984e <_realloc_r+0x1e>

0800988c <_malloc_usable_size_r>:
 800988c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009890:	1f18      	subs	r0, r3, #4
 8009892:	2b00      	cmp	r3, #0
 8009894:	bfbc      	itt	lt
 8009896:	580b      	ldrlt	r3, [r1, r0]
 8009898:	18c0      	addlt	r0, r0, r3
 800989a:	4770      	bx	lr

0800989c <_init>:
 800989c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989e:	bf00      	nop
 80098a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098a2:	bc08      	pop	{r3}
 80098a4:	469e      	mov	lr, r3
 80098a6:	4770      	bx	lr

080098a8 <_fini>:
 80098a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098aa:	bf00      	nop
 80098ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ae:	bc08      	pop	{r3}
 80098b0:	469e      	mov	lr, r3
 80098b2:	4770      	bx	lr
